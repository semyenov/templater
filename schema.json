{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "allOf": [
        {
            "$ref": "#/definitions/Omit<FlatESLintConfigItem<MergeIntersection<Prefix<Unprefix<TypeScriptRules,\"@typescript-eslint/\">,\"ts/\">&Prefix<Unprefix<MergeIntersection<PreferLowercaseTitleRule&MaxNestedDescribeRule&NoIdenticalTitleRule&NoFocusedTestsRule&NoConditionalTestsRule&ExpectExpectRule&ConsistentTestItRule&PreferToBeRule&NoHooksRule&NoRestrictedViMethodsRule&ConsistentTestFilenameRule&MaxExpectsRule&NoAliasMethodsRule&NoCommentedOutTestsRule&NoConditionalExpectRule&NoConditionalInTestRule&NoDisabledTestsRule&NoDoneCallbackRule&NoDuplicateHooksRule&NoLargeSnapshotsRule&NoInterpolationInSnapshotsRule&NoMocksImportRule&NoRestrictedMatchersRule&NoStandaloneExpectRule&NoTestPrefixesRule&NoTestReturnStatementRule&PreferCalledWithRule&ValidTitleRule&ValidExpectRule&PreferToBeFalsyRule&PreferToBeObjectRule&PreferToBeTruthyRule&PreferToHaveLengthRule&PreferEqualityMatcherRule&PreferStrictEqualRule&PreferExpectResolvesRule&PreferEachRule&PreferHooksOnTopRule&PreferHooksInOrderRule&PreferMockPromiseShorthandRule&PreferSnapshotHintRule&ValidDescribeCallbackRule&RequireTopLevelDescribeRule&RequireToThrowMessageRule&RequireHookRule&PreferTodoRule&PreferSpyOnRule&PreferComparisonMatcherRule&PreferToContainRule>,\"vitest/\">,\"test/\">&Prefix<Unprefix<YmlRules,\"yml/\">,\"yaml/\">&Prefix<Unprefix<NRules,\"n/\">,\"node/\">&Prefix<StylisticRules,\"style/\">&Prefix<Rules,\"antfu/\">&NoUnresolvedRule&NamedRule&DefaultRule&NamespaceRule&NoNamespaceRule$2&ExportRule&NoMutableExportsRule&ExtensionsRule&NoRestrictedPathsRule&NoInternalModulesRule&GroupExportsRule&NoRelativePackagesRule&NoRelativeParentImportsRule&ConsistentTypeSpecifierStyleRule&NoSelfImportRule&NoCycleRule&NoNamedDefaultRule&NoNamedAsDefaultRule&NoNamedAsDefaultMemberRule&NoAnonymousDefaultExportRule&NoUnusedModulesRule&NoCommonjsRule&NoAmdRule&NoDuplicatesRule&FirstRule&MaxDependenciesRule&NoExtraneousDependenciesRule&NoAbsolutePathRule&NoNodejsModulesRule&NoWebpackLoaderSyntaxRule&OrderRule&NewlineAfterImportRule&PreferDefaultExportRule&NoDefaultExportRule&NoNamedExportRule&NoDynamicRequireRule&UnambiguousRule&NoUnassignedImportRule&NoUselessPathSegmentsRule&DynamicImportChunknameRule&NoImportModuleExportsRule&NoEmptyNamedBlocksRule&ExportsLastRule&NoDeprecatedRule$1&ImportsFirstRule&AccessorPairsRule&ArrayBracketNewlineRule$2&ArrayBracketSpacingRule$2&ArrayCallbackReturnRule&ArrayElementNewlineRule$2&ArrowBodyStyleRule&ArrowParensRule&ArrowSpacingRule$1&BlockScopedVarRule&BlockSpacingRule$2&BraceStyleRule$2&CallbackReturnRule$2&CamelcaseRule$1&CapitalizedCommentsRule&ClassMethodsUseThisRule$1&CommaDangleRule$3&CommaSpacingRule$2&CommaStyleRule$2&ComplexityRule&ComputedPropertySpacingRule&ConsistentReturnRule&ConsistentThisRule&ConstructorSuperRule&CurlyRule&DefaultCaseRule&DefaultCaseLastRule&DefaultParamLastRule$1&DotLocationRule$1&DotNotationRule$2&EolLastRule&EqeqeqRule$1&ForDirectionRule&FuncCallSpacingRule$2&FuncNameMatchingRule&FuncNamesRule&FuncStyleRule&FunctionCallArgumentNewlineRule&FunctionParenNewlineRule&GeneratorStarSpacingRule&GetterReturnRule&GlobalRequireRule$2&GroupedAccessorPairsRule&GuardForInRule&HandleCallbackErrRule$2&IdBlacklistRule&IdDenylistRule&IdLengthRule&IdMatchRule&ImplicitArrowLinebreakRule&IndentRule$3&IndentLegacyRule&InitDeclarationsRule$1&JsxQuotesRule&KeySpacingRule$4&KeywordSpacingRule$2&LineCommentPositionRule&LinebreakStyleRule&LinesAroundCommentRule$1&LinesAroundDirectiveRule&LinesBetweenClassMembersRule$1&LogicalAssignmentOperatorsRule&MaxClassesPerFileRule&MaxDepthRule&MaxLenRule$1&MaxLinesRule&MaxLinesPerFunctionRule&MaxNestedCallbacksRule&MaxParamsRule&MaxStatementsRule&MaxStatementsPerLineRule&MultilineCommentStyleRule&MultilineTernaryRule$1&NewCapRule&NewParensRule&NewlineAfterVarRule&NewlineBeforeReturnRule&NewlinePerChainedCallRule&NoAlertRule&NoArrayConstructorRule$1&NoAsyncPromiseExecutorRule&NoAwaitInLoopRule&NoBitwiseRule&NoBufferConstructorRule&NoCallerRule&NoCaseDeclarationsRule&NoCatchShadowRule&NoClassAssignRule&NoCompareNegZeroRule&NoCondAssignRule&NoConfusingArrowRule&NoConsoleRule$1&NoConstAssignRule&NoConstantBinaryExpressionRule&NoConstantConditionRule$1&NoConstructorReturnRule&NoContinueRule&NoControlRegexRule&NoDebuggerRule&NoDeleteVarRule&NoDivRegexRule&NoDupeArgsRule&NoDupeClassMembersRule$1&NoDupeElseIfRule&NoDupeKeysRule$2&NoDuplicateCaseRule&NoDuplicateImportsRule&NoElseReturnRule&NoEmptyRule&NoEmptyCharacterClassRule&NoEmptyFunctionRule$1&NoEmptyPatternRule$1&NoEmptyStaticBlockRule&NoEqNullRule&NoEvalRule&NoExAssignRule&NoExtendNativeRule&NoExtraBindRule&NoExtraBooleanCastRule&NoExtraLabelRule&NoExtraParensRule$2&NoExtraSemiRule$1&NoFallthroughRule&NoFloatingDecimalRule$1&NoFuncAssignRule&NoGlobalAssignRule&NoImplicitCoercionRule&NoImplicitGlobalsRule&NoImpliedEvalRule$1&NoImportAssignRule&NoInlineCommentsRule&NoInnerDeclarationsRule&NoInvalidRegexpRule&NoInvalidThisRule$1&NoIrregularWhitespaceRule$3&NoIteratorRule&NoLabelVarRule&NoLabelsRule&NoLoneBlocksRule&NoLonelyIfRule$1&NoLoopFuncRule$1&NoLossOfPrecisionRule$2&NoMagicNumbersRule$1&NoMisleadingCharacterClassRule&NoMixedOperatorsRule&NoMixedRequiresRule$2&NoMixedSpacesAndTabsRule&NoMultiAssignRule&NoMultiSpacesRule$1&NoMultiStrRule$1&NoMultipleEmptyLinesRule$1&NoNativeReassignRule&NoNegatedConditionRule$1&NoNegatedInLhsRule&NoNestedTernaryRule$1&NoNewRule&NoNewFuncRule&NoNewNativeNonconstructorRule&NoNewObjectRule&NoNewRequireRule$2&NoNewSymbolRule&NoNewWrappersRule&NoNonoctalDecimalEscapeRule&NoObjCallsRule&NoObjectConstructorRule&NoOctalRule$1&NoOctalEscapeRule$1&NoParamReassignRule&NoPathConcatRule$2&NoPlusplusRule&NoProcessEnvRule$2&NoProcessExitRule$3&NoPromiseExecutorReturnRule&NoProtoRule&NoPrototypeBuiltinsRule&NoRedeclareRule$1&NoRegexSpacesRule&NoRestrictedExportsRule&NoRestrictedGlobalsRule&NoRestrictedImportsRule$1&NoRestrictedModulesRule&NoRestrictedPropertiesRule&NoRestrictedSyntaxRule$2&NoReturnAssignRule&NoReturnAwaitRule&NoScriptUrlRule&NoSelfAssignRule&NoSelfCompareRule&NoSequencesRule&NoSetterReturnRule&NoShadowRule$1&NoShadowRestrictedNamesRule&NoSpacedFuncRule&NoSparseArraysRule$2&NoSyncRule$2&NoTabsRule&NoTemplateCurlyInStringRule&NoTernaryRule&NoThisBeforeSuperRule&NoThrowLiteralRule$1&NoTrailingSpacesRule&NoUndefRule&NoUndefInitRule&NoUndefinedRule&NoUnderscoreDangleRule&NoUnexpectedMultilineRule&NoUnmodifiedLoopConditionRule&NoUnneededTernaryRule&NoUnreachableRule&NoUnreachableLoopRule&NoUnsafeFinallyRule&NoUnsafeNegationRule&NoUnsafeOptionalChainingRule&NoUnusedExpressionsRule$1&NoUnusedLabelsRule&NoUnusedPrivateClassMembersRule&NoUnusedVarsRule$2&NoUseBeforeDefineRule$1&NoUselessBackreferenceRule&NoUselessCallRule&NoUselessCatchRule$1&NoUselessComputedKeyRule&NoUselessConcatRule$1&NoUselessConstructorRule$1&NoUselessEscapeRule$1&NoUselessRenameRule&NoUselessReturnRule&NoVarRule&NoVoidRule&NoWarningCommentsRule&NoWhitespaceBeforePropertyRule&NoWithRule&NonblockStatementBodyPositionRule&ObjectCurlyNewlineRule$2&ObjectCurlySpacingRule$3&ObjectPropertyNewlineRule$2&ObjectShorthandRule$1&OneVarRule&OneVarDeclarationPerLineRule&OperatorAssignmentRule&OperatorLinebreakRule$1&PaddedBlocksRule&PaddingLineBetweenStatementsRule$1&PreferArrowCallbackRule&PreferConstRule&PreferDestructuringRule&PreferExponentiationOperatorRule$1&PreferNamedCaptureGroupRule&PreferNumericLiteralsRule&PreferObjectHasOwnRule$1&PreferObjectSpreadRule&PreferPromiseRejectErrorsRule&PreferReflectRule&PreferRegexLiteralsRule&PreferRestParamsRule&PreferSpreadRule$1&PreferTemplateRule$1&QuotePropsRule$2&QuotesRule$3&RadixRule&RequireAtomicUpdatesRule&RequireAwaitRule$1&RequireJsdocRule$1&RequireUnicodeRegexpRule&RequireYieldRule&RestSpreadSpacingRule&SemiRule$1&SemiSpacingRule&SemiStyleRule&SortImportsRule&SortKeysRule$3&SortVarsRule&SpaceBeforeBlocksRule$1&SpaceBeforeFunctionParenRule$1&SpaceInParensRule$1&SpaceInfixOpsRule$2&SpaceUnaryOpsRule$2&SpacedCommentRule$1&StrictRule&SwitchColonSpacingRule&SymbolDescriptionRule&TemplateCurlySpacingRule$1&TemplateTagSpacingRule&UnicodeBomRule&UseIsnanRule&ValidJsdocRule&ValidTypeofRule&VarsOnTopRule&WrapIifeRule&WrapRegexRule&YieldStarSpacingRule&YodaRule&ArrayBracketNewlineRule$1&ArrayBracketSpacingRule$1&ArrayElementNewlineRule$1&AutoRule&CommaDangleRule$2&CommaStyleRule$1&IndentRule$2&KeyNameCasingRule$1&KeySpacingRule$3&NoBigintLiteralsRule&NoBinaryExpressionRule&NoBinaryNumericLiteralsRule&NoCommentsRule&NoDupeKeysRule$1&NoEscapeSequenceInIdentifierRule&NoFloatingDecimalRule&NoHexadecimalNumericLiteralsRule&NoInfinityRule&NoIrregularWhitespaceRule$2&NoMultiStrRule&NoNanRule&NoNumberPropsRule&NoNumericSeparatorsRule&NoOctalEscapeRule&NoOctalNumericLiteralsRule&NoOctalRule&NoParenthesizedRule&NoPlusSignRule&NoRegexpLiteralsRule&NoSparseArraysRule$1&NoTemplateLiteralsRule&NoUndefinedValueRule&NoUnicodeCodepointEscapesRule&NoUselessEscapeRule&ObjectCurlyNewlineRule$1&ObjectCurlySpacingRule$2&ObjectPropertyNewlineRule$1&QuotePropsRule$1&QuotesRule$2&SortArrayValuesRule&SortKeysRule$2&SpaceUnaryOpsRule$1&ValidJsonNumberRule&VueCustomBlockNoParsingErrorRule$1&ArrayBracketNewlineRule&ArrayBracketSpacingRule&ArrayElementNewlineRule&ArrowSpacingRule&AttributeHyphenationRule&AttributesOrderRule&BlockLangRule&BlockOrderRule&BlockSpacingRule&BlockTagNewlineRule&BraceStyleRule&CamelcaseRule&CommaDangleRule&CommaSpacingRule&CommaStyleRule&CommentDirectiveRule&ComponentApiStyleRule&ComponentDefinitionNameCasingRule&ComponentNameInTemplateCasingRule$1&ComponentOptionsNameCasingRule&ComponentTagsOrderRule&CustomEventNameCasingRule&DefineEmitsDeclarationRule&DefineMacrosOrderRule&DefinePropsDeclarationRule&DotLocationRule&DotNotationRule&EqeqeqRule&FirstAttributeLinebreakRule&FuncCallSpacingRule&HtmlButtonHasTypeRule&HtmlClosingBracketNewlineRule&HtmlClosingBracketSpacingRule&HtmlCommentContentNewlineRule&HtmlCommentContentSpacingRule&HtmlCommentIndentRule&HtmlEndTagsRule&HtmlIndentRule&HtmlQuotesRule&HtmlSelfClosingRule&JsxUsesVarsRule&KeySpacingRule$1&KeywordSpacingRule&MatchComponentFileNameRule&MatchComponentImportNameRule&MaxAttributesPerLineRule&MaxLenRule&MaxLinesPerBlockRule&MultiWordComponentNamesRule&MultilineHtmlElementContentNewlineRule&MultilineTernaryRule&MustacheInterpolationSpacingRule&NewLineBetweenMultiLinePropertyRule&NextTickStyleRule&NoArrowFunctionsInWatchRule&NoAsyncInComputedPropertiesRule&NoBareStringsInTemplateRule&NoBooleanDefaultRule&NoChildContentRule&NoComputedPropertiesInDataRule&NoConsoleRule&NoConstantConditionRule&NoCustomModifiersOnVModelRule&NoDeprecatedDataObjectDeclarationRule&NoDeprecatedDestroyedLifecycleRule&NoDeprecatedDollarListenersApiRule&NoDeprecatedDollarScopedslotsApiRule&NoDeprecatedEventsApiRule&NoDeprecatedFilterRule&NoDeprecatedFunctionalTemplateRule&NoDeprecatedHtmlElementIsRule&NoDeprecatedInlineTemplateRule&NoDeprecatedModelDefinitionRule&NoDeprecatedPropsDefaultThisRule&NoDeprecatedRouterLinkTagPropRule&NoDeprecatedScopeAttributeRule&NoDeprecatedSlotAttributeRule&NoDeprecatedSlotScopeAttributeRule&NoDeprecatedVBindSyncRule&NoDeprecatedVIsRule&NoDeprecatedVOnNativeModifierRule&NoDeprecatedVOnNumberModifiersRule&NoDeprecatedVueConfigKeycodesRule&NoDupeKeysRule&NoDupeVElseIfRule&NoDuplicateAttrInheritanceRule&NoDuplicateAttributesRule&NoEmptyComponentBlockRule&NoEmptyPatternRule&NoExportInScriptSetupRule&NoExposeAfterAwaitRule&NoExtraParensRule&NoInvalidModelKeysRule&NoIrregularWhitespaceRule$1&NoLifecycleAfterAwaitRule&NoLoneTemplateRule&NoLossOfPrecisionRule&NoMultiSpacesRule&NoMultipleObjectsInClassRule&NoMultipleSlotArgsRule&NoMultipleTemplateRootRule&NoMutatingPropsRule&NoParsingErrorRule$1&NoPotentialComponentOptionTypoRule&NoRefAsOperandRule&NoRefObjectDestructureRule&NoRefObjectReactivityLossRule&NoRequiredPropWithDefaultRule&NoReservedComponentNamesRule&NoReservedKeysRule&NoReservedPropsRule&NoRestrictedBlockRule&NoRestrictedCallAfterAwaitRule&NoRestrictedClassRule&NoRestrictedComponentNamesRule&NoRestrictedComponentOptionsRule&NoRestrictedCustomEventRule&NoRestrictedHtmlElementsRule&NoRestrictedPropsRule&NoRestrictedStaticAttributeRule&NoRestrictedSyntaxRule&NoRestrictedVBindRule&NoRootVIfRule&NoSetupPropsDestructureRule&NoSetupPropsReactivityLossRule&NoSharedComponentDataRule&NoSideEffectsInComputedPropertiesRule&NoSpacesAroundEqualSignsInAttributeRule&NoSparseArraysRule&NoStaticInlineStylesRule&NoTemplateKeyRule&NoTemplateShadowRule&NoTemplateTargetBlankRule&NoTextareaMustacheRule&NoThisInBeforeRouteEnterRule&NoUndefComponentsRule&NoUndefPropertiesRule&NoUnsupportedFeaturesRule&NoUnusedComponentsRule&NoUnusedPropertiesRule&NoUnusedRefsRule&NoUnusedVarsRule&NoUseComputedPropertyLikeMethodRule&NoUseVElseWithVForRule&NoUseVIfWithVForRule&NoUselessConcatRule&NoUselessMustachesRule&NoUselessTemplateAttributesRule&NoUselessVBindRule&NoVForTemplateKeyOnChildRule&NoVForTemplateKeyRule&NoVHtmlRule$1&NoVModelArgumentRule&NoVTextVHtmlOnComponentRule&NoVTextRule&NoWatchAfterAwaitRule&ObjectCurlyNewlineRule&ObjectCurlySpacingRule&ObjectPropertyNewlineRule&ObjectShorthandRule&OneComponentPerFileRule&OperatorLinebreakRule&OrderInComponentsRule&PaddingLineBetweenBlocksRule&PaddingLineBetweenTagsRule&PaddingLinesInComponentDefinitionRule&PreferDefineOptionsRule&PreferImportFromVueRule&PreferPropTypeBooleanFirstRule&PreferSeparateStaticClassRule&PreferTemplateRule&PreferTrueAttributeShorthandRule&PropNameCasingRule&QuotePropsRule&RequireComponentIsRule&RequireDefaultPropRule&RequireDirectExportRule&RequireEmitValidatorRule&RequireExplicitEmitsRule&RequireExposeRule&RequireMacroVariableNameRule&RequireNamePropertyRule&RequirePropCommentRule&RequirePropTypeConstructorRule&RequirePropTypesRule&RequireRenderReturnRule&RequireSlotsAsFunctionsRule&RequireToggleInsideTransitionRule&RequireTypedObjectPropRule&RequireTypedRefRule&RequireVForKeyRule&RequireValidDefaultPropRule&ReturnInComputedPropertyRule&ReturnInEmitsValidatorRule&ScriptIndentRule&ScriptSetupUsesVarsRule&SinglelineHtmlElementContentNewlineRule&SortKeysRule$1&SpaceInParensRule&SpaceInfixOpsRule&SpaceUnaryOpsRule&StaticClassNamesOrderRule&TemplateCurlySpacingRule&ThisInTemplateRule&UseVOnExactRule&VBindStyleRule&VForDelimiterStyleRule&VOnEventHyphenationRule&VOnFunctionCallRule&VOnHandlerStyleRule&VOnStyleRule&VSlotStyleRule&ValidAttributeNameRule&ValidDefineEmitsRule&ValidDefineOptionsRule&ValidDefinePropsRule&ValidModelDefinitionRule&ValidNextTickRule&ValidTemplateRootRule&ValidVBindSyncRule&ValidVBindRule&ValidVCloakRule&ValidVElseIfRule&ValidVElseRule&ValidVForRule&ValidVHtmlRule&ValidVIfRule&ValidVIsRule&ValidVMemoRule&ValidVModelRule&ValidVOnRule&ValidVOnceRule&ValidVPreRule&ValidVShowRule&ValidVSlotRule&ValidVTextRule&BetterRegexRule&CatchErrorNameRule&ConsistentDestructuringRule&ConsistentFunctionScopingRule&CustomErrorDefinitionRule&EmptyBraceSpacesRule&ErrorMessageRule&EscapeCaseRule&ExpiringTodoCommentsRule&ExplicitLengthCheckRule&FilenameCaseRule&ImportStyleRule&NewForBuiltinsRule&NoAbusiveEslintDisableRule&NoArrayCallbackReferenceRule&NoArrayForEachRule&NoArrayMethodThisArgumentRule&NoArrayPushPushRule&NoArrayReduceRule&NoAwaitExpressionMemberRule&NoConsoleSpacesRule&NoDocumentCookieRule&NoEmptyFileRule&NoForLoopRule&NoHexEscapeRule&NoInstanceofArrayRule&NoInvalidRemoveEventListenerRule&NoKeywordPrefixRule&NoLonelyIfRule&NoNegatedConditionRule&NoNestedTernaryRule&NoNewArrayRule&NoNewBufferRule&NoNullRule&NoObjectAsDefaultParameterRule&NoProcessExitRule&NoStaticOnlyClassRule&NoThenableRule&NoThisAssignmentRule&NoTypeofUndefinedRule&NoUnnecessaryAwaitRule&NoUnreadableArrayDestructuringRule&NoUnreadableIifeRule&NoUnusedPropertiesRule$1&NoUselessFallbackInSpreadRule&NoUselessLengthCheckRule&NoUselessPromiseResolveRejectRule&NoUselessSpreadRule&NoUselessSwitchCaseRule&NoUselessUndefinedRule&NoZeroFractionsRule&NumberLiteralCaseRule&NumericSeparatorsStyleRule&PreferAddEventListenerRule&PreferArrayFindRule&PreferArrayFlatMapRule&PreferArrayFlatRule&PreferArrayIndexOfRule&PreferArraySomeRule&PreferAtRule&PreferBlobReadingMethodsRule&PreferCodePointRule&PreferDateNowRule&PreferDefaultParametersRule&PreferDomNodeAppendRule&PreferDomNodeDatasetRule&PreferDomNodeRemoveRule&PreferDomNodeTextContentRule&PreferEventTargetRule&PreferExportFromRule&PreferIncludesRule&PreferJsonParseBufferRule&PreferKeyboardEventKeyRule&PreferLogicalOperatorOverTernaryRule&PreferMathTruncRule&PreferModernDomApisRule&PreferModernMathApisRule&PreferModuleRule&PreferNativeCoercionFunctionsRule&PreferNegativeIndexRule&PreferNodeProtocolRule&PreferNumberPropertiesRule&PreferObjectFromEntriesRule&PreferOptionalCatchBindingRule&PreferPrototypeMethodsRule&PreferQuerySelectorRule&PreferReflectApplyRule&PreferRegexpTestRule&PreferSetHasRule&PreferSetSizeRule&PreferSpreadRule&PreferStringReplaceAllRule&PreferStringSliceRule&PreferStringStartsEndsWithRule&PreferStringTrimStartEndRule&PreferSwitchRule&PreferTernaryRule&PreferTopLevelAwaitRule&PreferTypeErrorRule&PreventAbbreviationsRule&RelativeUrlStyleRule&RequireArrayJoinSeparatorRule&RequireNumberToFixedDigitsArgumentRule&RequirePostMessageTargetOriginRule&StringContentRule&SwitchCaseBracesRule&TemplateIndentRule&TextEncodingIdentifierCaseRule&ThrowNewErrorRule&ImportIndexRule&NoArrayInstanceofRule&NoFnReferenceInIteratorRule&NoReduceRule&NoUnsafeRegexRule&PreferDatasetRule&PreferEventKeyRule&PreferExponentiationOperatorRule&PreferFlatMapRule&PreferNodeAppendRule&PreferNodeRemoveRule&PreferObjectHasOwnRule&PreferReplaceAllRule&PreferStartsEndsWithRule&PreferTextContentRule&PreferTrimStartEndRule&RegexShorthandRule&DisableEnablePairRule&NoAggregatingEnableRule&NoDuplicateDisableRule&NoRestrictedDisableRule&NoUnlimitedDisableRule&NoUnusedDisableRule&NoUnusedEnableRule&NoUseRule&RequireDescriptionRule$2&{'test/no-only-tests':RuleConfig<[]>;}>,false>,\"plugins\">"
        },
        {
            "properties": {
                "name": {
                    "description": "Custom name of each config item",
                    "type": "string"
                },
                "plugins": {
                    "$ref": "#/definitions/Record<string,any>",
                    "description": "An object containing a name-value mapping of plugin names to plugin objects. When `files` is specified, these plugins are only available to the matching files."
                }
            },
            "type": "object"
        }
    ],
    "definitions": {
        "Abbreviations": {
            "additionalProperties": {
                "$ref": "#/definitions/Replacements"
            },
            "type": "object"
        },
        "AccessibilityLevel": {
            "description": "Option.",
            "enum": [
                "explicit",
                "no-public",
                "off"
            ],
            "type": "string"
        },
        "AccessorPairsOption": {
            "description": "Option.",
            "properties": {
                "enforceForClassMembers": {
                    "type": "boolean"
                },
                "getWithoutSet": {
                    "type": "boolean"
                },
                "setWithoutGet": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AccessorPairsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/AccessorPairsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce getter and setter pairs in objects and classes."
        },
        "AdjacentOverloadSignaturesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require that function overload signatures be consecutive."
        },
        "AllItems": {
            "enum": [
                "#private-field",
                "#private-get",
                "#private-instance-field",
                "#private-instance-get",
                "#private-instance-method",
                "#private-instance-readonly-field",
                "#private-instance-set",
                "#private-instance-static-initialization",
                "#private-method",
                "#private-readonly-field",
                "#private-set",
                "#private-static-field",
                "#private-static-get",
                "#private-static-method",
                "#private-static-readonly-field",
                "#private-static-set",
                "#private-static-static-initialization",
                "abstract-field",
                "abstract-get",
                "abstract-method",
                "abstract-readonly-field",
                "abstract-set",
                "abstract-static-initialization",
                "call-signature",
                "constructor",
                "decorated-field",
                "decorated-get",
                "decorated-method",
                "decorated-readonly-field",
                "decorated-set",
                "field",
                "get",
                "instance-field",
                "instance-get",
                "instance-method",
                "instance-readonly-field",
                "instance-set",
                "instance-static-initialization",
                "method",
                "private-constructor",
                "private-decorated-field",
                "private-decorated-get",
                "private-decorated-method",
                "private-decorated-readonly-field",
                "private-decorated-set",
                "private-field",
                "private-get",
                "private-instance-field",
                "private-instance-get",
                "private-instance-method",
                "private-instance-readonly-field",
                "private-instance-set",
                "private-instance-static-initialization",
                "private-method",
                "private-readonly-field",
                "private-set",
                "private-static-field",
                "private-static-get",
                "private-static-method",
                "private-static-readonly-field",
                "private-static-set",
                "private-static-static-initialization",
                "protected-abstract-field",
                "protected-abstract-get",
                "protected-abstract-method",
                "protected-abstract-readonly-field",
                "protected-abstract-set",
                "protected-abstract-static-initialization",
                "protected-constructor",
                "protected-decorated-field",
                "protected-decorated-get",
                "protected-decorated-method",
                "protected-decorated-readonly-field",
                "protected-decorated-set",
                "protected-field",
                "protected-get",
                "protected-instance-field",
                "protected-instance-get",
                "protected-instance-method",
                "protected-instance-readonly-field",
                "protected-instance-set",
                "protected-instance-static-initialization",
                "protected-method",
                "protected-readonly-field",
                "protected-set",
                "protected-static-field",
                "protected-static-get",
                "protected-static-method",
                "protected-static-readonly-field",
                "protected-static-set",
                "protected-static-static-initialization",
                "public-abstract-field",
                "public-abstract-get",
                "public-abstract-method",
                "public-abstract-readonly-field",
                "public-abstract-set",
                "public-abstract-static-initialization",
                "public-constructor",
                "public-decorated-field",
                "public-decorated-get",
                "public-decorated-method",
                "public-decorated-readonly-field",
                "public-decorated-set",
                "public-field",
                "public-get",
                "public-instance-field",
                "public-instance-get",
                "public-instance-method",
                "public-instance-readonly-field",
                "public-instance-set",
                "public-instance-static-initialization",
                "public-method",
                "public-readonly-field",
                "public-set",
                "public-static-field",
                "public-static-get",
                "public-static-method",
                "public-static-readonly-field",
                "public-static-set",
                "public-static-static-initialization",
                "readonly-field",
                "readonly-signature",
                "set",
                "signature",
                "static-field",
                "static-get",
                "static-initialization",
                "static-method",
                "static-readonly-field",
                "static-set",
                "static-static-initialization"
            ],
            "type": "string"
        },
        "ArrayBracketNewlineOption": {
            "anyOf": [
                {
                    "properties": {
                        "minItems": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consistent",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "ArrayBracketNewlineOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "minItems": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consistent",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "ArrayBracketNewlineOption$2": {
            "anyOf": [
                {
                    "properties": {
                        "minItems": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consistent",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "ArrayBracketNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce linebreaks after opening and before closing array brackets in `<template>`."
        },
        "ArrayBracketNewlineRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketNewlineOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce line breaks after opening and before closing array brackets."
        },
        "ArrayBracketNewlineRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketNewlineOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce linebreaks after opening and before closing array brackets."
        },
        "ArrayBracketSpacingConfig": {
            "description": "Config.",
            "properties": {
                "arraysInArrays": {
                    "type": "boolean"
                },
                "objectsInArrays": {
                    "type": "boolean"
                },
                "singleValue": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ArrayBracketSpacingConfig$1": {
            "description": "Config.",
            "properties": {
                "arraysInArrays": {
                    "type": "boolean"
                },
                "objectsInArrays": {
                    "type": "boolean"
                },
                "singleValue": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ArrayBracketSpacingConfig$2": {
            "description": "Config.",
            "properties": {
                "arraysInArrays": {
                    "type": "boolean"
                },
                "objectsInArrays": {
                    "type": "boolean"
                },
                "singleValue": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ArrayBracketSpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ArrayBracketSpacingOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ArrayBracketSpacingOption$2": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ArrayBracketSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketSpacingOption"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketSpacingConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside array brackets in `<template>`."
        },
        "ArrayBracketSpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketSpacingOption$1"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketSpacingConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow or enforce spaces inside of brackets."
        },
        "ArrayBracketSpacingRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketSpacingOption$2"
                        },
                        {
                            "$ref": "#/definitions/ArrayBracketSpacingConfig$2"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside array brackets."
        },
        "ArrayCallbackReturnOption": {
            "description": "Option.",
            "properties": {
                "allowImplicit": {
                    "type": "boolean"
                },
                "allowVoid": {
                    "type": "boolean"
                },
                "checkForEach": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ArrayCallbackReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrayCallbackReturnOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `return` statements in callbacks of array methods."
        },
        "ArrayElementNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "anyOf": [
                                {
                                    "properties": {
                                        "minItems": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "ArrayExpression": {
                                            "$ref": "#/definitions/BasicConfig"
                                        },
                                        "ArrayPattern": {
                                            "$ref": "#/definitions/BasicConfig"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "consistent",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce line breaks after each array element in `<template>`."
        },
        "ArrayElementNewlineRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "anyOf": [
                                {
                                    "properties": {
                                        "minItems": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "ArrayExpression": {
                                            "$ref": "#/definitions/BasicConfig$2"
                                        },
                                        "ArrayPattern": {
                                            "$ref": "#/definitions/BasicConfig$2"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "consistent",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce line breaks between array elements."
        },
        "ArrayElementNewlineRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "anyOf": [
                                {
                                    "properties": {
                                        "minItems": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "ArrayExpression": {
                                            "$ref": "#/definitions/BasicConfig$3"
                                        },
                                        "ArrayPattern": {
                                            "$ref": "#/definitions/BasicConfig$3"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "consistent",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce line breaks after each array element."
        },
        "ArrayTypeOption": {
            "description": "Option.",
            "properties": {
                "default": {
                    "description": "The array type expected for mutable cases.",
                    "enum": [
                        "array",
                        "array-simple",
                        "generic"
                    ],
                    "type": "string"
                },
                "readonly": {
                    "description": "The array type expected for readonly cases. If omitted, the value for `default` will be used.",
                    "enum": [
                        "array",
                        "array-simple",
                        "generic"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ArrayTypeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrayTypeOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require consistently using either `T[]` or `Array<T>` for arrays."
        },
        "ArrowBodyStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "never"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "as-needed",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "as-needed",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "requireReturnForObjectLiteral": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require braces around arrow function bodies."
        },
        "ArrowParensConfig": {
            "description": "Config.",
            "properties": {
                "requireForBlockBody": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ArrowParensOption": {
            "description": "Option.",
            "enum": [
                "always",
                "as-needed"
            ],
            "type": "string"
        },
        "ArrowParensRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrowParensOption"
                        },
                        {
                            "$ref": "#/definitions/ArrowParensConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require parentheses around arrow function arguments."
        },
        "ArrowSpacingOption": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ArrowSpacingOption$1": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ArrowSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrowSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after the arrow in arrow functions in `<template>`."
        },
        "ArrowSpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ArrowSpacingOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after the arrow in arrow functions."
        },
        "AttributeHyphenationConfig": {
            "description": "Config.",
            "properties": {
                "ignore": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AttributeHyphenationOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "AttributeHyphenationRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/AttributeHyphenationOption"
                        },
                        {
                            "$ref": "#/definitions/AttributeHyphenationConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce attribute naming style on custom components in template."
        },
        "AttributesOrderOption": {
            "description": "Option.",
            "properties": {
                "alphabetical": {
                    "type": "boolean"
                },
                "order": {
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "enum": [
                                        "ATTR_DYNAMIC",
                                        "ATTR_SHORTHAND_BOOL",
                                        "ATTR_STATIC",
                                        "CONDITIONALS",
                                        "CONTENT",
                                        "DEFINITION",
                                        "EVENTS",
                                        "GLOBAL",
                                        "LIST_RENDERING",
                                        "OTHER_ATTR",
                                        "OTHER_DIRECTIVES",
                                        "RENDER_MODIFIERS",
                                        "SLOT",
                                        "TWO_WAY_BINDING",
                                        "UNIQUE"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "enum": [
                                    "ATTR_DYNAMIC",
                                    "ATTR_SHORTHAND_BOOL",
                                    "ATTR_STATIC",
                                    "CONDITIONALS",
                                    "CONTENT",
                                    "DEFINITION",
                                    "EVENTS",
                                    "GLOBAL",
                                    "LIST_RENDERING",
                                    "OTHER_ATTR",
                                    "OTHER_DIRECTIVES",
                                    "RENDER_MODIFIERS",
                                    "SLOT",
                                    "TWO_WAY_BINDING",
                                    "UNIQUE"
                                ],
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AttributesOrderRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/AttributesOrderOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce order of attributes."
        },
        "AutoRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Apply jsonc rules similar to your configured ESLint core rules."
        },
        "AwaitThenableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow awaiting a value that is not a Thenable."
        },
        "BanConfig": {
            "anyOf": [
                {
                    "properties": {
                        "fixWith": {
                            "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.",
                            "type": "string"
                        },
                        "message": {
                            "description": "Custom error message",
                            "type": "string"
                        },
                        "suggest": {
                            "description": "Types to suggest replacing with.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": [
                        "string",
                        "boolean"
                    ]
                }
            ],
            "description": "Option."
        },
        "BanTsCommentOption": {
            "properties": {
                "minimumDescriptionLength": {
                    "type": "number"
                },
                "ts-check": {
                    "$ref": "#/definitions/DirectiveConfigSchema"
                },
                "ts-expect-error": {
                    "$ref": "#/definitions/DirectiveConfigSchema"
                },
                "ts-ignore": {
                    "$ref": "#/definitions/DirectiveConfigSchema"
                },
                "ts-nocheck": {
                    "$ref": "#/definitions/DirectiveConfigSchema"
                }
            },
            "type": "object"
        },
        "BanTsCommentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BanTsCommentOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `@ts-<directive>` comments or require descriptions after directives."
        },
        "BanTslintCommentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `// tslint:<rule-flag>` comments."
        },
        "BanTypesOption": {
            "properties": {
                "extendDefaults": {
                    "type": "boolean"
                },
                "types": {
                    "additionalProperties": {
                        "$ref": "#/definitions/BanConfig"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "BanTypesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BanTypesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow certain types."
        },
        "BaseConfig": {
            "anyOf": [
                {
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/definitions/AllItems"
                                },
                                "type": "array"
                            },
                            {
                                "enum": [
                                    "#private-field",
                                    "#private-get",
                                    "#private-instance-field",
                                    "#private-instance-get",
                                    "#private-instance-method",
                                    "#private-instance-readonly-field",
                                    "#private-instance-set",
                                    "#private-instance-static-initialization",
                                    "#private-method",
                                    "#private-readonly-field",
                                    "#private-set",
                                    "#private-static-field",
                                    "#private-static-get",
                                    "#private-static-method",
                                    "#private-static-readonly-field",
                                    "#private-static-set",
                                    "#private-static-static-initialization",
                                    "abstract-field",
                                    "abstract-get",
                                    "abstract-method",
                                    "abstract-readonly-field",
                                    "abstract-set",
                                    "abstract-static-initialization",
                                    "call-signature",
                                    "constructor",
                                    "decorated-field",
                                    "decorated-get",
                                    "decorated-method",
                                    "decorated-readonly-field",
                                    "decorated-set",
                                    "field",
                                    "get",
                                    "instance-field",
                                    "instance-get",
                                    "instance-method",
                                    "instance-readonly-field",
                                    "instance-set",
                                    "instance-static-initialization",
                                    "method",
                                    "private-constructor",
                                    "private-decorated-field",
                                    "private-decorated-get",
                                    "private-decorated-method",
                                    "private-decorated-readonly-field",
                                    "private-decorated-set",
                                    "private-field",
                                    "private-get",
                                    "private-instance-field",
                                    "private-instance-get",
                                    "private-instance-method",
                                    "private-instance-readonly-field",
                                    "private-instance-set",
                                    "private-instance-static-initialization",
                                    "private-method",
                                    "private-readonly-field",
                                    "private-set",
                                    "private-static-field",
                                    "private-static-get",
                                    "private-static-method",
                                    "private-static-readonly-field",
                                    "private-static-set",
                                    "private-static-static-initialization",
                                    "protected-abstract-field",
                                    "protected-abstract-get",
                                    "protected-abstract-method",
                                    "protected-abstract-readonly-field",
                                    "protected-abstract-set",
                                    "protected-abstract-static-initialization",
                                    "protected-constructor",
                                    "protected-decorated-field",
                                    "protected-decorated-get",
                                    "protected-decorated-method",
                                    "protected-decorated-readonly-field",
                                    "protected-decorated-set",
                                    "protected-field",
                                    "protected-get",
                                    "protected-instance-field",
                                    "protected-instance-get",
                                    "protected-instance-method",
                                    "protected-instance-readonly-field",
                                    "protected-instance-set",
                                    "protected-instance-static-initialization",
                                    "protected-method",
                                    "protected-readonly-field",
                                    "protected-set",
                                    "protected-static-field",
                                    "protected-static-get",
                                    "protected-static-method",
                                    "protected-static-readonly-field",
                                    "protected-static-set",
                                    "protected-static-static-initialization",
                                    "public-abstract-field",
                                    "public-abstract-get",
                                    "public-abstract-method",
                                    "public-abstract-readonly-field",
                                    "public-abstract-set",
                                    "public-abstract-static-initialization",
                                    "public-constructor",
                                    "public-decorated-field",
                                    "public-decorated-get",
                                    "public-decorated-method",
                                    "public-decorated-readonly-field",
                                    "public-decorated-set",
                                    "public-field",
                                    "public-get",
                                    "public-instance-field",
                                    "public-instance-get",
                                    "public-instance-method",
                                    "public-instance-readonly-field",
                                    "public-instance-set",
                                    "public-instance-static-initialization",
                                    "public-method",
                                    "public-readonly-field",
                                    "public-set",
                                    "public-static-field",
                                    "public-static-get",
                                    "public-static-method",
                                    "public-static-readonly-field",
                                    "public-static-set",
                                    "public-static-static-initialization",
                                    "readonly-field",
                                    "readonly-signature",
                                    "set",
                                    "signature",
                                    "static-field",
                                    "static-get",
                                    "static-initialization",
                                    "static-method",
                                    "static-readonly-field",
                                    "static-set",
                                    "static-static-initialization"
                                ],
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                {
                    "properties": {
                        "memberTypes": {
                            "anyOf": [
                                {
                                    "items": {
                                        "anyOf": [
                                            {
                                                "items": {
                                                    "$ref": "#/definitions/AllItems"
                                                },
                                                "type": "array"
                                            },
                                            {
                                                "enum": [
                                                    "#private-field",
                                                    "#private-get",
                                                    "#private-instance-field",
                                                    "#private-instance-get",
                                                    "#private-instance-method",
                                                    "#private-instance-readonly-field",
                                                    "#private-instance-set",
                                                    "#private-instance-static-initialization",
                                                    "#private-method",
                                                    "#private-readonly-field",
                                                    "#private-set",
                                                    "#private-static-field",
                                                    "#private-static-get",
                                                    "#private-static-method",
                                                    "#private-static-readonly-field",
                                                    "#private-static-set",
                                                    "#private-static-static-initialization",
                                                    "abstract-field",
                                                    "abstract-get",
                                                    "abstract-method",
                                                    "abstract-readonly-field",
                                                    "abstract-set",
                                                    "abstract-static-initialization",
                                                    "call-signature",
                                                    "constructor",
                                                    "decorated-field",
                                                    "decorated-get",
                                                    "decorated-method",
                                                    "decorated-readonly-field",
                                                    "decorated-set",
                                                    "field",
                                                    "get",
                                                    "instance-field",
                                                    "instance-get",
                                                    "instance-method",
                                                    "instance-readonly-field",
                                                    "instance-set",
                                                    "instance-static-initialization",
                                                    "method",
                                                    "private-constructor",
                                                    "private-decorated-field",
                                                    "private-decorated-get",
                                                    "private-decorated-method",
                                                    "private-decorated-readonly-field",
                                                    "private-decorated-set",
                                                    "private-field",
                                                    "private-get",
                                                    "private-instance-field",
                                                    "private-instance-get",
                                                    "private-instance-method",
                                                    "private-instance-readonly-field",
                                                    "private-instance-set",
                                                    "private-instance-static-initialization",
                                                    "private-method",
                                                    "private-readonly-field",
                                                    "private-set",
                                                    "private-static-field",
                                                    "private-static-get",
                                                    "private-static-method",
                                                    "private-static-readonly-field",
                                                    "private-static-set",
                                                    "private-static-static-initialization",
                                                    "protected-abstract-field",
                                                    "protected-abstract-get",
                                                    "protected-abstract-method",
                                                    "protected-abstract-readonly-field",
                                                    "protected-abstract-set",
                                                    "protected-abstract-static-initialization",
                                                    "protected-constructor",
                                                    "protected-decorated-field",
                                                    "protected-decorated-get",
                                                    "protected-decorated-method",
                                                    "protected-decorated-readonly-field",
                                                    "protected-decorated-set",
                                                    "protected-field",
                                                    "protected-get",
                                                    "protected-instance-field",
                                                    "protected-instance-get",
                                                    "protected-instance-method",
                                                    "protected-instance-readonly-field",
                                                    "protected-instance-set",
                                                    "protected-instance-static-initialization",
                                                    "protected-method",
                                                    "protected-readonly-field",
                                                    "protected-set",
                                                    "protected-static-field",
                                                    "protected-static-get",
                                                    "protected-static-method",
                                                    "protected-static-readonly-field",
                                                    "protected-static-set",
                                                    "protected-static-static-initialization",
                                                    "public-abstract-field",
                                                    "public-abstract-get",
                                                    "public-abstract-method",
                                                    "public-abstract-readonly-field",
                                                    "public-abstract-set",
                                                    "public-abstract-static-initialization",
                                                    "public-constructor",
                                                    "public-decorated-field",
                                                    "public-decorated-get",
                                                    "public-decorated-method",
                                                    "public-decorated-readonly-field",
                                                    "public-decorated-set",
                                                    "public-field",
                                                    "public-get",
                                                    "public-instance-field",
                                                    "public-instance-get",
                                                    "public-instance-method",
                                                    "public-instance-readonly-field",
                                                    "public-instance-set",
                                                    "public-instance-static-initialization",
                                                    "public-method",
                                                    "public-readonly-field",
                                                    "public-set",
                                                    "public-static-field",
                                                    "public-static-get",
                                                    "public-static-method",
                                                    "public-static-readonly-field",
                                                    "public-static-set",
                                                    "public-static-static-initialization",
                                                    "readonly-field",
                                                    "readonly-signature",
                                                    "set",
                                                    "signature",
                                                    "static-field",
                                                    "static-get",
                                                    "static-initialization",
                                                    "static-method",
                                                    "static-readonly-field",
                                                    "static-set",
                                                    "static-static-initialization"
                                                ],
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                },
                                {
                                    "const": "never",
                                    "type": "string"
                                }
                            ]
                        },
                        "optionalityOrder": {
                            "$ref": "#/definitions/OptionalityOrderOptions"
                        },
                        "order": {
                            "$ref": "#/definitions/OrderOptions"
                        }
                    },
                    "type": "object"
                },
                {
                    "const": "never",
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "BasicConfig": {
            "anyOf": [
                {
                    "properties": {
                        "minItems": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consistent",
                        "never"
                    ],
                    "type": "string"
                }
            ]
        },
        "BasicConfig$2": {
            "anyOf": [
                {
                    "properties": {
                        "minItems": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consistent",
                        "never"
                    ],
                    "type": "string"
                }
            ]
        },
        "BasicConfig$3": {
            "anyOf": [
                {
                    "properties": {
                        "minItems": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consistent",
                        "never"
                    ],
                    "type": "string"
                }
            ]
        },
        "BetterRegexOption": {
            "description": "Option.",
            "properties": {
                "sortCharacterClasses": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "BetterRegexRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BetterRegexOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Improve regexes by making them shorter, consistent, and safer."
        },
        "BlockLangOption": {
            "additionalProperties": {
                "properties": {
                    "allowNoLang": {
                        "type": "boolean"
                    },
                    "lang": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "description": "Option.",
            "type": "object"
        },
        "BlockLangRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockLangOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use other than available `lang`."
        },
        "BlockMappingColonIndicatorNewlineOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "BlockMappingColonIndicatorNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockMappingColonIndicatorNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent line breaks after `:` indicator."
        },
        "BlockMappingOption": {
            "anyOf": [
                {
                    "properties": {
                        "multiline": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        },
                        "singleline": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "BlockMappingQuestionIndicatorNewlineOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "BlockMappingQuestionIndicatorNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockMappingQuestionIndicatorNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent line breaks after `?` indicator."
        },
        "BlockMappingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockMappingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow block style mappings."
        },
        "BlockOrderOption": {
            "description": "Option.",
            "properties": {
                "order": {
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BlockOrderRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockOrderOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce order of component top-level elements."
        },
        "BlockScopedVarRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of variables within the scope they are defined."
        },
        "BlockSequenceHyphenIndicatorNewlineConfig": {
            "description": "Config.",
            "properties": {
                "blockMapping": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "nestedHyphen": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BlockSequenceHyphenIndicatorNewlineOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "BlockSequenceHyphenIndicatorNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockSequenceHyphenIndicatorNewlineOption"
                        },
                        {
                            "$ref": "#/definitions/BlockSequenceHyphenIndicatorNewlineConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent line breaks after `-` indicator."
        },
        "BlockSequenceOption": {
            "anyOf": [
                {
                    "properties": {
                        "multiline": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        },
                        "singleline": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "BlockSequenceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockSequenceOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow block style sequences."
        },
        "BlockSpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "BlockSpacingOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "BlockSpacingOption$2": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "BlockSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block in `<template>`."
        },
        "BlockSpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockSpacingOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block."
        },
        "BlockSpacingRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockSpacingOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block."
        },
        "BlockTagNewlineOption": {
            "description": "Option.",
            "properties": {
                "blocks": {
                    "additionalProperties": {
                        "properties": {
                            "maxEmptyLines": {
                                "type": "number"
                            },
                            "multiline": {
                                "enum": [
                                    "always",
                                    "consistent",
                                    "ignore",
                                    "never"
                                ],
                                "type": "string"
                            },
                            "singleline": {
                                "enum": [
                                    "always",
                                    "consistent",
                                    "ignore",
                                    "never"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "object"
                },
                "maxEmptyLines": {
                    "type": "number"
                },
                "multiline": {
                    "enum": [
                        "always",
                        "consistent",
                        "ignore",
                        "never"
                    ],
                    "type": "string"
                },
                "singleline": {
                    "enum": [
                        "always",
                        "consistent",
                        "ignore",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BlockTagNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BlockTagNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce line breaks after opening and before closing block-level tags."
        },
        "BooleanObject": {
            "additionalProperties": {
                "type": "boolean"
            },
            "type": "object"
        },
        "BooleanObject$1": {
            "additionalProperties": {
                "type": "boolean"
            },
            "type": "object"
        },
        "BraceStyleConfig": {
            "description": "Config.",
            "properties": {
                "allowSingleLine": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "BraceStyleConfig$1": {
            "description": "Config.",
            "properties": {
                "allowSingleLine": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "BraceStyleConfig$2": {
            "description": "Config.",
            "properties": {
                "allowSingleLine": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "BraceStyleOption": {
            "description": "Option.",
            "enum": [
                "1tbs",
                "allman",
                "stroustrup"
            ],
            "type": "string"
        },
        "BraceStyleOption$1": {
            "description": "Option.",
            "enum": [
                "1tbs",
                "allman",
                "stroustrup"
            ],
            "type": "string"
        },
        "BraceStyleOption$2": {
            "description": "Option.",
            "enum": [
                "1tbs",
                "allman",
                "stroustrup"
            ],
            "type": "string"
        },
        "BraceStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BraceStyleOption"
                        },
                        {
                            "$ref": "#/definitions/BraceStyleConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent brace style for blocks in `<template>`."
        },
        "BraceStyleRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BraceStyleOption$1"
                        },
                        {
                            "$ref": "#/definitions/BraceStyleConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent brace style for blocks."
        },
        "BraceStyleRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/BraceStyleOption$2"
                        },
                        {
                            "$ref": "#/definitions/BraceStyleConfig$2"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent brace style for blocks."
        },
        "CallbackReturnRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "description": "Option.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `return` statements after callbacks."
        },
        "CallbackReturnRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "description": "Option.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `return` statements after callbacks."
        },
        "CamelcaseOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "anyOf": [
                        {
                            "maxItems": 0,
                            "minItems": 0,
                            "type": "array"
                        },
                        {
                            "items": [
                                {
                                    "type": "string"
                                }
                            ],
                            "maxItems": 1,
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "minItems": 0
                },
                "ignoreDestructuring": {
                    "type": "boolean"
                },
                "ignoreGlobals": {
                    "type": "boolean"
                },
                "ignoreImports": {
                    "type": "boolean"
                },
                "properties": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CamelcaseOption$1": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "anyOf": [
                        {
                            "maxItems": 0,
                            "minItems": 0,
                            "type": "array"
                        },
                        {
                            "items": [
                                {
                                    "type": "string"
                                }
                            ],
                            "maxItems": 1,
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "minItems": 0
                },
                "ignoreDestructuring": {
                    "type": "boolean"
                },
                "ignoreGlobals": {
                    "type": "boolean"
                },
                "ignoreImports": {
                    "type": "boolean"
                },
                "properties": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CamelcaseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CamelcaseOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce camelcase naming convention in `<template>`."
        },
        "CamelcaseRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CamelcaseOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce camelcase naming convention."
        },
        "CapitalizedCommentsConfig": {
            "anyOf": [
                {
                    "properties": {
                        "ignoreConsecutiveComments": {
                            "type": "boolean"
                        },
                        "ignoreInlineComments": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "block": {
                            "properties": {
                                "ignoreConsecutiveComments": {
                                    "type": "boolean"
                                },
                                "ignoreInlineComments": {
                                    "type": "boolean"
                                },
                                "ignorePattern": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "line": {
                            "properties": {
                                "ignoreConsecutiveComments": {
                                    "type": "boolean"
                                },
                                "ignoreInlineComments": {
                                    "type": "boolean"
                                },
                                "ignorePattern": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Config."
        },
        "CapitalizedCommentsOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "CapitalizedCommentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CapitalizedCommentsOption"
                        },
                        {
                            "$ref": "#/definitions/CapitalizedCommentsConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce or disallow capitalization of the first letter of a comment."
        },
        "CatchErrorNameOption": {
            "description": "Option.",
            "properties": {
                "ignore": {
                    "items": {},
                    "type": "array"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CatchErrorNameRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CatchErrorNameOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a specific parameter name in catch clauses."
        },
        "ClassLiteralPropertyStyleOption": {
            "description": "Option.",
            "enum": [
                "fields",
                "getters"
            ],
            "type": "string"
        },
        "ClassLiteralPropertyStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ClassLiteralPropertyStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce that literals on classes are exposed in a consistent style."
        },
        "ClassMethodsUseThisOption": {
            "description": "Option.",
            "properties": {
                "enforceForClassFields": {
                    "description": "Enforces that functions used as instance field initializers utilize `this`",
                    "type": "boolean"
                },
                "exceptMethods": {
                    "description": "Allows specified method names to be ignored with this rule",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignoreClassesThatImplementAnInterface": {
                    "description": "Ignore classes that specifically implement some interface",
                    "type": "boolean"
                },
                "ignoreOverrideMethods": {
                    "description": "Ingore members marked with the `override` modifier",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ClassMethodsUseThisOption$1": {
            "description": "Option.",
            "properties": {
                "enforceForClassFields": {
                    "type": "boolean"
                },
                "exceptMethods": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ClassMethodsUseThisRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ClassMethodsUseThisOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce that class methods utilize `this`."
        },
        "ClassMethodsUseThisRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ClassMethodsUseThisOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce that class methods utilize `this`."
        },
        "CommaDangleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "anyOf": [
                                {
                                    "properties": {
                                        "arrays": {
                                            "$ref": "#/definitions/ValueWithIgnore"
                                        },
                                        "exports": {
                                            "$ref": "#/definitions/ValueWithIgnore"
                                        },
                                        "functions": {
                                            "$ref": "#/definitions/ValueWithIgnore"
                                        },
                                        "imports": {
                                            "$ref": "#/definitions/ValueWithIgnore"
                                        },
                                        "objects": {
                                            "$ref": "#/definitions/ValueWithIgnore"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "always-multiline",
                                        "never",
                                        "only-multiline"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow trailing commas in `<template>`."
        },
        "CommaDangleRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "anyOf": [
                                {
                                    "properties": {
                                        "arrays": {
                                            "$ref": "#/definitions/ValueWithIgnore$1"
                                        },
                                        "enums": {
                                            "$ref": "#/definitions/ValueWithIgnore$1"
                                        },
                                        "exports": {
                                            "$ref": "#/definitions/ValueWithIgnore$1"
                                        },
                                        "functions": {
                                            "$ref": "#/definitions/ValueWithIgnore$1"
                                        },
                                        "generics": {
                                            "$ref": "#/definitions/ValueWithIgnore$1"
                                        },
                                        "imports": {
                                            "$ref": "#/definitions/ValueWithIgnore$1"
                                        },
                                        "objects": {
                                            "$ref": "#/definitions/ValueWithIgnore$1"
                                        },
                                        "tuples": {
                                            "$ref": "#/definitions/ValueWithIgnore$1"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "always-multiline",
                                        "never",
                                        "only-multiline"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow trailing commas."
        },
        "CommaDangleRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "anyOf": [
                                {
                                    "properties": {
                                        "arrays": {
                                            "$ref": "#/definitions/ValueWithIgnore$2"
                                        },
                                        "exports": {
                                            "$ref": "#/definitions/ValueWithIgnore$2"
                                        },
                                        "functions": {
                                            "$ref": "#/definitions/ValueWithIgnore$2"
                                        },
                                        "imports": {
                                            "$ref": "#/definitions/ValueWithIgnore$2"
                                        },
                                        "objects": {
                                            "$ref": "#/definitions/ValueWithIgnore$2"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "always-multiline",
                                        "never",
                                        "only-multiline"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow trailing commas."
        },
        "CommaDangleRuleConfig$3": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "anyOf": [
                                {
                                    "properties": {
                                        "arrays": {
                                            "$ref": "#/definitions/ValueWithIgnore$3"
                                        },
                                        "exports": {
                                            "$ref": "#/definitions/ValueWithIgnore$3"
                                        },
                                        "functions": {
                                            "$ref": "#/definitions/ValueWithIgnore$3"
                                        },
                                        "imports": {
                                            "$ref": "#/definitions/ValueWithIgnore$3"
                                        },
                                        "objects": {
                                            "$ref": "#/definitions/ValueWithIgnore$3"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "always-multiline",
                                        "never",
                                        "only-multiline"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow trailing commas."
        },
        "CommaSpacingOption": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CommaSpacingOption$1": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CommaSpacingOption$2": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CommaSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CommaSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after commas in `<template>`."
        },
        "CommaSpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CommaSpacingOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after commas."
        },
        "CommaSpacingRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CommaSpacingOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after commas."
        },
        "CommaStyleConfig": {
            "description": "Config.",
            "properties": {
                "exceptions": {
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "CommaStyleConfig$1": {
            "description": "Config.",
            "properties": {
                "exceptions": {
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "CommaStyleConfig$2": {
            "description": "Config.",
            "properties": {
                "exceptions": {
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "CommaStyleOption": {
            "description": "Option.",
            "enum": [
                "first",
                "last"
            ],
            "type": "string"
        },
        "CommaStyleOption$1": {
            "description": "Option.",
            "enum": [
                "first",
                "last"
            ],
            "type": "string"
        },
        "CommaStyleOption$2": {
            "description": "Option.",
            "enum": [
                "first",
                "last"
            ],
            "type": "string"
        },
        "CommaStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CommaStyleOption"
                        },
                        {
                            "$ref": "#/definitions/CommaStyleConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent comma style in `<template>`."
        },
        "CommaStyleRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CommaStyleOption$1"
                        },
                        {
                            "$ref": "#/definitions/CommaStyleConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent comma style."
        },
        "CommaStyleRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CommaStyleOption$2"
                        },
                        {
                            "$ref": "#/definitions/CommaStyleConfig$2"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent comma style."
        },
        "CommentDirectiveOption": {
            "description": "Option.",
            "properties": {
                "reportUnusedDisableDirectives": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CommentDirectiveRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/CommentDirectiveOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Support comment-directives in `<template>`."
        },
        "ComplexityOption": {
            "anyOf": [
                {
                    "properties": {
                        "max": {
                            "type": "number"
                        },
                        "maximum": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "ComplexityRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ComplexityOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum cyclomatic complexity allowed in a program."
        },
        "ComponentApiStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "additionalItems": {
                                "enum": [
                                    "composition",
                                    "composition-vue2",
                                    "options",
                                    "script-setup"
                                ],
                                "type": "string"
                            },
                            "items": [
                                {
                                    "enum": [
                                        "composition",
                                        "composition-vue2",
                                        "options",
                                        "script-setup"
                                    ],
                                    "type": "string"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce component API style."
        },
        "ComponentDefinitionNameCasingOption": {
            "description": "Option.",
            "enum": [
                "PascalCase",
                "kebab-case"
            ],
            "type": "string"
        },
        "ComponentDefinitionNameCasingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ComponentDefinitionNameCasingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce specific casing for component definition name."
        },
        "ComponentNameInTemplateCasingConfig$1": {
            "description": "Config.",
            "properties": {
                "globals": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "registeredComponentsOnly": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ComponentNameInTemplateCasingOption$1": {
            "description": "Option.",
            "enum": [
                "PascalCase",
                "kebab-case"
            ],
            "type": "string"
        },
        "ComponentNameInTemplateCasingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ComponentNameInTemplateCasingOption$1"
                        },
                        {
                            "$ref": "#/definitions/ComponentNameInTemplateCasingConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce specific casing for the component naming style in template."
        },
        "ComponentOptionsNameCasingOption": {
            "description": "Option.",
            "enum": [
                "PascalCase",
                "camelCase",
                "kebab-case"
            ],
            "type": "string"
        },
        "ComponentOptionsNameCasingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ComponentOptionsNameCasingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the casing of component name in `components` options."
        },
        "ComponentTagsOrderOption": {
            "description": "Option.",
            "properties": {
                "order": {
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ComponentTagsOrderRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ComponentTagsOrderOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce order of component top-level elements."
        },
        "ComputedPropertySpacingConfig": {
            "description": "Config.",
            "properties": {
                "enforceForClassMembers": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ComputedPropertySpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ComputedPropertySpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ComputedPropertySpacingOption"
                        },
                        {
                            "$ref": "#/definitions/ComputedPropertySpacingConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside computed property brackets."
        },
        "ConsistentDestructuringRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Use destructured variables over properties."
        },
        "ConsistentFunctionScopingOption": {
            "description": "Option.",
            "properties": {
                "checkArrowFunctions": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ConsistentFunctionScopingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentFunctionScopingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Move function definitions to the highest possible scope."
        },
        "ConsistentGenericConstructorsOption": {
            "description": "Option.",
            "enum": [
                "constructor",
                "type-annotation"
            ],
            "type": "string"
        },
        "ConsistentGenericConstructorsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentGenericConstructorsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call."
        },
        "ConsistentIndexedObjectStyleOption": {
            "description": "Option.",
            "enum": [
                "index-signature",
                "record"
            ],
            "type": "string"
        },
        "ConsistentIndexedObjectStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentIndexedObjectStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow the `Record` type."
        },
        "ConsistentReturnOption": {
            "description": "Option.",
            "properties": {
                "treatUndefinedAsUnspecified": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ConsistentReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentReturnOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `return` statements to either always or never specify values."
        },
        "ConsistentTestFilenameOption": {
            "description": "Option.",
            "properties": {
                "allTestPattern": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConsistentTestFilenameRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentTestFilenameOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbidden .spec test file pattern."
        },
        "ConsistentTestItOption": {
            "description": "Option.",
            "properties": {
                "fn": {
                    "enum": [
                        "it",
                        "test"
                    ],
                    "type": "string"
                },
                "withinDescribe": {
                    "enum": [
                        "it",
                        "test"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConsistentTestItRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentTestItOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer test or it but not both."
        },
        "ConsistentThisRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent naming when capturing the current execution context."
        },
        "ConsistentTypeAssertionsOption": {
            "anyOf": [
                {
                    "properties": {
                        "assertionStyle": {
                            "const": "never",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "assertionStyle": {
                            "enum": [
                                "angle-bracket",
                                "as"
                            ],
                            "type": "string"
                        },
                        "objectLiteralTypeAssertions": {
                            "enum": [
                                "allow",
                                "allow-as-parameter",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "ConsistentTypeAssertionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentTypeAssertionsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent usage of type assertions."
        },
        "ConsistentTypeDefinitionsOption": {
            "description": "Option.",
            "enum": [
                "interface",
                "type"
            ],
            "type": "string"
        },
        "ConsistentTypeDefinitionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentTypeDefinitionsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce type definitions to consistently use either `interface` or `type`."
        },
        "ConsistentTypeExportsOption": {
            "description": "Option.",
            "properties": {
                "fixMixedExportsWithInlineTypeSpecifier": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ConsistentTypeExportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentTypeExportsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent usage of type exports."
        },
        "ConsistentTypeImportsOption": {
            "description": "Option.",
            "properties": {
                "disallowTypeAnnotations": {
                    "type": "boolean"
                },
                "fixStyle": {
                    "enum": [
                        "inline-type-imports",
                        "separate-type-imports"
                    ],
                    "type": "string"
                },
                "prefer": {
                    "enum": [
                        "no-type-imports",
                        "type-imports"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConsistentTypeImportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentTypeImportsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent usage of type imports."
        },
        "ConsistentTypeSpecifierStyleOption": {
            "description": "Option.",
            "enum": [
                "prefer-inline",
                "prefer-top-level"
            ],
            "type": "string"
        },
        "ConsistentTypeSpecifierStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ConsistentTypeSpecifierStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce or ban the use of inline type-only markers for named imports."
        },
        "ConstructorSuperRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `super()` calls in constructors."
        },
        "CurlyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "all",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "multi",
                                "multi-line",
                                "multi-or-nest"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "multi",
                                "multi-line",
                                "multi-or-nest"
                            ],
                            "type": "string"
                        },
                        {
                            "const": "consistent",
                            "type": "string"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent brace style for all control statements."
        },
        "CustomErrorDefinitionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce correct `Error` subclassing."
        },
        "CustomEventNameCasingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "camelCase",
                                "kebab-case"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "camelCase",
                                "kebab-case"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "ignores": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "ignores": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce specific casing for custom event name."
        },
        "DebugLevel": {
            "anyOf": [
                {
                    "items": {
                        "enum": [
                            "eslint",
                            "typescript",
                            "typescript-eslint"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                {
                    "type": "boolean"
                }
            ],
            "description": "DebugLevel."
        },
        "DefaultCaseLastRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce default clauses in switch statements to be last."
        },
        "DefaultCaseOption": {
            "description": "Option.",
            "properties": {
                "commentPattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DefaultCaseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DefaultCaseOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `default` cases in `switch` statements."
        },
        "DefaultParamLastRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce default parameters to be last."
        },
        "DefaultParamLastRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce default parameters to be last."
        },
        "DefaultRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Ensure a default export is present, given a default import."
        },
        "DefineEmitsDeclarationOption": {
            "description": "Option.",
            "enum": [
                "runtime",
                "type-based"
            ],
            "type": "string"
        },
        "DefineEmitsDeclarationRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DefineEmitsDeclarationOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce declaration style of `defineEmits`."
        },
        "DefineMacrosOrderOption": {
            "description": "Option.",
            "properties": {
                "order": {
                    "items": {
                        "enum": [
                            "defineEmits",
                            "defineOptions",
                            "defineProps",
                            "defineSlots"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DefineMacrosOrderRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DefineMacrosOrderOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce order of `defineEmits` and `defineProps` compiler macros."
        },
        "DefinePropsDeclarationOption": {
            "description": "Option.",
            "enum": [
                "runtime",
                "type-based"
            ],
            "type": "string"
        },
        "DefinePropsDeclarationRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DefinePropsDeclarationOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce declaration style of `defineProps`."
        },
        "DelimiterConfig": {
            "properties": {
                "multiline": {
                    "properties": {
                        "delimiter": {
                            "$ref": "#/definitions/MultiLineOption"
                        },
                        "requireLast": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "singleline": {
                    "properties": {
                        "delimiter": {
                            "$ref": "#/definitions/SingleLineOption"
                        },
                        "requireLast": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "DirectiveConfigSchema": {
            "anyOf": [
                {
                    "properties": {
                        "descriptionFormat": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "allow-with-description",
                        false,
                        true
                    ]
                }
            ],
            "description": "Option."
        },
        "DisableEnablePairOption": {
            "description": "Option.",
            "properties": {
                "allowWholeFile": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DisableEnablePairRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DisableEnablePairOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require a `eslint-enable` comment for every `eslint-disable` comment."
        },
        "DotLocationOption": {
            "description": "Option.",
            "enum": [
                "object",
                "property"
            ],
            "type": "string"
        },
        "DotLocationOption$1": {
            "description": "Option.",
            "enum": [
                "object",
                "property"
            ],
            "type": "string"
        },
        "DotLocationRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DotLocationOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent newlines before and after dots in `<template>`."
        },
        "DotLocationRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DotLocationOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent newlines before and after dots."
        },
        "DotNotationOption": {
            "description": "Option.",
            "properties": {
                "allowKeywords": {
                    "type": "boolean"
                },
                "allowPattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DotNotationOption$1": {
            "description": "Option.",
            "properties": {
                "allowIndexSignaturePropertyAccess": {
                    "type": "boolean"
                },
                "allowKeywords": {
                    "type": "boolean"
                },
                "allowPattern": {
                    "type": "string"
                },
                "allowPrivateClassPropertyAccess": {
                    "type": "boolean"
                },
                "allowProtectedClassPropertyAccess": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DotNotationOption$2": {
            "description": "Option.",
            "properties": {
                "allowKeywords": {
                    "type": "boolean"
                },
                "allowPattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DotNotationRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DotNotationOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce dot notation whenever possible in `<template>`."
        },
        "DotNotationRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DotNotationOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce dot notation whenever possible."
        },
        "DotNotationRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DotNotationOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce dot notation whenever possible."
        },
        "DynamicImportChunknameOption": {
            "additionalProperties": {},
            "description": "Option.",
            "properties": {
                "importFunctions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "webpackChunknameFormat": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DynamicImportChunknameRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/DynamicImportChunknameOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a leading comment with the webpackChunkName for dynamic imports."
        },
        "EcmaFeatures": {
            "description": "An object indicating which additional language features you'd like to use.",
            "properties": {
                "globalReturn": {
                    "description": "Allow `return` statements in the global scope.",
                    "type": "boolean"
                },
                "impliedStrict": {
                    "description": "Enable global [strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode) (if `ecmaVersion` is 5 or greater).",
                    "type": "boolean"
                },
                "jsx": {
                    "description": "Enable [JSX](https://facebook.github.io/jsx).",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "EcmaVersion": {
            "description": "Any valid ECMAScript version number or 'latest':\n\n- A version: es3, es5, es6, es7, es8, es9, es10, es11, es12, es13, es14, ...\n- A year: es2015, es2016, es2017, es2018, es2019, es2020, es2021, es2022, es2023, ...\n- 'latest'",
            "enum": [
                10,
                11,
                12,
                13,
                14,
                2015,
                2016,
                2017,
                2018,
                2019,
                2020,
                2021,
                2022,
                2023,
                3,
                5,
                6,
                7,
                8,
                9,
                "latest"
            ]
        },
        "EmptyBraceSpacesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce no spaces between braces."
        },
        "EolLastOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never",
                "unix",
                "windows"
            ],
            "type": "string"
        },
        "EolLastRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/EolLastOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow newline at the end of files."
        },
        "EqeqeqRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "allow-null",
                                "smart"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "null": {
                                    "enum": [
                                        "always",
                                        "ignore",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require the use of `===` and `!==` in `<template>`."
        },
        "EqeqeqRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "null": {
                                    "enum": [
                                        "always",
                                        "ignore",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "allow-null",
                                "smart"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require the use of `===` and `!==`."
        },
        "ErrorMessageRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce passing a `message` value when creating a built-in error."
        },
        "EscapeCaseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require escape sequences to use uppercase values."
        },
        "ExpectExpectOption": {
            "description": "Option.",
            "properties": {
                "customExpressions": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExpectExpectRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ExpectExpectOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce having expectation in test body."
        },
        "ExpiringTodoCommentsOption": {
            "description": "Option.",
            "properties": {
                "allowWarningComments": {
                    "type": "boolean"
                },
                "date": {
                    "type": "string"
                },
                "ignore": {
                    "items": {},
                    "type": "array"
                },
                "ignoreDatesOnPullRequests": {
                    "type": "boolean"
                },
                "terms": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExpiringTodoCommentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ExpiringTodoCommentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Add expiration conditions to TODO comments."
        },
        "ExplicitFunctionReturnTypeOption": {
            "description": "Option.",
            "properties": {
                "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                    "description": "Whether to allow arrow functions that start with the `void` keyword.",
                    "type": "boolean"
                },
                "allowDirectConstAssertionInArrowFunctions": {
                    "description": "Whether to ignore arrow functions immediately returning a `as const` value.",
                    "type": "boolean"
                },
                "allowExpressions": {
                    "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                    "type": "boolean"
                },
                "allowFunctionsWithoutTypeParameters": {
                    "description": "Whether to ignore functions that don't have generic type parameters.",
                    "type": "boolean"
                },
                "allowHigherOrderFunctions": {
                    "description": "Whether to ignore functions immediately returning another function expression.",
                    "type": "boolean"
                },
                "allowIIFEs": {
                    "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
                    "type": "boolean"
                },
                "allowTypedFunctionExpressions": {
                    "description": "Whether to ignore type annotations on the variable of function expressions.",
                    "type": "boolean"
                },
                "allowedNames": {
                    "description": "An array of function/method names that will not have their arguments or return values checked.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExplicitFunctionReturnTypeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ExplicitFunctionReturnTypeOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require explicit return types on functions and class methods."
        },
        "ExplicitLengthCheckOption": {
            "description": "Option.",
            "properties": {
                "non-zero": {
                    "enum": [
                        "greater-than",
                        "not-equal"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExplicitLengthCheckRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ExplicitLengthCheckOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce explicitly comparing the `length` or `size` property of a value."
        },
        "ExplicitMemberAccessibilityOption": {
            "properties": {
                "accessibility": {
                    "$ref": "#/definitions/AccessibilityLevel"
                },
                "ignoredMethodNames": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "overrides": {
                    "properties": {
                        "accessors": {
                            "$ref": "#/definitions/AccessibilityLevel"
                        },
                        "constructors": {
                            "$ref": "#/definitions/AccessibilityLevel"
                        },
                        "methods": {
                            "$ref": "#/definitions/AccessibilityLevel"
                        },
                        "parameterProperties": {
                            "$ref": "#/definitions/AccessibilityLevel"
                        },
                        "properties": {
                            "$ref": "#/definitions/AccessibilityLevel"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "ExplicitMemberAccessibilityRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ExplicitMemberAccessibilityOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require explicit accessibility modifiers on class properties and methods."
        },
        "ExplicitModuleBoundaryTypesOption": {
            "description": "Option.",
            "properties": {
                "allowArgumentsExplicitlyTypedAsAny": {
                    "description": "Whether to ignore arguments that are explicitly typed as `any`.",
                    "type": "boolean"
                },
                "allowDirectConstAssertionInArrowFunctions": {
                    "description": "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\nYou must still type the parameters of the function.",
                    "type": "boolean"
                },
                "allowHigherOrderFunctions": {
                    "description": "Whether to ignore return type annotations on functions immediately returning another function expression.\nYou must still type the parameters of the function.",
                    "type": "boolean"
                },
                "allowTypedFunctionExpressions": {
                    "description": "Whether to ignore type annotations on the variable of a function expresion.",
                    "type": "boolean"
                },
                "allowedNames": {
                    "description": "An array of function/method names that will not have their arguments or return values checked.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExplicitModuleBoundaryTypesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ExplicitModuleBoundaryTypesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require explicit return and argument types on exported functions' and classes' public class methods."
        },
        "ExportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid any invalid exports, i.e. re-export of the same name."
        },
        "ExportsLastRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Ensure all exports appear after other statements."
        },
        "ExportsStyleConfig$1": {
            "description": "Config.",
            "properties": {
                "allowBatchAssign": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ExportsStyleOption$1": {
            "description": "Option.",
            "enum": [
                "exports",
                "module.exports"
            ],
            "type": "string"
        },
        "ExportsStyleRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ExportsStyleOption$1"
                        },
                        {
                            "$ref": "#/definitions/ExportsStyleConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce either `module.exports` or `exports`."
        },
        "ExtensionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "ignorePackages",
                                "never"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "ignorePackages",
                                "never"
                            ],
                            "type": "string"
                        },
                        {
                            "additionalProperties": {},
                            "properties": {
                                "ignorePackages": {
                                    "type": "boolean"
                                },
                                "pattern": {
                                    "additionalProperties": {
                                        "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never"
                                        ],
                                        "type": "string"
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "additionalProperties": {},
                            "properties": {
                                "ignorePackages": {
                                    "type": "boolean"
                                },
                                "pattern": {
                                    "additionalProperties": {
                                        "enum": [
                                            "always",
                                            "ignorePackages",
                                            "never"
                                        ],
                                        "type": "string"
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "additionalProperties": {
                                "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never"
                                ],
                                "type": "string"
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "ignorePackages",
                                "never"
                            ],
                            "type": "string"
                        },
                        {
                            "additionalProperties": {
                                "enum": [
                                    "always",
                                    "ignorePackages",
                                    "never"
                                ],
                                "type": "string"
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Ensure consistent use of file extension within the import path."
        },
        "FileExtensionInImportConfig$1": {
            "additionalProperties": {
                "enum": [
                    "always",
                    "never"
                ],
                "type": "string"
            },
            "description": "Config.",
            "type": "object"
        },
        "FileExtensionInImportOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "FileExtensionInImportRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FileExtensionInImportOption$1"
                        },
                        {
                            "$ref": "#/definitions/FileExtensionInImportConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the style of file extensions in `import` declarations."
        },
        "FileExtensionOption": {
            "description": "Option.",
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "extension": {
                    "enum": [
                        "yaml",
                        "yml"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FileExtensionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FileExtensionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce YAML file extension."
        },
        "FilenameCaseOption": {
            "anyOf": [
                {
                    "properties": {
                        "case": {
                            "enum": [
                                "camelCase",
                                "kebabCase",
                                "pascalCase",
                                "snakeCase"
                            ],
                            "type": "string"
                        },
                        "ignore": {
                            "items": {},
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "cases": {
                            "properties": {
                                "camelCase": {
                                    "type": "boolean"
                                },
                                "kebabCase": {
                                    "type": "boolean"
                                },
                                "pascalCase": {
                                    "type": "boolean"
                                },
                                "snakeCase": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "ignore": {
                            "items": {},
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "FilenameCaseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FilenameCaseOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a case style for filenames."
        },
        "FirstAttributeLinebreakOption": {
            "description": "Option.",
            "properties": {
                "multiline": {
                    "enum": [
                        "below",
                        "beside",
                        "ignore"
                    ],
                    "type": "string"
                },
                "singleline": {
                    "enum": [
                        "below",
                        "beside",
                        "ignore"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FirstAttributeLinebreakRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FirstAttributeLinebreakOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the location of first attribute."
        },
        "FirstOption": {
            "description": "Option.",
            "enum": [
                "absolute-first",
                "disable-absolute-first"
            ],
            "type": "string"
        },
        "FirstRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FirstOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Ensure all imports appear before other statements."
        },
        "FlowMappingCurlyNewlineOption": {
            "anyOf": [
                {
                    "properties": {
                        "consistent": {
                            "type": "boolean"
                        },
                        "minProperties": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "FlowMappingCurlyNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FlowMappingCurlyNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent line breaks inside braces."
        },
        "FlowMappingCurlySpacingConfig": {
            "description": "Config.",
            "properties": {
                "arraysInObjects": {
                    "type": "boolean"
                },
                "objectsInObjects": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FlowMappingCurlySpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "FlowMappingCurlySpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FlowMappingCurlySpacingOption"
                        },
                        {
                            "$ref": "#/definitions/FlowMappingCurlySpacingConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside braces."
        },
        "FlowSequenceBracketNewlineOption": {
            "anyOf": [
                {
                    "properties": {
                        "minItems": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consistent",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "FlowSequenceBracketNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FlowSequenceBracketNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce linebreaks after opening and before closing flow sequence brackets."
        },
        "FlowSequenceBracketSpacingConfig": {
            "description": "Config.",
            "properties": {
                "arraysInArrays": {
                    "type": "boolean"
                },
                "objectsInArrays": {
                    "type": "boolean"
                },
                "singleValue": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FlowSequenceBracketSpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "FlowSequenceBracketSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FlowSequenceBracketSpacingOption"
                        },
                        {
                            "$ref": "#/definitions/FlowSequenceBracketSpacingConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside flow sequence brackets."
        },
        "ForDirectionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce \"for\" loop update clause moving the counter in the right direction."
        },
        "FuncCallSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "allowNewlines": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow spacing between function identifiers and their invocations in `<template>`."
        },
        "FuncCallSpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "allowNewlines": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow spacing between function identifiers and their invocations."
        },
        "FuncCallSpacingRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "allowNewlines": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow spacing between function identifiers and their invocations."
        },
        "FuncNameMatchingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "never"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "never"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "considerPropertyDescriptor": {
                                    "type": "boolean"
                                },
                                "includeCommonJSModuleExports": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "considerPropertyDescriptor": {
                                    "type": "boolean"
                                },
                                "includeCommonJSModuleExports": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require function names to match the name of the variable or property to which they are assigned."
        },
        "FuncNamesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/Value$3"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/Value$3"
                        },
                        {
                            "properties": {
                                "generators": {
                                    "$ref": "#/definitions/Value$3"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow named `function` expressions."
        },
        "FuncStyleConfig": {
            "description": "Config.",
            "properties": {
                "allowArrowFunctions": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FuncStyleOption": {
            "description": "Option.",
            "enum": [
                "declaration",
                "expression"
            ],
            "type": "string"
        },
        "FuncStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FuncStyleOption"
                        },
                        {
                            "$ref": "#/definitions/FuncStyleConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the consistent use of either `function` declarations or expressions."
        },
        "FunctionCallArgumentNewlineOption": {
            "description": "Option.",
            "enum": [
                "always",
                "consistent",
                "never"
            ],
            "type": "string"
        },
        "FunctionCallArgumentNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FunctionCallArgumentNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce line breaks between arguments of a function call."
        },
        "FunctionParenNewlineOption": {
            "anyOf": [
                {
                    "properties": {
                        "minItems": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consistent",
                        "multiline",
                        "multiline-arguments",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "FunctionParenNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/FunctionParenNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent line breaks inside function parentheses."
        },
        "GeneratorStarSpacingOption": {
            "anyOf": [
                {
                    "properties": {
                        "after": {
                            "type": "boolean"
                        },
                        "anonymous": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "after": {
                                            "type": "boolean"
                                        },
                                        "before": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "after",
                                        "before",
                                        "both",
                                        "neither"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "before": {
                            "type": "boolean"
                        },
                        "method": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "after": {
                                            "type": "boolean"
                                        },
                                        "before": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "after",
                                        "before",
                                        "both",
                                        "neither"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "named": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "after": {
                                            "type": "boolean"
                                        },
                                        "before": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "after",
                                        "before",
                                        "both",
                                        "neither"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "after",
                        "before",
                        "both",
                        "neither"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "GeneratorStarSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/GeneratorStarSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing around `*` operators in generator functions."
        },
        "GetterReturnOption": {
            "description": "Option.",
            "properties": {
                "allowImplicit": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GetterReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/GetterReturnOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `return` statements in getters."
        },
        "GlobalRequireRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `require()` calls to be placed at top-level module scope."
        },
        "GlobalRequireRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `require()` calls to be placed at top-level module scope."
        },
        "GroupExportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer named exports to be grouped together in a single export declaration."
        },
        "GroupedAccessorPairsOption": {
            "description": "Option.",
            "enum": [
                "anyOrder",
                "getBeforeSet",
                "setBeforeGet"
            ],
            "type": "string"
        },
        "GroupedAccessorPairsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/GroupedAccessorPairsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require grouped accessor pairs in object literals and classes."
        },
        "GuardForInRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `for-in` loops to include an `if` statement."
        },
        "HandleCallbackErrRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require error handling in callbacks."
        },
        "HandleCallbackErrRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require error handling in callbacks."
        },
        "HtmlButtonHasTypeOption": {
            "description": "Option.",
            "properties": {
                "button": {
                    "type": "boolean"
                },
                "reset": {
                    "type": "boolean"
                },
                "submit": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HtmlButtonHasTypeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/HtmlButtonHasTypeOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow usage of button without an explicit type attribute."
        },
        "HtmlClosingBracketNewlineOption": {
            "description": "Option.",
            "properties": {
                "multiline": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "singleline": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HtmlClosingBracketNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/HtmlClosingBracketNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow a line break before tag's closing brackets."
        },
        "HtmlClosingBracketSpacingOption": {
            "description": "Option.",
            "properties": {
                "endTag": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "selfClosingTag": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "startTag": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HtmlClosingBracketSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/HtmlClosingBracketSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow a space before tag's closing brackets."
        },
        "HtmlCommentContentNewlineConfig": {
            "description": "Config.",
            "properties": {
                "exceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "HtmlCommentContentNewlineOption": {
            "anyOf": [
                {
                    "properties": {
                        "multiline": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        },
                        "singleline": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "HtmlCommentContentNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/HtmlCommentContentNewlineOption"
                        },
                        {
                            "$ref": "#/definitions/HtmlCommentContentNewlineConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce unified line brake in HTML comments."
        },
        "HtmlCommentContentSpacingConfig": {
            "description": "Config.",
            "properties": {
                "exceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "HtmlCommentContentSpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "HtmlCommentContentSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/HtmlCommentContentSpacingOption"
                        },
                        {
                            "$ref": "#/definitions/HtmlCommentContentSpacingConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce unified spacing in HTML comments."
        },
        "HtmlCommentIndentOption": {
            "anyOf": [
                {
                    "const": "tab",
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "HtmlCommentIndentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/HtmlCommentIndentOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent indentation in HTML comments."
        },
        "HtmlEndTagsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce end tag style."
        },
        "HtmlIndentConfig": {
            "description": "Config.",
            "properties": {
                "alignAttributesVertically": {
                    "type": "boolean"
                },
                "attribute": {
                    "type": "number"
                },
                "baseIndent": {
                    "type": "number"
                },
                "closeBracket": {
                    "anyOf": [
                        {
                            "properties": {
                                "endTag": {
                                    "type": "number"
                                },
                                "selfClosingTag": {
                                    "type": "number"
                                },
                                "startTag": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "switchCase": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "HtmlIndentOption": {
            "anyOf": [
                {
                    "const": "tab",
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "HtmlIndentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/HtmlIndentOption"
                        },
                        {
                            "$ref": "#/definitions/HtmlIndentConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent indentation in `<template>`."
        },
        "HtmlQuotesConfig": {
            "description": "Config.",
            "properties": {
                "avoidEscape": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HtmlQuotesOption": {
            "description": "Option.",
            "enum": [
                "double",
                "single"
            ],
            "type": "string"
        },
        "HtmlQuotesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/HtmlQuotesOption"
                        },
                        {
                            "$ref": "#/definitions/HtmlQuotesConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce quotes style of HTML attributes."
        },
        "HtmlSelfClosingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "html": {
                                    "properties": {
                                        "component": {
                                            "$ref": "#/definitions/OptionValue"
                                        },
                                        "normal": {
                                            "$ref": "#/definitions/OptionValue"
                                        },
                                        "void": {
                                            "$ref": "#/definitions/OptionValue"
                                        }
                                    },
                                    "type": "object"
                                },
                                "math": {
                                    "$ref": "#/definitions/OptionValue"
                                },
                                "svg": {
                                    "$ref": "#/definitions/OptionValue"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce self-closing style."
        },
        "IdBlacklistRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified identifiers."
        },
        "IdDenylistRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified identifiers."
        },
        "IdLengthOption": {
            "description": "Option.",
            "properties": {
                "exceptionPatterns": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "exceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "max": {
                    "type": "number"
                },
                "min": {
                    "type": "number"
                },
                "properties": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "IdLengthRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/IdLengthOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce minimum and maximum identifier lengths."
        },
        "IdMatchConfig": {
            "description": "Config.",
            "properties": {
                "classFields": {
                    "type": "boolean"
                },
                "ignoreDestructuring": {
                    "type": "boolean"
                },
                "onlyDeclarations": {
                    "type": "boolean"
                },
                "properties": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IdMatchRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/definitions/IdMatchConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require identifiers to match a specified regular expression."
        },
        "ImplicitArrowLinebreakOption": {
            "description": "Option.",
            "enum": [
                "below",
                "beside"
            ],
            "type": "string"
        },
        "ImplicitArrowLinebreakRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ImplicitArrowLinebreakOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the location of arrow function bodies."
        },
        "ImportIndexRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "ImportStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "checkDynamicImport": {
                                    "type": "boolean"
                                },
                                "checkExportFrom": {
                                    "type": "boolean"
                                },
                                "checkImport": {
                                    "type": "boolean"
                                },
                                "checkRequire": {
                                    "type": "boolean"
                                },
                                "extendDefaultStyles": {
                                    "type": "boolean"
                                },
                                "styles": {
                                    "$ref": "#/definitions/ModuleStyles"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce specific import styles per module."
        },
        "ImportsFirstOption": {
            "description": "Option.",
            "enum": [
                "absolute-first",
                "disable-absolute-first"
            ],
            "type": "string"
        },
        "ImportsFirstRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ImportsFirstOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Replaced by `import/first`."
        },
        "IndentConfig": {
            "description": "Config.",
            "properties": {
                "indentBlockSequences": {
                    "type": "boolean"
                },
                "indicatorValueIndent": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "IndentConfig$1": {
            "description": "Config.",
            "properties": {
                "ArrayExpression": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "CallExpression": {
                    "properties": {
                        "arguments": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "FunctionDeclaration": {
                    "properties": {
                        "body": {
                            "type": "number"
                        },
                        "parameters": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "FunctionExpression": {
                    "properties": {
                        "body": {
                            "type": "number"
                        },
                        "parameters": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "ImportDeclaration": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "MemberExpression": {
                    "anyOf": [
                        {
                            "const": "off",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "ObjectExpression": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "StaticBlock": {
                    "properties": {
                        "body": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "SwitchCase": {
                    "type": "number"
                },
                "VariableDeclarator": {
                    "anyOf": [
                        {
                            "properties": {
                                "const": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "let": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "var": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "flatTernaryExpressions": {
                    "type": "boolean"
                },
                "ignoreComments": {
                    "type": "boolean"
                },
                "ignoredNodes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "offsetTernaryExpressions": {
                    "type": "boolean"
                },
                "outerIIFEBody": {
                    "anyOf": [
                        {
                            "const": "off",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "IndentConfig$2": {
            "description": "Config.",
            "properties": {
                "ArrayExpression": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "CallExpression": {
                    "properties": {
                        "arguments": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "FunctionDeclaration": {
                    "properties": {
                        "body": {
                            "type": "number"
                        },
                        "parameters": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "FunctionExpression": {
                    "properties": {
                        "body": {
                            "type": "number"
                        },
                        "parameters": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "ImportDeclaration": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "MemberExpression": {
                    "anyOf": [
                        {
                            "const": "off",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "ObjectExpression": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "StaticBlock": {
                    "properties": {
                        "body": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "SwitchCase": {
                    "type": "number"
                },
                "VariableDeclarator": {
                    "anyOf": [
                        {
                            "properties": {
                                "const": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "let": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "var": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "flatTernaryExpressions": {
                    "type": "boolean"
                },
                "ignoreComments": {
                    "type": "boolean"
                },
                "ignoredNodes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "offsetTernaryExpressions": {
                    "type": "boolean"
                },
                "outerIIFEBody": {
                    "anyOf": [
                        {
                            "const": "off",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "IndentConfig$3": {
            "description": "Config.",
            "properties": {
                "ArrayExpression": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "CallExpression": {
                    "properties": {
                        "arguments": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "FunctionDeclaration": {
                    "properties": {
                        "body": {
                            "type": "number"
                        },
                        "parameters": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "FunctionExpression": {
                    "properties": {
                        "body": {
                            "type": "number"
                        },
                        "parameters": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "first",
                                        "off"
                                    ],
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "ImportDeclaration": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "MemberExpression": {
                    "anyOf": [
                        {
                            "const": "off",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "ObjectExpression": {
                    "anyOf": [
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "StaticBlock": {
                    "properties": {
                        "body": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "SwitchCase": {
                    "type": "number"
                },
                "VariableDeclarator": {
                    "anyOf": [
                        {
                            "properties": {
                                "const": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "let": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "var": {
                                    "anyOf": [
                                        {
                                            "enum": [
                                                "first",
                                                "off"
                                            ],
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "enum": [
                                "first",
                                "off"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "flatTernaryExpressions": {
                    "type": "boolean"
                },
                "ignoreComments": {
                    "type": "boolean"
                },
                "ignoredNodes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "offsetTernaryExpressions": {
                    "type": "boolean"
                },
                "outerIIFEBody": {
                    "anyOf": [
                        {
                            "const": "off",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "IndentLegacyConfig": {
            "description": "Config.",
            "properties": {
                "ArrayExpression": {
                    "anyOf": [
                        {
                            "const": "first",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "CallExpression": {
                    "additionalProperties": {},
                    "properties": {
                        "parameters": {
                            "anyOf": [
                                {
                                    "const": "first",
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "FunctionDeclaration": {
                    "additionalProperties": {},
                    "properties": {
                        "body": {
                            "type": "number"
                        },
                        "parameters": {
                            "anyOf": [
                                {
                                    "const": "first",
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "FunctionExpression": {
                    "additionalProperties": {},
                    "properties": {
                        "body": {
                            "type": "number"
                        },
                        "parameters": {
                            "anyOf": [
                                {
                                    "const": "first",
                                    "type": "string"
                                },
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "MemberExpression": {
                    "type": "number"
                },
                "ObjectExpression": {
                    "anyOf": [
                        {
                            "const": "first",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "SwitchCase": {
                    "type": "number"
                },
                "VariableDeclarator": {
                    "anyOf": [
                        {
                            "additionalProperties": {},
                            "properties": {
                                "const": {
                                    "type": "number"
                                },
                                "let": {
                                    "type": "number"
                                },
                                "var": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "outerIIFEBody": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "IndentLegacyOption": {
            "anyOf": [
                {
                    "const": "tab",
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "IndentLegacyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/IndentLegacyOption"
                        },
                        {
                            "$ref": "#/definitions/IndentLegacyConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent indentation."
        },
        "IndentOption$1": {
            "anyOf": [
                {
                    "const": "tab",
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "IndentOption$2": {
            "anyOf": [
                {
                    "const": "tab",
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "IndentOption$3": {
            "anyOf": [
                {
                    "const": "tab",
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "IndentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "type": "number"
                        },
                        {
                            "$ref": "#/definitions/IndentConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent indentation."
        },
        "IndentRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/IndentOption$1"
                        },
                        {
                            "$ref": "#/definitions/IndentConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent indentation."
        },
        "IndentRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/IndentOption$2"
                        },
                        {
                            "$ref": "#/definitions/IndentConfig$2"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent indentation."
        },
        "IndentRuleConfig$3": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/IndentOption$3"
                        },
                        {
                            "$ref": "#/definitions/IndentConfig$3"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent indentation."
        },
        "InitDeclarationsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "ignoreForLoopInit": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow initialization in variable declarations."
        },
        "InitDeclarationsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "ignoreForLoopInit": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow initialization in variable declarations."
        },
        "JsxQuotesOption": {
            "description": "Option.",
            "enum": [
                "prefer-double",
                "prefer-single"
            ],
            "type": "string"
        },
        "JsxQuotesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/JsxQuotesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the consistent use of either double or single quotes in JSX attributes."
        },
        "JsxUsesVarsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prevent variables used in JSX to be marked as unused."
        },
        "KeyNameCasingOption": {
            "description": "Option.",
            "properties": {
                "PascalCase": {
                    "type": "boolean"
                },
                "SCREAMING_SNAKE_CASE": {
                    "type": "boolean"
                },
                "camelCase": {
                    "type": "boolean"
                },
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "kebab-case": {
                    "type": "boolean"
                },
                "snake_case": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "KeyNameCasingOption$1": {
            "description": "Option.",
            "properties": {
                "PascalCase": {
                    "type": "boolean"
                },
                "SCREAMING_SNAKE_CASE": {
                    "type": "boolean"
                },
                "camelCase": {
                    "type": "boolean"
                },
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "kebab-case": {
                    "type": "boolean"
                },
                "snake_case": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "KeyNameCasingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeyNameCasingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce naming convention to key names."
        },
        "KeyNameCasingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeyNameCasingOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce naming convention to property key names."
        },
        "KeySpacingOption": {
            "anyOf": [
                {
                    "properties": {
                        "afterColon": {
                            "type": "boolean"
                        },
                        "align": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "afterColon": {
                                            "type": "boolean"
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "mode": {
                                            "enum": [
                                                "minimum",
                                                "strict"
                                            ],
                                            "type": "string"
                                        },
                                        "on": {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "beforeColon": {
                            "type": "boolean"
                        },
                        "mode": {
                            "enum": [
                                "minimum",
                                "strict"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "align": {
                                    "anyOf": [
                                        {
                                            "properties": {
                                                "afterColon": {
                                                    "type": "boolean"
                                                },
                                                "beforeColon": {
                                                    "type": "boolean"
                                                },
                                                "mode": {
                                                    "enum": [
                                                        "minimum",
                                                        "strict"
                                                    ],
                                                    "type": "string"
                                                },
                                                "on": {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    ]
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "align": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                },
                                "on": {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "KeySpacingOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "afterColon": {
                            "type": "boolean"
                        },
                        "align": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "afterColon": {
                                            "type": "boolean"
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "mode": {
                                            "enum": [
                                                "minimum",
                                                "strict"
                                            ],
                                            "type": "string"
                                        },
                                        "on": {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "beforeColon": {
                            "type": "boolean"
                        },
                        "mode": {
                            "enum": [
                                "minimum",
                                "strict"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "align": {
                                    "anyOf": [
                                        {
                                            "properties": {
                                                "afterColon": {
                                                    "type": "boolean"
                                                },
                                                "beforeColon": {
                                                    "type": "boolean"
                                                },
                                                "mode": {
                                                    "enum": [
                                                        "minimum",
                                                        "strict"
                                                    ],
                                                    "type": "string"
                                                },
                                                "on": {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    ]
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "align": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                },
                                "on": {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "KeySpacingOption$2": {
            "anyOf": [
                {
                    "properties": {
                        "afterColon": {
                            "type": "boolean"
                        },
                        "align": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "afterColon": {
                                            "type": "boolean"
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "mode": {
                                            "enum": [
                                                "minimum",
                                                "strict"
                                            ],
                                            "type": "string"
                                        },
                                        "on": {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "beforeColon": {
                            "type": "boolean"
                        },
                        "mode": {
                            "enum": [
                                "minimum",
                                "strict"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "align": {
                                    "anyOf": [
                                        {
                                            "properties": {
                                                "afterColon": {
                                                    "type": "boolean"
                                                },
                                                "beforeColon": {
                                                    "type": "boolean"
                                                },
                                                "mode": {
                                                    "enum": [
                                                        "minimum",
                                                        "strict"
                                                    ],
                                                    "type": "string"
                                                },
                                                "on": {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    ]
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "align": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                },
                                "on": {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "KeySpacingOption$3": {
            "anyOf": [
                {
                    "properties": {
                        "afterColon": {
                            "type": "boolean"
                        },
                        "align": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "afterColon": {
                                            "type": "boolean"
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "mode": {
                                            "enum": [
                                                "minimum",
                                                "strict"
                                            ],
                                            "type": "string"
                                        },
                                        "on": {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "beforeColon": {
                            "type": "boolean"
                        },
                        "mode": {
                            "enum": [
                                "minimum",
                                "strict"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "align": {
                                    "anyOf": [
                                        {
                                            "properties": {
                                                "afterColon": {
                                                    "type": "boolean"
                                                },
                                                "beforeColon": {
                                                    "type": "boolean"
                                                },
                                                "mode": {
                                                    "enum": [
                                                        "minimum",
                                                        "strict"
                                                    ],
                                                    "type": "string"
                                                },
                                                "on": {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    ]
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "align": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                },
                                "on": {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "KeySpacingOption$4": {
            "anyOf": [
                {
                    "properties": {
                        "afterColon": {
                            "type": "boolean"
                        },
                        "align": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "afterColon": {
                                            "type": "boolean"
                                        },
                                        "beforeColon": {
                                            "type": "boolean"
                                        },
                                        "mode": {
                                            "enum": [
                                                "minimum",
                                                "strict"
                                            ],
                                            "type": "string"
                                        },
                                        "on": {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "beforeColon": {
                            "type": "boolean"
                        },
                        "mode": {
                            "enum": [
                                "minimum",
                                "strict"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "align": {
                                    "anyOf": [
                                        {
                                            "properties": {
                                                "afterColon": {
                                                    "type": "boolean"
                                                },
                                                "beforeColon": {
                                                    "type": "boolean"
                                                },
                                                "mode": {
                                                    "enum": [
                                                        "minimum",
                                                        "strict"
                                                    ],
                                                    "type": "string"
                                                },
                                                "on": {
                                                    "enum": [
                                                        "colon",
                                                        "value"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "enum": [
                                                "colon",
                                                "value"
                                            ],
                                            "type": "string"
                                        }
                                    ]
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "align": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                },
                                "on": {
                                    "enum": [
                                        "colon",
                                        "value"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "multiLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "singleLine": {
                            "properties": {
                                "afterColon": {
                                    "type": "boolean"
                                },
                                "beforeColon": {
                                    "type": "boolean"
                                },
                                "mode": {
                                    "enum": [
                                        "minimum",
                                        "strict"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "KeySpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeySpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing between keys and values in mapping pairs."
        },
        "KeySpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeySpacingOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing between keys and values in object literal properties in `<template>`."
        },
        "KeySpacingRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeySpacingOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing between property names and type annotations in types and interfaces."
        },
        "KeySpacingRuleConfig$3": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeySpacingOption$3"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing between keys and values in object literal properties."
        },
        "KeySpacingRuleConfig$4": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeySpacingOption$4"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing between keys and values in object literal properties."
        },
        "KeywordSpacingOption": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                },
                "overrides": {
                    "properties": {
                        "abstract": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "as": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "async": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "await": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "boolean": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "break": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "byte": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "case": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "catch": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "char": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "class": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "const": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "continue": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "debugger": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "default": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "delete": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "do": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "double": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "else": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "enum": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "export": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "extends": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "false": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "final": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "finally": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "float": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "for": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "from": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "function": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "goto": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "if": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "implements": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "import": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "in": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "instanceof": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "int": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "interface": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "let": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "long": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "native": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "new": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "null": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "of": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "package": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "private": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "protected": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "public": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "return": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "set": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "short": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "static": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "super": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "switch": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "synchronized": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "this": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "throw": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "throws": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "transient": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "true": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "try": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "typeof": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "var": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "void": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "volatile": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "while": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "with": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "yield": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "KeywordSpacingOption$1": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                },
                "overrides": {
                    "properties": {
                        "abstract": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "as": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "async": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "await": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "boolean": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "break": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "byte": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "case": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "catch": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "char": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "class": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "const": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "continue": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "debugger": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "default": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "delete": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "do": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "double": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "else": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "enum": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "export": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "extends": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "false": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "final": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "finally": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "float": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "for": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "from": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "function": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "goto": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "if": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "implements": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "import": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "in": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "instanceof": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "int": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "interface": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "let": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "long": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "native": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "new": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "null": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "of": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "package": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "private": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "protected": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "public": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "return": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "set": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "short": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "static": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "super": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "switch": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "synchronized": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "this": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "throw": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "throws": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "transient": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "true": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "try": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "type": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "typeof": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "var": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "void": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "volatile": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "while": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "with": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "yield": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "KeywordSpacingOption$2": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                },
                "overrides": {
                    "properties": {
                        "abstract": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "as": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "async": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "await": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "boolean": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "break": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "byte": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "case": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "catch": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "char": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "class": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "const": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "continue": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "debugger": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "default": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "delete": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "do": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "double": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "else": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "enum": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "export": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "extends": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "false": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "final": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "finally": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "float": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "for": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "from": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "function": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "goto": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "if": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "implements": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "import": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "in": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "instanceof": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "int": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "interface": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "let": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "long": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "native": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "new": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "null": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "of": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "package": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "private": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "protected": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "public": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "return": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "set": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "short": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "static": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "super": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "switch": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "synchronized": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "this": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "throw": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "throws": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "transient": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "true": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "try": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "typeof": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "var": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "void": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "volatile": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "while": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "with": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "yield": {
                            "properties": {
                                "after": {
                                    "type": "boolean"
                                },
                                "before": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "KeywordSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeywordSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after keywords in `<template>`."
        },
        "KeywordSpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeywordSpacingOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after keywords."
        },
        "KeywordSpacingRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/KeywordSpacingOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after keywords."
        },
        "LanguageOptions": {
            "description": "An object containing settings related to how JavaScript is configured for linting",
            "properties": {
                "ecmaVersion": {
                    "$ref": "#/definitions/EcmaVersion",
                    "default": "latest",
                    "description": "The version of ECMAScript to support. May be any year (i.e., `2022`) or version (i.e., `5`). Set to `\"latest\"` for the most recent supported version."
                },
                "globals": {
                    "$ref": "#/definitions/Record<string,boolean|\"off\"|\"readonly\"|\"writable\"|\"readable\"|\"writeable\">",
                    "description": "An object specifying additional objects that should be added to the global scope during linting."
                },
                "parser": {
                    "anyOf": [
                        {
                            "enum": [
                                "@typescript-eslint/parser",
                                "babel-eslint",
                                "jsonc-eslint-parser",
                                "vue-eslint-parser"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "object"
                        }
                    ],
                    "default": "@/espree",
                    "description": "Either an object containing a `parse()` method or a string indicating the name of a parser inside of a plugin (i.e., `\"pluginName/parserName\"`)."
                },
                "parserOptions": {
                    "$ref": "#/definitions/ParserOptions",
                    "description": "An object specifying additional options that are passed directly to the `parser()` method on the parser. The available options are parser-dependent."
                },
                "sourceType": {
                    "description": "The type of JavaScript source code. Possible values are `\"script\"` for traditional script files, `\"module\"` for ECMAScript modules (ESM), and `\"commonjs\"` for CommonJS files.\n\n(default: `\"module\"` for .js and .mjs files; `\"commonjs\"` for .cjs files)",
                    "enum": [
                        "commonjs",
                        "module",
                        "script"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Lib": {
            "description": "Lib.",
            "enum": [
                "dom",
                "dom.iterable",
                "es2015",
                "es2015.collection",
                "es2015.core",
                "es2015.generator",
                "es2015.iterable",
                "es2015.promise",
                "es2015.proxy",
                "es2015.reflect",
                "es2015.symbol",
                "es2015.symbol.wellknown",
                "es2016",
                "es2016.array.include",
                "es2016.full",
                "es2017",
                "es2017.full",
                "es2017.intl",
                "es2017.object",
                "es2017.sharedmemory",
                "es2017.string",
                "es2017.typedarrays",
                "es2018",
                "es2018.asyncgenerator",
                "es2018.asynciterable",
                "es2018.full",
                "es2018.intl",
                "es2018.promise",
                "es2018.regexp",
                "es2019",
                "es2019.array",
                "es2019.full",
                "es2019.object",
                "es2019.string",
                "es2019.symbol",
                "es2020",
                "es2020.bigint",
                "es2020.full",
                "es2020.intl",
                "es2020.promise",
                "es2020.sharedmemory",
                "es2020.string",
                "es2020.symbol.wellknown",
                "es5",
                "es6",
                "es7",
                "esnext",
                "esnext.array",
                "esnext.asynciterable",
                "esnext.bigint",
                "esnext.full",
                "esnext.intl",
                "esnext.promise",
                "esnext.string",
                "esnext.symbol",
                "esnext.weakref",
                "lib",
                "scripthost",
                "webworker",
                "webworker.importscripts",
                "webworker.iterable"
            ],
            "type": "string"
        },
        "LineCommentPositionOption": {
            "anyOf": [
                {
                    "properties": {
                        "applyDefaultIgnorePatterns": {
                            "type": "boolean"
                        },
                        "applyDefaultPatterns": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "position": {
                            "enum": [
                                "above",
                                "beside"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "above",
                        "beside"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "LineCommentPositionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/LineCommentPositionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce position of line comments."
        },
        "LinebreakStyleOption": {
            "description": "Option.",
            "enum": [
                "unix",
                "windows"
            ],
            "type": "string"
        },
        "LinebreakStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/LinebreakStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent linebreak style."
        },
        "LinesAroundCommentOption": {
            "description": "Option.",
            "properties": {
                "afterBlockComment": {
                    "type": "boolean"
                },
                "afterLineComment": {
                    "type": "boolean"
                },
                "allowArrayEnd": {
                    "type": "boolean"
                },
                "allowArrayStart": {
                    "type": "boolean"
                },
                "allowBlockEnd": {
                    "type": "boolean"
                },
                "allowBlockStart": {
                    "type": "boolean"
                },
                "allowClassEnd": {
                    "type": "boolean"
                },
                "allowClassStart": {
                    "type": "boolean"
                },
                "allowEnumEnd": {
                    "type": "boolean"
                },
                "allowEnumStart": {
                    "type": "boolean"
                },
                "allowInterfaceEnd": {
                    "type": "boolean"
                },
                "allowInterfaceStart": {
                    "type": "boolean"
                },
                "allowModuleEnd": {
                    "type": "boolean"
                },
                "allowModuleStart": {
                    "type": "boolean"
                },
                "allowObjectEnd": {
                    "type": "boolean"
                },
                "allowObjectStart": {
                    "type": "boolean"
                },
                "allowTypeEnd": {
                    "type": "boolean"
                },
                "allowTypeStart": {
                    "type": "boolean"
                },
                "applyDefaultIgnorePatterns": {
                    "type": "boolean"
                },
                "beforeBlockComment": {
                    "type": "boolean"
                },
                "beforeLineComment": {
                    "type": "boolean"
                },
                "ignorePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LinesAroundCommentOption$1": {
            "description": "Option.",
            "properties": {
                "afterBlockComment": {
                    "type": "boolean"
                },
                "afterHashbangComment": {
                    "type": "boolean"
                },
                "afterLineComment": {
                    "type": "boolean"
                },
                "allowArrayEnd": {
                    "type": "boolean"
                },
                "allowArrayStart": {
                    "type": "boolean"
                },
                "allowBlockEnd": {
                    "type": "boolean"
                },
                "allowBlockStart": {
                    "type": "boolean"
                },
                "allowClassEnd": {
                    "type": "boolean"
                },
                "allowClassStart": {
                    "type": "boolean"
                },
                "allowObjectEnd": {
                    "type": "boolean"
                },
                "allowObjectStart": {
                    "type": "boolean"
                },
                "applyDefaultIgnorePatterns": {
                    "type": "boolean"
                },
                "beforeBlockComment": {
                    "type": "boolean"
                },
                "beforeLineComment": {
                    "type": "boolean"
                },
                "ignorePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LinesAroundCommentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/LinesAroundCommentOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require empty lines around comments."
        },
        "LinesAroundCommentRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/LinesAroundCommentOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require empty lines around comments."
        },
        "LinesAroundDirectiveOption": {
            "anyOf": [
                {
                    "properties": {
                        "after": {
                            "enum": [
                                "always",
                                "never"
                            ],
                            "type": "string"
                        },
                        "before": {
                            "enum": [
                                "always",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "LinesAroundDirectiveRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/LinesAroundDirectiveOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow newlines around directives."
        },
        "LinesBetweenClassMembersConfig": {
            "description": "Config.",
            "properties": {
                "exceptAfterOverload": {
                    "type": "boolean"
                },
                "exceptAfterSingleLine": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "LinesBetweenClassMembersConfig$1": {
            "description": "Config.",
            "properties": {
                "exceptAfterSingleLine": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "LinesBetweenClassMembersOption": {
            "anyOf": [
                {
                    "properties": {
                        "enforce": {
                            "additionalItems": {
                                "properties": {
                                    "blankLine": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ],
                                        "type": "string"
                                    },
                                    "next": {
                                        "enum": [
                                            "*",
                                            "field",
                                            "method"
                                        ],
                                        "type": "string"
                                    },
                                    "prev": {
                                        "enum": [
                                            "*",
                                            "field",
                                            "method"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "items": [
                                {
                                    "properties": {
                                        "blankLine": {
                                            "enum": [
                                                "always",
                                                "never"
                                            ],
                                            "type": "string"
                                        },
                                        "next": {
                                            "enum": [
                                                "*",
                                                "field",
                                                "method"
                                            ],
                                            "type": "string"
                                        },
                                        "prev": {
                                            "enum": [
                                                "*",
                                                "field",
                                                "method"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "LinesBetweenClassMembersOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "enforce": {
                            "additionalItems": {
                                "properties": {
                                    "blankLine": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ],
                                        "type": "string"
                                    },
                                    "next": {
                                        "enum": [
                                            "*",
                                            "field",
                                            "method"
                                        ],
                                        "type": "string"
                                    },
                                    "prev": {
                                        "enum": [
                                            "*",
                                            "field",
                                            "method"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "items": [
                                {
                                    "properties": {
                                        "blankLine": {
                                            "enum": [
                                                "always",
                                                "never"
                                            ],
                                            "type": "string"
                                        },
                                        "next": {
                                            "enum": [
                                                "*",
                                                "field",
                                                "method"
                                            ],
                                            "type": "string"
                                        },
                                        "prev": {
                                            "enum": [
                                                "*",
                                                "field",
                                                "method"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "LinesBetweenClassMembersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/LinesBetweenClassMembersOption"
                        },
                        {
                            "$ref": "#/definitions/LinesBetweenClassMembersConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow an empty line between class members."
        },
        "LinesBetweenClassMembersRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/LinesBetweenClassMembersOption$1"
                        },
                        {
                            "$ref": "#/definitions/LinesBetweenClassMembersConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow an empty line between class members."
        },
        "Linter.Processor<string|Linter.ProcessorFile>": {
            "properties": {
                "meta": {
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "version": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "supportsAutofix": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Linter.RuleEntry<Options>": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/Linter.RuleLevel"
                        },
                        {
                            "properties": {
                                "ArrayExpression": {
                                    "type": "boolean"
                                },
                                "ArrayPattern": {
                                    "type": "boolean"
                                },
                                "ArrowFunctionExpression": {
                                    "type": "boolean"
                                },
                                "CallExpression": {
                                    "type": "boolean"
                                },
                                "ExportNamedDeclaration": {
                                    "type": "boolean"
                                },
                                "FunctionDeclaration": {
                                    "type": "boolean"
                                },
                                "FunctionExpression": {
                                    "type": "boolean"
                                },
                                "ImportDeclaration": {
                                    "type": "boolean"
                                },
                                "NewExpression": {
                                    "type": "boolean"
                                },
                                "ObjectExpression": {
                                    "type": "boolean"
                                },
                                "ObjectPattern": {
                                    "type": "boolean"
                                },
                                "TSInterfaceDeclaration": {
                                    "type": "boolean"
                                },
                                "TSTupleType": {
                                    "type": "boolean"
                                },
                                "TSTypeLiteral": {
                                    "type": "boolean"
                                },
                                "TSTypeParameterDeclaration": {
                                    "type": "boolean"
                                },
                                "TSTypeParameterInstantiation": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "Linter.RuleEntry<[]>": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/Linter.RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "Linter.RuleLevel": {
            "enum": [
                0,
                1,
                2,
                "error",
                "off",
                "warn"
            ]
        },
        "LinterOptions": {
            "description": "An object containing settings related to the linting process.",
            "properties": {
                "noInlineConfig": {
                    "description": "A boolean value indicating if inline configuration is allowed.",
                    "type": "boolean"
                },
                "reportUnusedDisableDirectives": {
                    "description": "A boolean value indicating if unused disable directives should be tracked and reported.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "LiteralUnion<\"vue-eslint-parser-template-tokenizer-pug\",string>": {
            "const": "vue-eslint-parser-template-tokenizer-pug",
            "description": "A literal type that supports custom further strings but preserves autocompletion in IDEs.",
            "type": "string"
        },
        "LogicalAssignmentOperatorsRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {},
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow logical assignment operator shorthand."
        },
        "MatchComponentFileNameOption": {
            "description": "Option.",
            "properties": {
                "extensions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "shouldMatchCase": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MatchComponentFileNameRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MatchComponentFileNameOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require component name property to match its file name."
        },
        "MatchComponentImportNameRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require the registered component name to match the imported component name."
        },
        "MatchRegexConfig": {
            "properties": {
                "match": {
                    "type": "boolean"
                },
                "regex": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MaxAttributesPerLineOption": {
            "description": "Option.",
            "properties": {
                "multiline": {
                    "anyOf": [
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "singleline": {
                    "anyOf": [
                        {
                            "properties": {
                                "max": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "MaxAttributesPerLineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxAttributesPerLineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the maximum number of attributes per line."
        },
        "MaxClassesPerFileOption": {
            "anyOf": [
                {
                    "properties": {
                        "ignoreExpressions": {
                            "type": "boolean"
                        },
                        "max": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxClassesPerFileRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxClassesPerFileOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum number of classes per file."
        },
        "MaxDependenciesOption": {
            "description": "Option.",
            "properties": {
                "ignoreTypeImports": {
                    "type": "boolean"
                },
                "max": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "MaxDependenciesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxDependenciesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the maximum number of dependencies a module can have."
        },
        "MaxDepthOption": {
            "anyOf": [
                {
                    "properties": {
                        "max": {
                            "type": "number"
                        },
                        "maximum": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxDepthRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxDepthOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum depth that blocks can be nested."
        },
        "MaxExpectsOption": {
            "description": "Option.",
            "properties": {
                "max": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "MaxExpectsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxExpectsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum number of expect per test."
        },
        "MaxLenConfig": {
            "anyOf": [
                {
                    "properties": {
                        "code": {
                            "type": "number"
                        },
                        "comments": {
                            "type": "number"
                        },
                        "ignoreComments": {
                            "type": "boolean"
                        },
                        "ignoreHTMLAttributeValues": {
                            "type": "boolean"
                        },
                        "ignoreHTMLTextContents": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "ignoreRegExpLiterals": {
                            "type": "boolean"
                        },
                        "ignoreStrings": {
                            "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                            "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                            "type": "boolean"
                        },
                        "ignoreUrls": {
                            "type": "boolean"
                        },
                        "tabWidth": {
                            "type": "number"
                        },
                        "template": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Config."
        },
        "MaxLenConfig$1": {
            "anyOf": [
                {
                    "properties": {
                        "code": {
                            "type": "number"
                        },
                        "comments": {
                            "type": "number"
                        },
                        "ignoreComments": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "ignoreRegExpLiterals": {
                            "type": "boolean"
                        },
                        "ignoreStrings": {
                            "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                            "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                            "type": "boolean"
                        },
                        "ignoreUrls": {
                            "type": "boolean"
                        },
                        "tabWidth": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Config."
        },
        "MaxLenOption": {
            "anyOf": [
                {
                    "properties": {
                        "code": {
                            "type": "number"
                        },
                        "comments": {
                            "type": "number"
                        },
                        "ignoreComments": {
                            "type": "boolean"
                        },
                        "ignoreHTMLAttributeValues": {
                            "type": "boolean"
                        },
                        "ignoreHTMLTextContents": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "ignoreRegExpLiterals": {
                            "type": "boolean"
                        },
                        "ignoreStrings": {
                            "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                            "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                            "type": "boolean"
                        },
                        "ignoreUrls": {
                            "type": "boolean"
                        },
                        "tabWidth": {
                            "type": "number"
                        },
                        "template": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxLenOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "code": {
                            "type": "number"
                        },
                        "comments": {
                            "type": "number"
                        },
                        "ignoreComments": {
                            "type": "boolean"
                        },
                        "ignorePattern": {
                            "type": "string"
                        },
                        "ignoreRegExpLiterals": {
                            "type": "boolean"
                        },
                        "ignoreStrings": {
                            "type": "boolean"
                        },
                        "ignoreTemplateLiterals": {
                            "type": "boolean"
                        },
                        "ignoreTrailingComments": {
                            "type": "boolean"
                        },
                        "ignoreUrls": {
                            "type": "boolean"
                        },
                        "tabWidth": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxLenRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxLenOption"
                        },
                        {
                            "$ref": "#/definitions/MaxLenConfig"
                        },
                        {
                            "$ref": "#/definitions/MaxLenSetting"
                        }
                    ],
                    "maxItems": 4,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum line length in `.vue` files."
        },
        "MaxLenRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxLenOption$1"
                        },
                        {
                            "$ref": "#/definitions/MaxLenConfig$1"
                        },
                        {
                            "$ref": "#/definitions/MaxLenSetting$1"
                        }
                    ],
                    "maxItems": 4,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum line length."
        },
        "MaxLenSetting": {
            "description": "Setting.",
            "properties": {
                "code": {
                    "type": "number"
                },
                "comments": {
                    "type": "number"
                },
                "ignoreComments": {
                    "type": "boolean"
                },
                "ignoreHTMLAttributeValues": {
                    "type": "boolean"
                },
                "ignoreHTMLTextContents": {
                    "type": "boolean"
                },
                "ignorePattern": {
                    "type": "string"
                },
                "ignoreRegExpLiterals": {
                    "type": "boolean"
                },
                "ignoreStrings": {
                    "type": "boolean"
                },
                "ignoreTemplateLiterals": {
                    "type": "boolean"
                },
                "ignoreTrailingComments": {
                    "type": "boolean"
                },
                "ignoreUrls": {
                    "type": "boolean"
                },
                "tabWidth": {
                    "type": "number"
                },
                "template": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "MaxLenSetting$1": {
            "description": "Setting.",
            "properties": {
                "code": {
                    "type": "number"
                },
                "comments": {
                    "type": "number"
                },
                "ignoreComments": {
                    "type": "boolean"
                },
                "ignorePattern": {
                    "type": "string"
                },
                "ignoreRegExpLiterals": {
                    "type": "boolean"
                },
                "ignoreStrings": {
                    "type": "boolean"
                },
                "ignoreTemplateLiterals": {
                    "type": "boolean"
                },
                "ignoreTrailingComments": {
                    "type": "boolean"
                },
                "ignoreUrls": {
                    "type": "boolean"
                },
                "tabWidth": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "MaxLinesOption": {
            "anyOf": [
                {
                    "properties": {
                        "max": {
                            "type": "number"
                        },
                        "skipBlankLines": {
                            "type": "boolean"
                        },
                        "skipComments": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxLinesPerBlockOption": {
            "description": "Option.",
            "properties": {
                "script": {
                    "type": "number"
                },
                "skipBlankLines": {
                    "type": "boolean"
                },
                "style": {
                    "type": "number"
                },
                "template": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "MaxLinesPerBlockRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxLinesPerBlockOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce maximum number of lines in Vue SFC blocks."
        },
        "MaxLinesPerFunctionOption": {
            "anyOf": [
                {
                    "properties": {
                        "IIFEs": {
                            "type": "boolean"
                        },
                        "max": {
                            "type": "number"
                        },
                        "skipBlankLines": {
                            "type": "boolean"
                        },
                        "skipComments": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxLinesPerFunctionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxLinesPerFunctionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum number of lines of code in a function."
        },
        "MaxLinesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxLinesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum number of lines per file."
        },
        "MaxNestedCallbacksOption": {
            "anyOf": [
                {
                    "properties": {
                        "max": {
                            "type": "number"
                        },
                        "maximum": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxNestedCallbacksRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxNestedCallbacksOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum depth that callbacks can be nested."
        },
        "MaxNestedDescribeOption": {
            "description": "Option.",
            "properties": {
                "max": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "MaxNestedDescribeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxNestedDescribeOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Nested describe block should be less than set max value or default value."
        },
        "MaxParamsOption": {
            "anyOf": [
                {
                    "properties": {
                        "max": {
                            "type": "number"
                        },
                        "maximum": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxParamsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxParamsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum number of parameters in function definitions."
        },
        "MaxStatementsConfig": {
            "description": "Config.",
            "properties": {
                "ignoreTopLevelFunctions": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "MaxStatementsOption": {
            "anyOf": [
                {
                    "properties": {
                        "max": {
                            "type": "number"
                        },
                        "maximum": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "MaxStatementsPerLineOption": {
            "description": "Option.",
            "properties": {
                "max": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "MaxStatementsPerLineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxStatementsPerLineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum number of statements allowed per line."
        },
        "MaxStatementsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MaxStatementsOption"
                        },
                        {
                            "$ref": "#/definitions/MaxStatementsConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a maximum number of statements allowed in function blocks."
        },
        "MemberDelimiterStyleOption": {
            "properties": {
                "multiline": {
                    "properties": {
                        "delimiter": {
                            "$ref": "#/definitions/MultiLineOption"
                        },
                        "requireLast": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "multilineDetection": {
                    "enum": [
                        "brackets",
                        "last-member"
                    ],
                    "type": "string"
                },
                "overrides": {
                    "properties": {
                        "interface": {
                            "$ref": "#/definitions/DelimiterConfig"
                        },
                        "typeLiteral": {
                            "$ref": "#/definitions/DelimiterConfig"
                        }
                    },
                    "type": "object"
                },
                "singleline": {
                    "properties": {
                        "delimiter": {
                            "$ref": "#/definitions/SingleLineOption"
                        },
                        "requireLast": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "MemberDelimiterStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MemberDelimiterStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require a specific member delimiter style for interfaces and type literals."
        },
        "MemberOrderingOption": {
            "properties": {
                "classExpressions": {
                    "$ref": "#/definitions/BaseConfig"
                },
                "classes": {
                    "$ref": "#/definitions/BaseConfig"
                },
                "default": {
                    "$ref": "#/definitions/BaseConfig"
                },
                "interfaces": {
                    "$ref": "#/definitions/TypesConfig"
                },
                "typeLiterals": {
                    "$ref": "#/definitions/TypesConfig"
                }
            },
            "type": "object"
        },
        "MemberOrderingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MemberOrderingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require a consistent member declaration order."
        },
        "MethodSignatureStyleOption": {
            "description": "Option.",
            "enum": [
                "method",
                "property"
            ],
            "type": "string"
        },
        "MethodSignatureStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MethodSignatureStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using a particular method signature syntax."
        },
        "Modifier": {
            "description": "Option.",
            "enum": [
                "private",
                "private readonly",
                "protected",
                "protected readonly",
                "public",
                "public readonly",
                "readonly"
            ],
            "type": "string"
        },
        "ModuleStyles": {
            "additionalProperties": {
                "$ref": "#/definitions/Styles"
            },
            "type": "object"
        },
        "MultiLineOption": {
            "description": "Option.",
            "enum": [
                "comma",
                "none",
                "semi"
            ],
            "type": "string"
        },
        "MultiWordComponentNamesOption": {
            "description": "Option.",
            "properties": {
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MultiWordComponentNamesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MultiWordComponentNamesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require component names to be always multi-word."
        },
        "MultilineCommentStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "bare-block",
                                "starred-block"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "separate-lines",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "separate-lines",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "checkJSDoc": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a particular style for multiline comments."
        },
        "MultilineHtmlElementContentNewlineOption": {
            "description": "Option.",
            "properties": {
                "allowEmptyLines": {
                    "type": "boolean"
                },
                "ignoreWhenEmpty": {
                    "type": "boolean"
                },
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MultilineHtmlElementContentNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MultilineHtmlElementContentNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require a line break before and after the contents of a multiline element."
        },
        "MultilineTernaryOption": {
            "description": "Option.",
            "enum": [
                "always",
                "always-multiline",
                "never"
            ],
            "type": "string"
        },
        "MultilineTernaryOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "always-multiline",
                "never"
            ],
            "type": "string"
        },
        "MultilineTernaryRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MultilineTernaryOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce newlines between operands of ternary expressions in `<template>`."
        },
        "MultilineTernaryRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MultilineTernaryOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce newlines between operands of ternary expressions."
        },
        "MustacheInterpolationSpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "MustacheInterpolationSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/MustacheInterpolationSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce unified spacing in mustache interpolations."
        },
        "NamedOption": {
            "description": "Option.",
            "properties": {
                "commonjs": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NamedRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NamedOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Ensure named imports correspond to a named export in the remote file."
        },
        "NamespaceOption": {
            "description": "Option.",
            "properties": {
                "allowComputed": {
                    "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NamespaceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NamespaceOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced."
        },
        "NamingConventionRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "#private",
                                                "abstract",
                                                "async",
                                                "const",
                                                "destructured",
                                                "exported",
                                                "global",
                                                "override",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "items": {
                                            "enum": [
                                                "accessor",
                                                "class",
                                                "classMethod",
                                                "classProperty",
                                                "default",
                                                "enum",
                                                "enumMember",
                                                "function",
                                                "interface",
                                                "memberLike",
                                                "method",
                                                "objectLiteralMethod",
                                                "objectLiteralProperty",
                                                "parameter",
                                                "parameterProperty",
                                                "property",
                                                "typeAlias",
                                                "typeLike",
                                                "typeMethod",
                                                "typeParameter",
                                                "typeProperty",
                                                "variable",
                                                "variableLike"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "#private",
                                                "abstract",
                                                "async",
                                                "const",
                                                "destructured",
                                                "exported",
                                                "global",
                                                "override",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "default",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "async",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "variableLike",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "async",
                                                "const",
                                                "destructured",
                                                "exported",
                                                "global",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "variable",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "async",
                                                "exported",
                                                "global",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "function",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "destructured",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "parameter",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "#private",
                                                "abstract",
                                                "async",
                                                "override",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "memberLike",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "#private",
                                                "abstract",
                                                "override",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "classProperty",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "public",
                                                "requiresQuotes"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "objectLiteralProperty",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "public",
                                                "readonly",
                                                "requiresQuotes"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "typeProperty",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "parameterProperty",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "#private",
                                                "abstract",
                                                "async",
                                                "override",
                                                "private",
                                                "protected",
                                                "public",
                                                "readonly",
                                                "requiresQuotes",
                                                "static"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "property",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "#private",
                                                "abstract",
                                                "async",
                                                "override",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "classMethod",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "async",
                                                "public",
                                                "requiresQuotes"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "objectLiteralMethod",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "public",
                                                "requiresQuotes"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "typeMethod",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "#private",
                                                "abstract",
                                                "async",
                                                "override",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "method",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "abstract",
                                                "override",
                                                "private",
                                                "protected",
                                                "public",
                                                "requiresQuotes",
                                                "static"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "accessor",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "types": {
                                        "items": {
                                            "$ref": "#/definitions/TypeModifiers"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "const": "requiresQuotes",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "enumMember",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "abstract",
                                                "exported",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "typeLike",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "abstract",
                                                "exported",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "class",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "exported",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "interface",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "exported",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "typeAlias",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "exported",
                                                "unused"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "enum",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "custom": {
                                        "$ref": "#/definitions/MatchRegexConfig"
                                    },
                                    "failureMessage": {
                                        "type": "string"
                                    },
                                    "filter": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/definitions/MatchRegexConfig"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "format": {
                                        "description": "Option.",
                                        "items": {
                                            "$ref": "#/definitions/PredefinedFormats"
                                        },
                                        "type": "array"
                                    },
                                    "leadingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "const": "unused",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "prefix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "selector": {
                                        "const": "typeParameter",
                                        "type": "string"
                                    },
                                    "suffix": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "trailingUnderscore": {
                                        "$ref": "#/definitions/UnderscoreOptions"
                                    }
                                },
                                "type": "object"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce naming conventions for everything across a codebase."
        },
        "NewCapOption": {
            "description": "Option.",
            "properties": {
                "capIsNew": {
                    "type": "boolean"
                },
                "capIsNewExceptionPattern": {
                    "type": "string"
                },
                "capIsNewExceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "newIsCap": {
                    "type": "boolean"
                },
                "newIsCapExceptionPattern": {
                    "type": "string"
                },
                "newIsCapExceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "properties": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NewCapRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NewCapOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require constructor names to begin with a capital letter."
        },
        "NewForBuiltinsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`."
        },
        "NewLineBetweenMultiLinePropertyOption": {
            "description": "Option.",
            "properties": {
                "minLineOfMultilineProperty": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "NewLineBetweenMultiLinePropertyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NewLineBetweenMultiLinePropertyOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce new lines between multi-line properties in Vue components."
        },
        "NewParensOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "NewParensRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NewParensOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce or disallow parentheses when invoking a constructor with no arguments."
        },
        "NewlineAfterImportOption": {
            "description": "Option.",
            "properties": {
                "considerComments": {
                    "type": "boolean"
                },
                "count": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "NewlineAfterImportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NewlineAfterImportOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a newline after import statements."
        },
        "NewlineAfterVarOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "NewlineAfterVarRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NewlineAfterVarOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow an empty line after variable declarations."
        },
        "NewlineBeforeReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require an empty line before `return` statements."
        },
        "NewlinePerChainedCallOption": {
            "description": "Option.",
            "properties": {
                "ignoreChainWithDepth": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "NewlinePerChainedCallRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NewlinePerChainedCallOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require a newline after each call in a method chain."
        },
        "NextTickStyleOption": {
            "description": "Option.",
            "enum": [
                "callback",
                "promise"
            ],
            "type": "string"
        },
        "NextTickStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NextTickStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce Promise or callback style in `nextTick`."
        },
        "NoAbsolutePathOption": {
            "description": "Option.",
            "properties": {
                "amd": {
                    "type": "boolean"
                },
                "commonjs": {
                    "type": "boolean"
                },
                "esmodule": {
                    "type": "boolean"
                },
                "ignore": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoAbsolutePathRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoAbsolutePathOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid import of modules using absolute paths."
        },
        "NoAbusiveEslintDisableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce specifying rules to disable in `eslint-disable` comments."
        },
        "NoAggregatingEnableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow a `eslint-enable` comment for multiple `eslint-disable` comments."
        },
        "NoAlertRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `alert`, `confirm`, and `prompt`."
        },
        "NoAliasMethodsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow alias methods."
        },
        "NoAmdRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid AMD `require` and `define` calls."
        },
        "NoAnonymousDefaultExportOption": {
            "description": "Option.",
            "properties": {
                "allowAnonymousClass": {
                    "description": "If `false`, will report default export of an anonymous class",
                    "type": "boolean"
                },
                "allowAnonymousFunction": {
                    "description": "If `false`, will report default export of an anonymous function",
                    "type": "boolean"
                },
                "allowArray": {
                    "description": "If `false`, will report default export of an array",
                    "type": "boolean"
                },
                "allowArrowFunction": {
                    "description": "If `false`, will report default export of an arrow function",
                    "type": "boolean"
                },
                "allowCallExpression": {
                    "description": "If `false`, will report default export of a function call",
                    "type": "boolean"
                },
                "allowLiteral": {
                    "description": "If `false`, will report default export of a literal",
                    "type": "boolean"
                },
                "allowNew": {
                    "description": "If `false`, will report default export of a class instantiation",
                    "type": "boolean"
                },
                "allowObject": {
                    "description": "If `false`, will report default export of an object expression",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoAnonymousDefaultExportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoAnonymousDefaultExportOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid anonymous values as default exports."
        },
        "NoArrayCallbackReferenceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prevent passing a function reference directly to iterator methods."
        },
        "NoArrayConstructorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow generic `Array` constructors."
        },
        "NoArrayConstructorRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `Array` constructors."
        },
        "NoArrayForEachRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `for…of` over the `forEach` method."
        },
        "NoArrayInstanceofRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "NoArrayMethodThisArgumentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using the `this` argument in array methods."
        },
        "NoArrayPushPushOption": {
            "description": "Option.",
            "properties": {
                "ignore": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoArrayPushPushRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoArrayPushPushOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce combining multiple `Array#push()` into one call."
        },
        "NoArrayReduceOption": {
            "description": "Option.",
            "properties": {
                "allowSimpleOperations": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoArrayReduceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoArrayReduceOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `Array#reduce()` and `Array#reduceRight()`."
        },
        "NoArrowFunctionsInWatchRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using arrow functions to define watcher."
        },
        "NoAsyncInComputedPropertiesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow asynchronous actions in computed properties."
        },
        "NoAsyncPromiseExecutorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using an async function as a Promise executor."
        },
        "NoAwaitExpressionMemberRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow member access from await expression."
        },
        "NoAwaitInLoopRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `await` inside of loops."
        },
        "NoBareStringsInTemplateOption": {
            "description": "Option.",
            "properties": {
                "allowlist": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "attributes": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": "object"
                },
                "directives": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoBareStringsInTemplateRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoBareStringsInTemplateOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of bare strings in `<template>`."
        },
        "NoBaseToStringOption": {
            "description": "Option.",
            "properties": {
                "ignoredTypeNames": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoBaseToStringRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoBaseToStringOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `.toString()` to only be called on objects which provide useful information when stringified."
        },
        "NoBigintLiteralsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow BigInt literals."
        },
        "NoBinaryExpressionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow binary expression."
        },
        "NoBinaryNumericLiteralsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow binary numeric literals."
        },
        "NoBitwiseOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "enum": [
                            "&",
                            "&=",
                            "<<",
                            "<<=",
                            ">>",
                            ">>=",
                            ">>>",
                            ">>>=",
                            "^",
                            "^=",
                            "|",
                            "|=",
                            "~"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "int32Hint": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoBitwiseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoBitwiseOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow bitwise operators."
        },
        "NoBooleanDefaultOption": {
            "description": "Option.",
            "enum": [
                "default-false",
                "no-default"
            ],
            "type": "string"
        },
        "NoBooleanDefaultRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoBooleanDefaultOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow boolean defaults."
        },
        "NoBufferConstructorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of the `Buffer()` constructor."
        },
        "NoCallbackLiteralRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce Node.js-style error-first callback pattern is followed."
        },
        "NoCallerRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `arguments.caller` or `arguments.callee`."
        },
        "NoCaseDeclarationsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow lexical declarations in case clauses."
        },
        "NoCatchShadowRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope."
        },
        "NoChildContentOption": {
            "description": "Option.",
            "properties": {
                "additionalDirectives": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoChildContentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoChildContentOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow element's child contents which would be overwritten by a directive like `v-html` or `v-text`."
        },
        "NoClassAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow reassigning class members."
        },
        "NoCommentedOutTestsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow commented out tests."
        },
        "NoCommentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow comments."
        },
        "NoCommonjsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "allow-primitive-modules",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "allowConditionalRequire": {
                                    "type": "boolean"
                                },
                                "allowPrimitiveModules": {
                                    "type": "boolean"
                                },
                                "allowRequire": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`."
        },
        "NoCompareNegZeroRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow comparing against -0."
        },
        "NoComputedPropertiesInDataRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow accessing computed properties in `data`."
        },
        "NoCondAssignOption": {
            "description": "Option.",
            "enum": [
                "always",
                "except-parens"
            ],
            "type": "string"
        },
        "NoCondAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoCondAssignOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assignment operators in conditional expressions."
        },
        "NoConditionalExpectRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow conditional expects."
        },
        "NoConditionalInTestRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow conditional tests."
        },
        "NoConditionalTestsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow conditional tests."
        },
        "NoConfusingArrowOption": {
            "description": "Option.",
            "properties": {
                "allowParens": {
                    "type": "boolean"
                },
                "onlyOneSimpleParam": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoConfusingArrowRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoConfusingArrowOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow arrow functions where they could be confused with comparisons."
        },
        "NoConfusingNonNullAssertionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow non-null assertion in locations that may be confusing."
        },
        "NoConfusingVoidExpressionOption": {
            "description": "Option.",
            "properties": {
                "ignoreArrowShorthand": {
                    "type": "boolean"
                },
                "ignoreVoidOperator": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoConfusingVoidExpressionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoConfusingVoidExpressionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require expressions of type void to appear in statement position."
        },
        "NoConsoleOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoConsoleOption$1": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoConsoleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoConsoleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `console` in `<template>`."
        },
        "NoConsoleRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoConsoleOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `console`."
        },
        "NoConsoleSpacesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Do not use leading/trailing space between `console.log` parameters."
        },
        "NoConstAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow reassigning `const` variables."
        },
        "NoConstantBinaryExpressionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow expressions where the operation doesn't affect the value."
        },
        "NoConstantConditionOption": {
            "description": "Option.",
            "properties": {
                "checkLoops": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoConstantConditionOption$1": {
            "description": "Option.",
            "properties": {
                "checkLoops": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoConstantConditionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoConstantConditionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow constant expressions in conditions in `<template>`."
        },
        "NoConstantConditionRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoConstantConditionOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow constant expressions in conditions."
        },
        "NoConstructorReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow returning value from constructor."
        },
        "NoContinueRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `continue` statements."
        },
        "NoControlRegexRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow control characters in regular expressions."
        },
        "NoCustomModifiersOnVModelRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow custom modifiers on v-model used on the component."
        },
        "NoCycleOption": {
            "description": "Option.",
            "properties": {
                "allowUnsafeDynamicCyclicDependency": {
                    "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                    "type": "boolean"
                },
                "amd": {
                    "type": "boolean"
                },
                "commonjs": {
                    "type": "boolean"
                },
                "esmodule": {
                    "type": "boolean"
                },
                "ignore": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                "ignoreExternal": {
                    "description": "ignore external modules",
                    "type": "boolean"
                },
                "maxDepth": {
                    "anyOf": [
                        {
                            "const": "∞",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NoCycleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoCycleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid a module from importing a module with a dependency path back to itself."
        },
        "NoDebuggerRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `debugger`."
        },
        "NoDefaultExportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid default exports."
        },
        "NoDeleteVarRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow deleting variables."
        },
        "NoDeprecatedApiOption$1": {
            "description": "Option.",
            "properties": {
                "ignoreGlobalItems": {
                    "items": {
                        "enum": [
                            "Buffer()",
                            "COUNTER_HTTP_CLIENT_REQUEST",
                            "COUNTER_HTTP_CLIENT_RESPONSE",
                            "COUNTER_HTTP_SERVER_REQUEST",
                            "COUNTER_HTTP_SERVER_RESPONSE",
                            "COUNTER_NET_SERVER_CONNECTION",
                            "COUNTER_NET_SERVER_CONNECTION_CLOSE",
                            "GLOBAL",
                            "Intl.v8BreakIterator",
                            "new Buffer()",
                            "process.EventEmitter",
                            "process.assert",
                            "process.binding",
                            "process.env.NODE_REPL_HISTORY_FILE",
                            "process.report.triggerReport",
                            "require.extensions",
                            "root"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignoreIndirectDependencies": {
                    "type": "boolean"
                },
                "ignoreModuleItems": {
                    "items": {
                        "enum": [
                            "_linklist",
                            "_stream_wrap",
                            "async_hooks.currentId",
                            "async_hooks.triggerId",
                            "buffer.Buffer()",
                            "buffer.SlowBuffer",
                            "constants",
                            "crypto.Credentials",
                            "crypto.DEFAULT_ENCODING",
                            "crypto._toBuf",
                            "crypto.createCipher",
                            "crypto.createCredentials",
                            "crypto.createDecipher",
                            "crypto.fips",
                            "crypto.prng",
                            "crypto.pseudoRandomBytes",
                            "crypto.rng",
                            "domain",
                            "events.EventEmitter.listenerCount",
                            "events.listenerCount",
                            "freelist",
                            "fs.SyncWriteStream",
                            "fs.exists",
                            "fs.lchmod",
                            "fs.lchmodSync",
                            "http.createClient",
                            "module.Module._debug",
                            "module.Module.createRequireFromPath",
                            "module.Module.requireRepl",
                            "module._debug",
                            "module.createRequireFromPath",
                            "module.requireRepl",
                            "net._setSimultaneousAccepts",
                            "new buffer.Buffer()",
                            "new safe-buffer.Buffer()",
                            "os.getNetworkInterfaces",
                            "os.tmpDir",
                            "path._makeLong",
                            "process.EventEmitter",
                            "process.assert",
                            "process.binding",
                            "process.env.NODE_REPL_HISTORY_FILE",
                            "process.report.triggerReport",
                            "punycode",
                            "readline.codePointAt",
                            "readline.getStringWidth",
                            "readline.isFullWidthCodePoint",
                            "readline.stripVTControlCharacters",
                            "safe-buffer.Buffer()",
                            "safe-buffer.SlowBuffer",
                            "sys",
                            "timers.enroll",
                            "timers.unenroll",
                            "tls.CleartextStream",
                            "tls.CryptoStream",
                            "tls.SecurePair",
                            "tls.convertNPNProtocols",
                            "tls.createSecurePair",
                            "tls.parseCertString",
                            "tty.setRawMode",
                            "url.parse",
                            "url.resolve",
                            "util._extend",
                            "util.debug",
                            "util.error",
                            "util.isArray",
                            "util.isBoolean",
                            "util.isBuffer",
                            "util.isDate",
                            "util.isError",
                            "util.isFunction",
                            "util.isNull",
                            "util.isNullOrUndefined",
                            "util.isNumber",
                            "util.isObject",
                            "util.isPrimitive",
                            "util.isRegExp",
                            "util.isString",
                            "util.isSymbol",
                            "util.isUndefined",
                            "util.log",
                            "util.print",
                            "util.pump",
                            "util.puts",
                            "vm.runInDebugContext"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoDeprecatedApiRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDeprecatedApiOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow deprecated APIs."
        },
        "NoDeprecatedDataObjectDeclarationRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated object declaration on data (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedDestroyedLifecycleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated `destroyed` and `beforeDestroy` lifecycle hooks (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedDollarListenersApiRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated `$listeners` (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedDollarScopedslotsApiRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated `$scopedSlots` (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedEventsApiRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated events api (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedFilterRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated filters syntax (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedFunctionalTemplateRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated the `functional` template (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedHtmlElementIsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated the `is` attribute on HTML elements (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedInlineTemplateRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated `inline-template` attribute (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedModelDefinitionOption": {
            "description": "Option.",
            "properties": {
                "allowVue3Compat": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoDeprecatedModelDefinitionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDeprecatedModelDefinitionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow deprecated `model` definition (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedPropsDefaultThisRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow deprecated `this` access in props default function (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedRouterLinkTagPropOption": {
            "description": "Option.",
            "properties": {
                "components": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoDeprecatedRouterLinkTagPropRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDeprecatedRouterLinkTagPropOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated `tag` property on `RouterLink` (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid imported names marked with `@deprecated` documentation tag."
        },
        "NoDeprecatedScopeAttributeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow deprecated `scope` attribute (in Vue.js 2.5.0+)."
        },
        "NoDeprecatedSlotAttributeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow deprecated `slot` attribute (in Vue.js 2.6.0+)."
        },
        "NoDeprecatedSlotScopeAttributeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow deprecated `slot-scope` attribute (in Vue.js 2.6.0+)."
        },
        "NoDeprecatedVBindSyncRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of deprecated `.sync` modifier on `v-bind` directive (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedVIsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow deprecated `v-is` directive (in Vue.js 3.1.0+)."
        },
        "NoDeprecatedVOnNativeModifierRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated `.native` modifiers (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedVOnNumberModifiersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated number (keycode) modifiers (in Vue.js 3.0.0+)."
        },
        "NoDeprecatedVueConfigKeycodesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using deprecated `Vue.config.keyCodes` (in Vue.js 3.0.0+)."
        },
        "NoDisabledTestsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow disabled tests."
        },
        "NoDivRegexRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow equal signs explicitly at the beginning of regular expressions."
        },
        "NoDocumentCookieRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Do not use `document.cookie` directly."
        },
        "NoDoneCallbackRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using a callback in asynchronous tests and hooks."
        },
        "NoDupeArgsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate arguments in `function` definitions."
        },
        "NoDupeClassMembersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate class members."
        },
        "NoDupeClassMembersRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate class members."
        },
        "NoDupeElseIfRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate conditions in if-else-if chains."
        },
        "NoDupeKeysOption": {
            "description": "Option.",
            "properties": {
                "groups": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoDupeKeysRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDupeKeysOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplication of field names."
        },
        "NoDupeKeysRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate keys in object literals."
        },
        "NoDupeKeysRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate keys in object literals."
        },
        "NoDupeVElseIfRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate conditions in `v-if` / `v-else-if` chains."
        },
        "NoDuplicateAttrInheritanceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `inheritAttrs` to be set to `false` when using `v-bind=\"$attrs\"`."
        },
        "NoDuplicateAttributesOption": {
            "description": "Option.",
            "properties": {
                "allowCoexistClass": {
                    "type": "boolean"
                },
                "allowCoexistStyle": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoDuplicateAttributesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDuplicateAttributesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplication of attributes."
        },
        "NoDuplicateCaseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate case labels."
        },
        "NoDuplicateDisableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate `eslint-disable` comments."
        },
        "NoDuplicateEnumValuesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate enum member values."
        },
        "NoDuplicateHooksRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate hooks and teardown hooks."
        },
        "NoDuplicateImportsOption": {
            "description": "Option.",
            "properties": {
                "includeExports": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoDuplicateImportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDuplicateImportsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate module imports."
        },
        "NoDuplicateTypeConstituentsOption": {
            "description": "Option.",
            "properties": {
                "ignoreIntersections": {
                    "type": "boolean"
                },
                "ignoreUnions": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoDuplicateTypeConstituentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDuplicateTypeConstituentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow duplicate constituents of union or intersection types."
        },
        "NoDuplicatesOption": {
            "description": "Option.",
            "properties": {
                "considerQueryString": {
                    "type": "boolean"
                },
                "prefer-inline": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoDuplicatesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDuplicatesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid repeated import of the same module in multiple places."
        },
        "NoDynamicDeleteRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using the `delete` operator on computed key expressions."
        },
        "NoDynamicRequireOption": {
            "description": "Option.",
            "properties": {
                "esmodule": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoDynamicRequireRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoDynamicRequireOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid `require()` calls with expressions."
        },
        "NoElseReturnOption": {
            "description": "Option.",
            "properties": {
                "allowElseIf": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoElseReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoElseReturnOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `else` blocks after `return` statements in `if` statements."
        },
        "NoEmptyCharacterClassRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty character classes in regular expressions."
        },
        "NoEmptyComponentBlockRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the `<template>` `<script>` `<style>` block to be empty."
        },
        "NoEmptyDocumentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty document."
        },
        "NoEmptyFileRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty files."
        },
        "NoEmptyFunctionOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "enum": [
                            "arrowFunctions",
                            "asyncFunctions",
                            "asyncMethods",
                            "constructors",
                            "decoratedFunctions",
                            "functions",
                            "generatorFunctions",
                            "generatorMethods",
                            "getters",
                            "methods",
                            "overrideMethods",
                            "private-constructors",
                            "protected-constructors",
                            "setters"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoEmptyFunctionOption$1": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "enum": [
                            "arrowFunctions",
                            "asyncFunctions",
                            "asyncMethods",
                            "constructors",
                            "functions",
                            "generatorFunctions",
                            "generatorMethods",
                            "getters",
                            "methods",
                            "setters"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoEmptyFunctionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoEmptyFunctionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty functions."
        },
        "NoEmptyFunctionRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoEmptyFunctionOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty functions."
        },
        "NoEmptyInterfaceOption": {
            "description": "Option.",
            "properties": {
                "allowSingleExtends": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoEmptyInterfaceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoEmptyInterfaceOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the declaration of empty interfaces."
        },
        "NoEmptyKeyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty mapping keys."
        },
        "NoEmptyMappingValueRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty mapping values."
        },
        "NoEmptyNamedBlocksRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid empty named import blocks."
        },
        "NoEmptyOption": {
            "description": "Option.",
            "properties": {
                "allowEmptyCatch": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoEmptyPatternOption": {
            "description": "Option.",
            "properties": {
                "allowObjectPatternsAsParameters": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoEmptyPatternOption$1": {
            "description": "Option.",
            "properties": {
                "allowObjectPatternsAsParameters": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoEmptyPatternRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoEmptyPatternOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty destructuring patterns in `<template>`."
        },
        "NoEmptyPatternRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoEmptyPatternOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty destructuring patterns."
        },
        "NoEmptyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoEmptyOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty block statements."
        },
        "NoEmptySequenceEntryRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty sequence entries."
        },
        "NoEmptyStaticBlockRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty static blocks."
        },
        "NoEqNullRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `null` comparisons without type-checking operators."
        },
        "NoEscapeSequenceInIdentifierRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow escape sequences in identifiers."
        },
        "NoEvalOption": {
            "description": "Option.",
            "properties": {
                "allowIndirect": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoEvalRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoEvalOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `eval()`."
        },
        "NoExAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow reassigning exceptions in `catch` clauses."
        },
        "NoExplicitAnyOption": {
            "description": "Option.",
            "properties": {
                "fixToUnknown": {
                    "description": "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.",
                    "type": "boolean"
                },
                "ignoreRestArgs": {
                    "description": "Whether to ignore rest parameter arrays.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoExplicitAnyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoExplicitAnyOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the `any` type."
        },
        "NoExportInScriptSetupRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `export` in `<script setup>`."
        },
        "NoExportsAssignRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the assignment to `exports`."
        },
        "NoExposeAfterAwaitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow asynchronously registered `expose`."
        },
        "NoExtendNativeOption": {
            "description": "Option.",
            "properties": {
                "exceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoExtendNativeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoExtendNativeOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow extending native types."
        },
        "NoExtraBindRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary calls to `.bind()`."
        },
        "NoExtraBooleanCastOption": {
            "description": "Option.",
            "properties": {
                "enforceForLogicalOperands": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoExtraBooleanCastRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoExtraBooleanCastOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary boolean casts."
        },
        "NoExtraLabelRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary labels."
        },
        "NoExtraNonNullAssertionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow extra non-null assertions."
        },
        "NoExtraParensRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "functions",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "all",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "all",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "allowParensAfterCommentPattern": {
                                    "type": "string"
                                },
                                "conditionalAssign": {
                                    "type": "boolean"
                                },
                                "enforceForArrowConditionals": {
                                    "type": "boolean"
                                },
                                "enforceForFunctionPrototypeMethods": {
                                    "type": "boolean"
                                },
                                "enforceForNewInMemberExpressions": {
                                    "type": "boolean"
                                },
                                "enforceForSequenceExpressions": {
                                    "type": "boolean"
                                },
                                "ignoreJSX": {
                                    "enum": [
                                        "all",
                                        "multi-line",
                                        "none",
                                        "single-line"
                                    ],
                                    "type": "string"
                                },
                                "nestedBinaryExpressions": {
                                    "type": "boolean"
                                },
                                "returnAssign": {
                                    "type": "boolean"
                                },
                                "ternaryOperandBinaryExpressions": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary parentheses in `<template>`."
        },
        "NoExtraParensRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "functions",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "all",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "all",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "allowParensAfterCommentPattern": {
                                    "type": "string"
                                },
                                "conditionalAssign": {
                                    "type": "boolean"
                                },
                                "enforceForArrowConditionals": {
                                    "type": "boolean"
                                },
                                "enforceForFunctionPrototypeMethods": {
                                    "type": "boolean"
                                },
                                "enforceForNewInMemberExpressions": {
                                    "type": "boolean"
                                },
                                "enforceForSequenceExpressions": {
                                    "type": "boolean"
                                },
                                "ignoreJSX": {
                                    "enum": [
                                        "all",
                                        "multi-line",
                                        "none",
                                        "single-line"
                                    ],
                                    "type": "string"
                                },
                                "nestedBinaryExpressions": {
                                    "type": "boolean"
                                },
                                "returnAssign": {
                                    "type": "boolean"
                                },
                                "ternaryOperandBinaryExpressions": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary parentheses."
        },
        "NoExtraParensRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "functions",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "all",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "all",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "allowParensAfterCommentPattern": {
                                    "type": "string"
                                },
                                "conditionalAssign": {
                                    "type": "boolean"
                                },
                                "enforceForArrowConditionals": {
                                    "type": "boolean"
                                },
                                "enforceForFunctionPrototypeMethods": {
                                    "type": "boolean"
                                },
                                "enforceForNewInMemberExpressions": {
                                    "type": "boolean"
                                },
                                "enforceForSequenceExpressions": {
                                    "type": "boolean"
                                },
                                "ignoreJSX": {
                                    "enum": [
                                        "all",
                                        "multi-line",
                                        "none",
                                        "single-line"
                                    ],
                                    "type": "string"
                                },
                                "nestedBinaryExpressions": {
                                    "type": "boolean"
                                },
                                "returnAssign": {
                                    "type": "boolean"
                                },
                                "ternaryOperandBinaryExpressions": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary parentheses."
        },
        "NoExtraSemiRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary semicolons."
        },
        "NoExtraSemiRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary semicolons."
        },
        "NoExtraneousClassOption": {
            "description": "Option.",
            "properties": {
                "allowConstructorOnly": {
                    "description": "Whether to allow extraneous classes that contain only a constructor.",
                    "type": "boolean"
                },
                "allowEmpty": {
                    "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
                    "type": "boolean"
                },
                "allowStaticOnly": {
                    "description": "Whether to allow extraneous classes that only contain static members.",
                    "type": "boolean"
                },
                "allowWithDecorator": {
                    "description": "Whether to allow extraneous classes that include a decorator.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoExtraneousClassRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoExtraneousClassOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow classes used as namespaces."
        },
        "NoExtraneousDependenciesOption": {
            "description": "Option.",
            "properties": {
                "bundledDependencies": {
                    "anyOf": [
                        {
                            "items": {},
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "devDependencies": {
                    "anyOf": [
                        {
                            "items": {},
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "includeInternal": {
                    "type": "boolean"
                },
                "includeTypes": {
                    "type": "boolean"
                },
                "optionalDependencies": {
                    "anyOf": [
                        {
                            "items": {},
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "packageDir": {
                    "anyOf": [
                        {
                            "items": {},
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "peerDependencies": {
                    "anyOf": [
                        {
                            "items": {},
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NoExtraneousDependenciesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoExtraneousDependenciesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid the use of extraneous packages."
        },
        "NoExtraneousImportOption$1": {
            "description": "Option.",
            "properties": {
                "allowModules": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "convertPath": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "items": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            },
                            "type": "object"
                        },
                        {
                            "additionalItems": {
                                "properties": {
                                    "exclude": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "include": {
                                        "additionalItems": {
                                            "type": "string"
                                        },
                                        "items": [
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "replace": {
                                        "items": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "items": [
                                {
                                    "properties": {
                                        "exclude": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "include": {
                                            "additionalItems": {
                                                "type": "string"
                                            },
                                            "items": [
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "minItems": 1,
                                            "type": "array"
                                        },
                                        "replace": {
                                            "items": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    ]
                },
                "resolvePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoExtraneousImportRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoExtraneousImportOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `import` declarations which import extraneous modules."
        },
        "NoExtraneousRequireOption$1": {
            "description": "Option.",
            "properties": {
                "allowModules": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "convertPath": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "items": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            },
                            "type": "object"
                        },
                        {
                            "additionalItems": {
                                "properties": {
                                    "exclude": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "include": {
                                        "additionalItems": {
                                            "type": "string"
                                        },
                                        "items": [
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "replace": {
                                        "items": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "items": [
                                {
                                    "properties": {
                                        "exclude": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "include": {
                                            "additionalItems": {
                                                "type": "string"
                                            },
                                            "items": [
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "minItems": 1,
                                            "type": "array"
                                        },
                                        "replace": {
                                            "items": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    ]
                },
                "resolvePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tryExtensions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoExtraneousRequireRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoExtraneousRequireOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `require()` expressions which import extraneous modules."
        },
        "NoFallthroughOption": {
            "description": "Option.",
            "properties": {
                "allowEmptyCase": {
                    "type": "boolean"
                },
                "commentPattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoFallthroughRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoFallthroughOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow fallthrough of `case` statements."
        },
        "NoFloatingDecimalRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow leading or trailing decimal points in numeric literals."
        },
        "NoFloatingDecimalRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow leading or trailing decimal points in numeric literals."
        },
        "NoFloatingPromisesOption": {
            "description": "Option.",
            "properties": {
                "ignoreIIFE": {
                    "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
                    "type": "boolean"
                },
                "ignoreVoid": {
                    "description": "Whether to ignore `void` expressions.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoFloatingPromisesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoFloatingPromisesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require Promise-like statements to be handled appropriately."
        },
        "NoFnReferenceInIteratorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "NoFocusedTestsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow focused tests."
        },
        "NoForInArrayRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow iterating over an array with a for-in loop."
        },
        "NoForLoopRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Do not use a `for` loop that can be replaced with a `for-of` loop."
        },
        "NoFuncAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow reassigning `function` declarations."
        },
        "NoGlobalAssignOption": {
            "description": "Option.",
            "properties": {
                "exceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoGlobalAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoGlobalAssignOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assignments to native objects or read-only global variables."
        },
        "NoHexEscapeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes."
        },
        "NoHexadecimalNumericLiteralsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow hexadecimal numeric literals."
        },
        "NoHideCoreModulesOption$1": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "enum": [
                            "assert",
                            "buffer",
                            "child_process",
                            "cluster",
                            "console",
                            "constants",
                            "crypto",
                            "dgram",
                            "dns",
                            "events",
                            "fs",
                            "http",
                            "https",
                            "module",
                            "net",
                            "os",
                            "path",
                            "querystring",
                            "readline",
                            "repl",
                            "stream",
                            "string_decoder",
                            "timers",
                            "tls",
                            "tty",
                            "url",
                            "util",
                            "vm",
                            "zlib"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignoreDirectDependencies": {
                    "type": "boolean"
                },
                "ignoreIndirectDependencies": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoHideCoreModulesRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoHideCoreModulesOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow third-party modules which are hiding core modules."
        },
        "NoHooksOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoHooksRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoHooksOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow setup and teardown hooks."
        },
        "NoIdenticalTitleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow identical titles."
        },
        "NoImplicitCoercionOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "enum": [
                            "!!",
                            "*",
                            "+",
                            "~"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "boolean": {
                    "type": "boolean"
                },
                "disallowTemplateShorthand": {
                    "type": "boolean"
                },
                "number": {
                    "type": "boolean"
                },
                "string": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoImplicitCoercionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoImplicitCoercionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow shorthand type conversions."
        },
        "NoImplicitGlobalsOption": {
            "description": "Option.",
            "properties": {
                "lexicalBindings": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoImplicitGlobalsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoImplicitGlobalsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow declarations in the global scope."
        },
        "NoImpliedEvalRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `eval()`-like methods."
        },
        "NoImpliedEvalRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `eval()`-like methods."
        },
        "NoImportAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assigning to imported bindings."
        },
        "NoImportModuleExportsOption": {
            "description": "Option.",
            "properties": {
                "exceptions": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoImportModuleExportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoImportModuleExportsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid import statements with CommonJS module.exports."
        },
        "NoImportTypeSideEffectsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers."
        },
        "NoInferrableTypesOption": {
            "description": "Option.",
            "properties": {
                "ignoreParameters": {
                    "type": "boolean"
                },
                "ignoreProperties": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoInferrableTypesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoInferrableTypesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean."
        },
        "NoInfinityRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow Infinity."
        },
        "NoInlineCommentsOption": {
            "description": "Option.",
            "properties": {
                "ignorePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoInlineCommentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoInlineCommentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow inline comments after code."
        },
        "NoInnerDeclarationsOption": {
            "description": "Option.",
            "enum": [
                "both",
                "functions"
            ],
            "type": "string"
        },
        "NoInnerDeclarationsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoInnerDeclarationsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow variable or `function` declarations in nested blocks."
        },
        "NoInstanceofArrayRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `Array.isArray()` instead of `instanceof Array`."
        },
        "NoInternalModulesOption": {
            "anyOf": [
                {
                    "properties": {
                        "allow": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "forbid": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "NoInternalModulesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoInternalModulesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid importing the submodules of other modules."
        },
        "NoInterpolationInSnapshotsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow string interpolation in snapshots."
        },
        "NoInvalidModelKeysRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require valid keys in model option."
        },
        "NoInvalidRegexpOption": {
            "description": "Option.",
            "properties": {
                "allowConstructorFlags": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoInvalidRegexpRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoInvalidRegexpOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow invalid regular expression strings in `RegExp` constructors."
        },
        "NoInvalidRemoveEventListenerRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression."
        },
        "NoInvalidThisOption": {
            "description": "Option.",
            "properties": {
                "capIsConstructor": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoInvalidThisOption$1": {
            "description": "Option.",
            "properties": {
                "capIsConstructor": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoInvalidThisRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoInvalidThisOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `this` keywords outside of classes or class-like objects."
        },
        "NoInvalidThisRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoInvalidThisOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`."
        },
        "NoInvalidVoidTypeOption": {
            "description": "Option.",
            "properties": {
                "allowAsThisParameter": {
                    "type": "boolean"
                },
                "allowInGenericTypeArguments": {
                    "anyOf": [
                        {
                            "additionalItems": {
                                "type": "string"
                            },
                            "items": [
                                {
                                    "type": "string"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NoInvalidVoidTypeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoInvalidVoidTypeOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `void` type outside of generic or return types."
        },
        "NoIrregularWhitespaceOption": {
            "description": "Option.",
            "properties": {
                "skipComments": {
                    "type": "boolean"
                },
                "skipQuotedScalars": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoIrregularWhitespaceOption$1": {
            "description": "Option.",
            "properties": {
                "skipComments": {
                    "type": "boolean"
                },
                "skipHTMLAttributeValues": {
                    "type": "boolean"
                },
                "skipHTMLTextContents": {
                    "type": "boolean"
                },
                "skipRegExps": {
                    "type": "boolean"
                },
                "skipStrings": {
                    "type": "boolean"
                },
                "skipTemplates": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoIrregularWhitespaceOption$2": {
            "description": "Option.",
            "properties": {
                "skipComments": {
                    "type": "boolean"
                },
                "skipJSXText": {
                    "type": "boolean"
                },
                "skipRegExps": {
                    "type": "boolean"
                },
                "skipStrings": {
                    "type": "boolean"
                },
                "skipTemplates": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoIrregularWhitespaceOption$3": {
            "description": "Option.",
            "properties": {
                "skipComments": {
                    "type": "boolean"
                },
                "skipJSXText": {
                    "type": "boolean"
                },
                "skipRegExps": {
                    "type": "boolean"
                },
                "skipStrings": {
                    "type": "boolean"
                },
                "skipTemplates": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoIrregularWhitespaceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoIrregularWhitespaceOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow irregular whitespace."
        },
        "NoIrregularWhitespaceRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoIrregularWhitespaceOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow irregular whitespace in `.vue` files."
        },
        "NoIrregularWhitespaceRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoIrregularWhitespaceOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow irregular whitespace."
        },
        "NoIrregularWhitespaceRuleConfig$3": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoIrregularWhitespaceOption$3"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow irregular whitespace."
        },
        "NoIteratorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of the `__iterator__` property."
        },
        "NoKeywordPrefixOption": {
            "description": "Option.",
            "properties": {
                "checkProperties": {
                    "type": "boolean"
                },
                "disallowedPrefixes": {
                    "anyOf": [
                        {
                            "maxItems": 0,
                            "minItems": 0,
                            "type": "array"
                        },
                        {
                            "items": [
                                {
                                    "type": "string"
                                }
                            ],
                            "maxItems": 1,
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "minItems": 0
                },
                "onlyCamelCase": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoKeywordPrefixRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoKeywordPrefixOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow identifiers starting with `new` or `class`."
        },
        "NoLabelVarRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow labels that share a name with a variable."
        },
        "NoLabelsOption": {
            "description": "Option.",
            "properties": {
                "allowLoop": {
                    "type": "boolean"
                },
                "allowSwitch": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoLabelsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoLabelsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow labeled statements."
        },
        "NoLargeSnapshotsOption": {
            "description": "Option.",
            "properties": {
                "allowedSnapshots": {
                    "additionalProperties": {
                        "items": {},
                        "type": "array"
                    },
                    "type": "object"
                },
                "inlineMaxSize": {
                    "type": "number"
                },
                "maxSize": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "NoLargeSnapshotsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoLargeSnapshotsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow large snapshots."
        },
        "NoLifecycleAfterAwaitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow asynchronously registered lifecycle hooks."
        },
        "NoLoneBlocksRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary nested blocks."
        },
        "NoLoneTemplateOption": {
            "description": "Option.",
            "properties": {
                "ignoreAccessible": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoLoneTemplateRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoLoneTemplateOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary `<template>`."
        },
        "NoLonelyIfRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `if` statements as the only statement in `if` blocks without `else`."
        },
        "NoLonelyIfRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `if` statements as the only statement in `else` blocks."
        },
        "NoLoopFuncRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow function declarations that contain unsafe references inside loop statements."
        },
        "NoLoopFuncRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow function declarations that contain unsafe references inside loop statements."
        },
        "NoLossOfPrecisionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow literal numbers that lose precision in `<template>`."
        },
        "NoLossOfPrecisionRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow literal numbers that lose precision."
        },
        "NoLossOfPrecisionRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow literal numbers that lose precision."
        },
        "NoMagicNumbersOption": {
            "description": "Option.",
            "properties": {
                "detectObjects": {
                    "type": "boolean"
                },
                "enforceConst": {
                    "type": "boolean"
                },
                "ignore": {
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "ignoreArrayIndexes": {
                    "type": "boolean"
                },
                "ignoreClassFieldInitialValues": {
                    "type": "boolean"
                },
                "ignoreDefaultValues": {
                    "type": "boolean"
                },
                "ignoreEnums": {
                    "type": "boolean"
                },
                "ignoreNumericLiteralTypes": {
                    "type": "boolean"
                },
                "ignoreReadonlyClassProperties": {
                    "type": "boolean"
                },
                "ignoreTypeIndexes": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoMagicNumbersOption$1": {
            "description": "Option.",
            "properties": {
                "detectObjects": {
                    "type": "boolean"
                },
                "enforceConst": {
                    "type": "boolean"
                },
                "ignore": {
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "ignoreArrayIndexes": {
                    "type": "boolean"
                },
                "ignoreClassFieldInitialValues": {
                    "type": "boolean"
                },
                "ignoreDefaultValues": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoMagicNumbersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMagicNumbersOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow magic numbers."
        },
        "NoMagicNumbersRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMagicNumbersOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow magic numbers."
        },
        "NoMeaninglessVoidOperatorOption": {
            "description": "Option.",
            "properties": {
                "checkNever": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoMeaninglessVoidOperatorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMeaninglessVoidOperatorOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the `void` operator except when used to discard a value."
        },
        "NoMisleadingCharacterClassRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow characters which are made with multiple code points in character class syntax."
        },
        "NoMissingImportOption$1": {
            "description": "Option.",
            "properties": {
                "allowModules": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "resolvePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tsconfigPath": {
                    "type": "string"
                },
                "typescriptExtensionMap": {
                    "anyOf": [
                        {
                            "items": {
                                "items": {},
                                "type": "array"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "preserve",
                                "react",
                                "react-jsx",
                                "react-jsxdev",
                                "react-native"
                            ],
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NoMissingImportRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMissingImportOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `import` declarations which import non-existence modules."
        },
        "NoMissingRequireOption$1": {
            "description": "Option.",
            "properties": {
                "allowModules": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "resolvePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tryExtensions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tsconfigPath": {
                    "type": "string"
                },
                "typescriptExtensionMap": {
                    "anyOf": [
                        {
                            "items": {
                                "items": {},
                                "type": "array"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "preserve",
                                "react",
                                "react-jsx",
                                "react-jsxdev",
                                "react-native"
                            ],
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NoMissingRequireRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMissingRequireOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `require()` expressions which import non-existence modules."
        },
        "NoMisusedNewRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid definition of `new` and `constructor`."
        },
        "NoMisusedPromisesOption": {
            "description": "Option.",
            "properties": {
                "checksConditionals": {
                    "type": "boolean"
                },
                "checksSpreads": {
                    "type": "boolean"
                },
                "checksVoidReturn": {
                    "anyOf": [
                        {
                            "properties": {
                                "arguments": {
                                    "type": "boolean"
                                },
                                "attributes": {
                                    "type": "boolean"
                                },
                                "properties": {
                                    "type": "boolean"
                                },
                                "returns": {
                                    "type": "boolean"
                                },
                                "variables": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NoMisusedPromisesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMisusedPromisesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow Promises in places not designed to handle them."
        },
        "NoMixedEnumsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow enums from having both number and string members."
        },
        "NoMixedOperatorsOption": {
            "description": "Option.",
            "properties": {
                "allowSamePrecedence": {
                    "type": "boolean"
                },
                "groups": {
                    "items": {
                        "additionalItems": {
                            "enum": [
                                "!=",
                                "!==",
                                "%",
                                "&",
                                "&&",
                                "*",
                                "**",
                                "+",
                                "-",
                                "/",
                                "<",
                                "<<",
                                "<=",
                                "==",
                                "===",
                                ">",
                                ">=",
                                ">>",
                                ">>>",
                                "?:",
                                "??",
                                "^",
                                "in",
                                "instanceof",
                                "|",
                                "||",
                                "~"
                            ],
                            "type": "string"
                        },
                        "items": [
                            {
                                "enum": [
                                    "!=",
                                    "!==",
                                    "%",
                                    "&",
                                    "&&",
                                    "*",
                                    "**",
                                    "+",
                                    "-",
                                    "/",
                                    "<",
                                    "<<",
                                    "<=",
                                    "==",
                                    "===",
                                    ">",
                                    ">=",
                                    ">>",
                                    ">>>",
                                    "?:",
                                    "??",
                                    "^",
                                    "in",
                                    "instanceof",
                                    "|",
                                    "||",
                                    "~"
                                ],
                                "type": "string"
                            },
                            {
                                "enum": [
                                    "!=",
                                    "!==",
                                    "%",
                                    "&",
                                    "&&",
                                    "*",
                                    "**",
                                    "+",
                                    "-",
                                    "/",
                                    "<",
                                    "<<",
                                    "<=",
                                    "==",
                                    "===",
                                    ">",
                                    ">=",
                                    ">>",
                                    ">>>",
                                    "?:",
                                    "??",
                                    "^",
                                    "in",
                                    "instanceof",
                                    "|",
                                    "||",
                                    "~"
                                ],
                                "type": "string"
                            }
                        ],
                        "minItems": 2,
                        "type": "array"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoMixedOperatorsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMixedOperatorsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow mixed binary operators."
        },
        "NoMixedRequiresOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "allowCall": {
                            "type": "boolean"
                        },
                        "grouping": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "boolean"
                }
            ],
            "description": "Option."
        },
        "NoMixedRequiresOption$2": {
            "anyOf": [
                {
                    "properties": {
                        "allowCall": {
                            "type": "boolean"
                        },
                        "grouping": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "type": "boolean"
                }
            ],
            "description": "Option."
        },
        "NoMixedRequiresRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMixedRequiresOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `require` calls to be mixed with regular variable declarations."
        },
        "NoMixedRequiresRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMixedRequiresOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `require` calls to be mixed with regular variable declarations."
        },
        "NoMixedSpacesAndTabsOption": {
            "description": "Option.",
            "enum": [
                false,
                "smart-tabs",
                true
            ]
        },
        "NoMixedSpacesAndTabsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMixedSpacesAndTabsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow mixed spaces and tabs for indentation."
        },
        "NoMocksImportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow importing from __mocks__ directory."
        },
        "NoMultiAssignOption": {
            "description": "Option.",
            "properties": {
                "ignoreNonDeclaration": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoMultiAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMultiAssignOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of chained assignment expressions."
        },
        "NoMultiSpacesOption": {
            "description": "Option.",
            "properties": {
                "ignoreProperties": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoMultiSpacesOption$1": {
            "description": "Option.",
            "properties": {
                "exceptions": {
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "type": "object"
                },
                "ignoreEOLComments": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoMultiSpacesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMultiSpacesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow multiple spaces."
        },
        "NoMultiSpacesRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMultiSpacesOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow multiple spaces."
        },
        "NoMultiStrRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow multiline strings."
        },
        "NoMultiStrRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow multiline strings."
        },
        "NoMultipleEmptyLinesOption": {
            "description": "Option.",
            "properties": {
                "max": {
                    "type": "number"
                },
                "maxBOF": {
                    "type": "number"
                },
                "maxEOF": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "NoMultipleEmptyLinesOption$1": {
            "description": "Option.",
            "properties": {
                "max": {
                    "type": "number"
                },
                "maxBOF": {
                    "type": "number"
                },
                "maxEOF": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "NoMultipleEmptyLinesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMultipleEmptyLinesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow multiple empty lines."
        },
        "NoMultipleEmptyLinesRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMultipleEmptyLinesOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow multiple empty lines."
        },
        "NoMultipleObjectsInClassRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow to pass multiple objects into array to class."
        },
        "NoMultipleSlotArgsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow to pass multiple arguments to scoped slots."
        },
        "NoMultipleTemplateRootRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow adding multiple root nodes to the template."
        },
        "NoMutableExportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid the use of mutable exports with `var` or `let`."
        },
        "NoMutatingPropsOption": {
            "description": "Option.",
            "properties": {
                "shallowOnly": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoMutatingPropsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoMutatingPropsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow mutation of component props."
        },
        "NoNamedAsDefaultMemberRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid use of exported name as property of default export."
        },
        "NoNamedAsDefaultRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid use of exported name as identifier of default export."
        },
        "NoNamedDefaultRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid named default exports."
        },
        "NoNamedExportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid named exports."
        },
        "NoNamespaceOption": {
            "description": "Option.",
            "properties": {
                "allowDeclarations": {
                    "description": "Whether to allow `declare` with custom TypeScript namespaces.",
                    "type": "boolean"
                },
                "allowDefinitionFiles": {
                    "description": "Whether to allow `declare` with custom TypeScript namespaces inside definition files.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoNamespaceOption$1": {
            "additionalProperties": {},
            "description": "Option.",
            "properties": {
                "ignore": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoNamespaceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoNamespaceOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow TypeScript namespaces."
        },
        "NoNamespaceRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoNamespaceOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid namespace (a.k.a. \"wildcard\" `*`) imports."
        },
        "NoNanRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow NaN."
        },
        "NoNativeReassignOption": {
            "description": "Option.",
            "properties": {
                "exceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoNativeReassignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoNativeReassignOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assignments to native objects or read-only global variables."
        },
        "NoNegatedConditionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow negated conditions."
        },
        "NoNegatedConditionRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow negated conditions."
        },
        "NoNegatedInLhsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow negating the left operand in `in` expressions."
        },
        "NoNestedTernaryRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow nested ternary expressions."
        },
        "NoNestedTernaryRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow nested ternary expressions."
        },
        "NoNewArrayRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `new Array()`."
        },
        "NoNewBufferRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`."
        },
        "NoNewFuncRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `new` operators with the `Function` object."
        },
        "NoNewNativeNonconstructorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `new` operators with global non-constructor functions."
        },
        "NoNewObjectRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `Object` constructors."
        },
        "NoNewRequireRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `new` operators with calls to `require`."
        },
        "NoNewRequireRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `new` operators with calls to `require`."
        },
        "NoNewRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `new` operators outside of assignments or comparisons."
        },
        "NoNewSymbolRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `new` operators with the `Symbol` object."
        },
        "NoNewWrappersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects."
        },
        "NoNodejsModulesOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoNodejsModulesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoNodejsModulesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid Node.js builtin modules."
        },
        "NoNonNullAssertedNullishCoalescingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator."
        },
        "NoNonNullAssertedOptionalChainRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow non-null assertions after an optional chain expression."
        },
        "NoNonNullAssertionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow non-null assertions using the `!` postfix operator."
        },
        "NoNonoctalDecimalEscapeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `\\8` and `\\9` escape sequences in string literals."
        },
        "NoNullOption": {
            "description": "Option.",
            "properties": {
                "checkStrictEquality": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoNullRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoNullOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of the `null` literal."
        },
        "NoNumberPropsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow number property keys."
        },
        "NoNumericSeparatorsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow numeric separators."
        },
        "NoObjCallsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow calling global object properties as functions."
        },
        "NoObjectAsDefaultParameterRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of objects as default parameters."
        },
        "NoObjectConstructorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow calls to the `Object` constructor without an argument."
        },
        "NoOctalEscapeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow octal escape sequences in string literals."
        },
        "NoOctalEscapeRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow octal escape sequences in string literals."
        },
        "NoOctalNumericLiteralsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow octal numeric literals."
        },
        "NoOctalRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow legacy octal literals."
        },
        "NoOctalRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow octal literals."
        },
        "NoParamReassignOption": {
            "anyOf": [
                {
                    "properties": {
                        "props": {
                            "const": false,
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "ignorePropertyModificationsFor": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "ignorePropertyModificationsForRegex": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "props": {
                            "const": true,
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "NoParamReassignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoParamReassignOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow reassigning `function` parameters."
        },
        "NoParenthesizedRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow parentheses around the expression."
        },
        "NoParsingErrorOption$1": {
            "description": "Option.",
            "properties": {
                "abrupt-closing-of-empty-comment": {
                    "type": "boolean"
                },
                "absence-of-digits-in-numeric-character-reference": {
                    "type": "boolean"
                },
                "cdata-in-html-content": {
                    "type": "boolean"
                },
                "character-reference-outside-unicode-range": {
                    "type": "boolean"
                },
                "control-character-in-input-stream": {
                    "type": "boolean"
                },
                "control-character-reference": {
                    "type": "boolean"
                },
                "duplicate-attribute": {
                    "type": "boolean"
                },
                "end-tag-with-attributes": {
                    "type": "boolean"
                },
                "end-tag-with-trailing-solidus": {
                    "type": "boolean"
                },
                "eof-before-tag-name": {
                    "type": "boolean"
                },
                "eof-in-cdata": {
                    "type": "boolean"
                },
                "eof-in-comment": {
                    "type": "boolean"
                },
                "eof-in-tag": {
                    "type": "boolean"
                },
                "incorrectly-closed-comment": {
                    "type": "boolean"
                },
                "incorrectly-opened-comment": {
                    "type": "boolean"
                },
                "invalid-first-character-of-tag-name": {
                    "type": "boolean"
                },
                "missing-attribute-value": {
                    "type": "boolean"
                },
                "missing-end-tag-name": {
                    "type": "boolean"
                },
                "missing-semicolon-after-character-reference": {
                    "type": "boolean"
                },
                "missing-whitespace-between-attributes": {
                    "type": "boolean"
                },
                "nested-comment": {
                    "type": "boolean"
                },
                "non-void-html-element-start-tag-with-trailing-solidus": {
                    "type": "boolean"
                },
                "noncharacter-character-reference": {
                    "type": "boolean"
                },
                "noncharacter-in-input-stream": {
                    "type": "boolean"
                },
                "null-character-reference": {
                    "type": "boolean"
                },
                "surrogate-character-reference": {
                    "type": "boolean"
                },
                "surrogate-in-input-stream": {
                    "type": "boolean"
                },
                "unexpected-character-in-attribute-name": {
                    "type": "boolean"
                },
                "unexpected-character-in-unquoted-attribute-value": {
                    "type": "boolean"
                },
                "unexpected-equals-sign-before-attribute-name": {
                    "type": "boolean"
                },
                "unexpected-null-character": {
                    "type": "boolean"
                },
                "unexpected-question-mark-instead-of-tag-name": {
                    "type": "boolean"
                },
                "unexpected-solidus-in-tag": {
                    "type": "boolean"
                },
                "unknown-named-character-reference": {
                    "type": "boolean"
                },
                "x-invalid-end-tag": {
                    "type": "boolean"
                },
                "x-invalid-namespace": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoParsingErrorRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoParsingErrorOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow parsing errors in `<template>`."
        },
        "NoPathConcatRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow string concatenation with `__dirname` and `__filename`."
        },
        "NoPathConcatRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow string concatenation with `__dirname` and `__filename`."
        },
        "NoPlusSignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow plus sign."
        },
        "NoPlusplusOption": {
            "description": "Option.",
            "properties": {
                "allowForLoopAfterthoughts": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoPlusplusRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoPlusplusOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the unary operators `++` and `--`."
        },
        "NoPotentialComponentOptionTypoOption": {
            "description": "Option.",
            "properties": {
                "custom": {
                    "items": {
                        "type": "string"
                    },
                    "minItems": 0,
                    "type": "array"
                },
                "presets": {
                    "items": {
                        "enum": [
                            "all",
                            "nuxt",
                            "vue",
                            "vue-router"
                        ],
                        "type": "string"
                    },
                    "minItems": 0,
                    "type": "array"
                },
                "threshold": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "NoPotentialComponentOptionTypoRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoPotentialComponentOptionTypoOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow a potential typo in your component property."
        },
        "NoProcessEnvRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `process.env`."
        },
        "NoProcessEnvRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `process.env`."
        },
        "NoProcessExitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `process.exit()`."
        },
        "NoProcessExitRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `process.exit()`."
        },
        "NoProcessExitRuleConfig$3": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `process.exit()`."
        },
        "NoPromiseExecutorReturnOption": {
            "description": "Option.",
            "properties": {
                "allowVoid": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoPromiseExecutorReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoPromiseExecutorReturnOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow returning values from Promise executor functions."
        },
        "NoProtoRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of the `__proto__` property."
        },
        "NoPrototypeBuiltinsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow calling some `Object.prototype` methods directly on objects."
        },
        "NoRedeclareOption": {
            "description": "Option.",
            "properties": {
                "builtinGlobals": {
                    "type": "boolean"
                },
                "ignoreDeclarationMerge": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoRedeclareOption$1": {
            "description": "Option.",
            "properties": {
                "builtinGlobals": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoRedeclareRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRedeclareOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow variable redeclaration."
        },
        "NoRedeclareRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRedeclareOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow variable redeclaration."
        },
        "NoReduceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "NoRedundantTypeConstituentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow members of unions and intersections that do nothing or override type information."
        },
        "NoRefAsOperandRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of value wrapped by `ref()` (Composition API) as an operand."
        },
        "NoRefObjectDestructureRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow usages of ref objects that can lead to loss of reactivity."
        },
        "NoRefObjectReactivityLossRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow usages of ref objects that can lead to loss of reactivity."
        },
        "NoRegexSpacesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow multiple spaces in regular expressions."
        },
        "NoRegexpLiteralsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow RegExp literals."
        },
        "NoRelativePackagesOption": {
            "description": "Option.",
            "properties": {
                "amd": {
                    "type": "boolean"
                },
                "commonjs": {
                    "type": "boolean"
                },
                "esmodule": {
                    "type": "boolean"
                },
                "ignore": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoRelativePackagesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRelativePackagesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid importing packages through relative paths."
        },
        "NoRelativeParentImportsOption": {
            "description": "Option.",
            "properties": {
                "amd": {
                    "type": "boolean"
                },
                "commonjs": {
                    "type": "boolean"
                },
                "esmodule": {
                    "type": "boolean"
                },
                "ignore": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoRelativeParentImportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRelativeParentImportsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid importing modules from parent directories."
        },
        "NoRequireImportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow invocation of `require()`."
        },
        "NoRequiredPropWithDefaultOption": {
            "description": "Option.",
            "properties": {
                "autofix": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoRequiredPropWithDefaultRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRequiredPropWithDefaultOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce props with default values to be optional."
        },
        "NoReservedComponentNamesOption": {
            "description": "Option.",
            "properties": {
                "disallowVue3BuiltInComponents": {
                    "type": "boolean"
                },
                "disallowVueBuiltInComponents": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoReservedComponentNamesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoReservedComponentNamesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of reserved names in component definitions."
        },
        "NoReservedKeysOption": {
            "description": "Option.",
            "properties": {
                "groups": {
                    "items": {},
                    "type": "array"
                },
                "reserved": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoReservedKeysRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoReservedKeysOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow overwriting reserved keys."
        },
        "NoReservedPropsOption": {
            "description": "Option.",
            "properties": {
                "vueVersion": {
                    "enum": [
                        2,
                        3
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "NoReservedPropsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoReservedPropsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow reserved names in props."
        },
        "NoRestrictedBlockRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "element": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific block."
        },
        "NoRestrictedCallAfterAwaitRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "properties": {
                            "message": {
                                "type": "string"
                            },
                            "module": {
                                "type": "string"
                            },
                            "path": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow asynchronously called restricted methods."
        },
        "NoRestrictedClassRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific classes in Vue components."
        },
        "NoRestrictedComponentNamesRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "suggest": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific component names."
        },
        "NoRestrictedComponentOptionsRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "anyOf": [
                                            {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific component option."
        },
        "NoRestrictedCustomEventRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "event": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "suggest": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific custom event."
        },
        "NoRestrictedDisableRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `eslint-disable` comments about specific rules."
        },
        "NoRestrictedExportsOption": {
            "anyOf": [
                {
                    "properties": {
                        "restrictedNamedExports": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "restrictDefaultExports": {
                            "properties": {
                                "defaultFrom": {
                                    "type": "boolean"
                                },
                                "direct": {
                                    "type": "boolean"
                                },
                                "named": {
                                    "type": "boolean"
                                },
                                "namedFrom": {
                                    "type": "boolean"
                                },
                                "namespaceFrom": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "restrictedNamedExports": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "NoRestrictedExportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRestrictedExportsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified names in exports."
        },
        "NoRestrictedGlobalsRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified global variables."
        },
        "NoRestrictedHtmlElementsRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "element": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific HTML elements."
        },
        "NoRestrictedImportRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "description": "Option.",
                            "items": {
                                "anyOf": [
                                    {
                                        "properties": {
                                            "message": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "anyOf": [
                                                    {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified modules when loaded by `import` declarations."
        },
        "NoRestrictedImportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "allowTypeImports": {
                                        "description": "Disallow value imports, but allow type-only imports.",
                                        "type": "boolean"
                                    },
                                    "importNames": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "paths": {
                                    "items": {
                                        "anyOf": [
                                            {
                                                "properties": {
                                                    "allowTypeImports": {
                                                        "description": "Disallow value imports, but allow type-only imports.",
                                                        "type": "boolean"
                                                    },
                                                    "importNames": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                },
                                "patterns": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "items": {
                                                "properties": {
                                                    "allowTypeImports": {
                                                        "description": "Disallow value imports, but allow type-only imports.",
                                                        "type": "boolean"
                                                    },
                                                    "caseSensitive": {
                                                        "type": "boolean"
                                                    },
                                                    "group": {
                                                        "additionalItems": {
                                                            "type": "string"
                                                        },
                                                        "items": [
                                                            {
                                                                "type": "string"
                                                            }
                                                        ],
                                                        "minItems": 1,
                                                        "type": "array"
                                                    },
                                                    "importNames": {
                                                        "additionalItems": {
                                                            "type": "string"
                                                        },
                                                        "items": [
                                                            {
                                                                "type": "string"
                                                            }
                                                        ],
                                                        "minItems": 1,
                                                        "type": "array"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified modules when loaded by `import`."
        },
        "NoRestrictedImportsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "importNames": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "paths": {
                                    "items": {
                                        "anyOf": [
                                            {
                                                "properties": {
                                                    "importNames": {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                },
                                "patterns": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "items": {
                                                "properties": {
                                                    "caseSensitive": {
                                                        "type": "boolean"
                                                    },
                                                    "group": {
                                                        "additionalItems": {
                                                            "type": "string"
                                                        },
                                                        "items": [
                                                            {
                                                                "type": "string"
                                                            }
                                                        ],
                                                        "minItems": 1,
                                                        "type": "array"
                                                    },
                                                    "importNames": {
                                                        "additionalItems": {
                                                            "type": "string"
                                                        },
                                                        "items": [
                                                            {
                                                                "type": "string"
                                                            }
                                                        ],
                                                        "minItems": 1,
                                                        "type": "array"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified modules when loaded by `import`."
        },
        "NoRestrictedMatchersOption": {
            "additionalProperties": {
                "type": "string"
            },
            "description": "Option.",
            "type": "object"
        },
        "NoRestrictedMatchersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRestrictedMatchersOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of certain matchers."
        },
        "NoRestrictedModulesRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "additionalItems": {
                        "properties": {
                            "paths": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ]
                                },
                                "type": "array"
                            },
                            "patterns": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified modules when loaded by `require`."
        },
        "NoRestrictedPathsOption": {
            "description": "Option.",
            "properties": {
                "basePath": {
                    "type": "string"
                },
                "zones": {
                    "additionalItems": {
                        "properties": {
                            "except": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "from": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "message": {
                                "type": "string"
                            },
                            "target": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "properties": {
                                "except": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "from": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ]
                                },
                                "message": {
                                    "type": "string"
                                },
                                "target": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoRestrictedPathsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRestrictedPathsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce which files can be imported in a given folder."
        },
        "NoRestrictedPropertiesRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "object": {
                                        "type": "string"
                                    },
                                    "property": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "object": {
                                        "type": "string"
                                    },
                                    "property": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow certain properties on certain objects."
        },
        "NoRestrictedPropsRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "suggest": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific props."
        },
        "NoRestrictedRequireRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "description": "Option.",
                            "items": {
                                "anyOf": [
                                    {
                                        "properties": {
                                            "message": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "anyOf": [
                                                    {
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified modules when loaded by `require`."
        },
        "NoRestrictedStaticAttributeRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "element": {
                                        "type": "string"
                                    },
                                    "key": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "anyOf": [
                                            {
                                                "const": true,
                                                "type": "boolean"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific attribute."
        },
        "NoRestrictedSyntaxRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "selector": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified syntax in `<template>`."
        },
        "NoRestrictedSyntaxRuleConfig$2": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "message": {
                                        "type": "string"
                                    },
                                    "selector": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified syntax."
        },
        "NoRestrictedVBindRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "anyOf": [
                            {
                                "properties": {
                                    "argument": {
                                        "type": "string"
                                    },
                                    "element": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "modifiers": {
                                        "items": {
                                            "enum": [
                                                "attr",
                                                "camel",
                                                "prop",
                                                "sync"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific argument in `v-bind`."
        },
        "NoRestrictedViMethodsOption": {
            "additionalProperties": {
                "type": "string"
            },
            "description": "Option.",
            "type": "object"
        },
        "NoRestrictedViMethodsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoRestrictedViMethodsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specific `vi.` methods."
        },
        "NoReturnAssignOption": {
            "description": "Option.",
            "enum": [
                "always",
                "except-parens"
            ],
            "type": "string"
        },
        "NoReturnAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoReturnAssignOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assignment operators in `return` statements."
        },
        "NoReturnAwaitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary `return await`."
        },
        "NoRootVIfRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `v-if` directives on root element."
        },
        "NoScriptUrlRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `javascript:` urls."
        },
        "NoSelfAssignOption": {
            "description": "Option.",
            "properties": {
                "props": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoSelfAssignRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoSelfAssignOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assignments where both sides are exactly the same."
        },
        "NoSelfCompareRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow comparisons where both sides are exactly the same."
        },
        "NoSelfImportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid a module from importing itself."
        },
        "NoSequencesOption": {
            "description": "Option.",
            "properties": {
                "allowInParentheses": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoSequencesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoSequencesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow comma operators."
        },
        "NoSetterReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow returning values from setters."
        },
        "NoSetupPropsDestructureRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow usages that lose the reactivity of `props` passed to `setup`."
        },
        "NoSetupPropsReactivityLossRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow usages that lose the reactivity of `props` passed to `setup`."
        },
        "NoShadowOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "builtinGlobals": {
                    "type": "boolean"
                },
                "hoist": {
                    "enum": [
                        "all",
                        "functions",
                        "never"
                    ],
                    "type": "string"
                },
                "ignoreFunctionTypeParameterNameValueShadow": {
                    "type": "boolean"
                },
                "ignoreOnInitialization": {
                    "type": "boolean"
                },
                "ignoreTypeValueShadow": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoShadowOption$1": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "builtinGlobals": {
                    "type": "boolean"
                },
                "hoist": {
                    "enum": [
                        "all",
                        "functions",
                        "never"
                    ],
                    "type": "string"
                },
                "ignoreOnInitialization": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoShadowRestrictedNamesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow identifiers from shadowing restricted names."
        },
        "NoShadowRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoShadowOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow variable declarations from shadowing variables declared in the outer scope."
        },
        "NoShadowRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoShadowOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow variable declarations from shadowing variables declared in the outer scope."
        },
        "NoSharedComponentDataRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce component's data property to be a function."
        },
        "NoSideEffectsInComputedPropertiesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow side effects in computed properties."
        },
        "NoSpacedFuncRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow spacing between function identifiers and their applications (deprecated)."
        },
        "NoSpacesAroundEqualSignsInAttributeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow spaces around equal signs in attribute."
        },
        "NoSparseArraysRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow sparse arrays in `<template>`."
        },
        "NoSparseArraysRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow sparse arrays."
        },
        "NoSparseArraysRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow sparse arrays."
        },
        "NoStandaloneExpectOption": {
            "description": "Option.",
            "properties": {
                "additionalTestBlockFunctions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoStandaloneExpectRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoStandaloneExpectOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using `expect` outside of `it` or `test` blocks."
        },
        "NoStaticInlineStylesOption": {
            "description": "Option.",
            "properties": {
                "allowBinding": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoStaticInlineStylesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoStaticInlineStylesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow static inline `style` attributes."
        },
        "NoStaticOnlyClassRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow classes that only have static members."
        },
        "NoSyncOption$1": {
            "description": "Option.",
            "properties": {
                "allowAtRootLevel": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoSyncOption$2": {
            "description": "Option.",
            "properties": {
                "allowAtRootLevel": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoSyncRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoSyncOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow synchronous methods."
        },
        "NoSyncRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoSyncOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow synchronous methods."
        },
        "NoTabIndentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow tabs for indentation."
        },
        "NoTabsOption": {
            "description": "Option.",
            "properties": {
                "allowIndentationTabs": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoTabsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoTabsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow all tabs."
        },
        "NoTemplateCurlyInStringRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow template literal placeholder syntax in regular strings."
        },
        "NoTemplateKeyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `key` attribute on `<template>`."
        },
        "NoTemplateLiteralsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow template literals."
        },
        "NoTemplateShadowRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow variable declarations from shadowing variables declared in the outer scope."
        },
        "NoTemplateTargetBlankOption": {
            "description": "Option.",
            "properties": {
                "allowReferrer": {
                    "type": "boolean"
                },
                "enforceDynamicLinks": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoTemplateTargetBlankRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoTemplateTargetBlankOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow target=\"_blank\" attribute without rel=\"noopener noreferrer\"."
        },
        "NoTernaryRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow ternary operators."
        },
        "NoTestPrefixesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using `test` as a prefix."
        },
        "NoTestReturnStatementRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow return statements in tests."
        },
        "NoTextareaMustacheRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow mustaches in `<textarea>`."
        },
        "NoThenableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `then` property."
        },
        "NoThisAliasOption": {
            "description": "Option.",
            "properties": {
                "allowDestructuring": {
                    "description": "Whether to ignore destructurings, such as `const { props, state } = this`.",
                    "type": "boolean"
                },
                "allowedNames": {
                    "description": "Names to ignore, such as [\"self\"] for `const self = this;`.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoThisAliasRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoThisAliasOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow aliasing `this`."
        },
        "NoThisAssignmentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assigning `this` to a variable."
        },
        "NoThisBeforeSuperRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `this`/`super` before calling `super()` in constructors."
        },
        "NoThisInBeforeRouteEnterRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `this` usage in a `beforeRouteEnter` method."
        },
        "NoThrowLiteralOption": {
            "description": "Option.",
            "properties": {
                "allowThrowingAny": {
                    "type": "boolean"
                },
                "allowThrowingUnknown": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoThrowLiteralRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoThrowLiteralOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow throwing literals as exceptions."
        },
        "NoThrowLiteralRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow throwing literals as exceptions."
        },
        "NoTrailingSpacesOption": {
            "description": "Option.",
            "properties": {
                "ignoreComments": {
                    "type": "boolean"
                },
                "skipBlankLines": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoTrailingSpacesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoTrailingSpacesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow trailing whitespace at the end of lines."
        },
        "NoTrailingZerosRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow trailing zeros for floats."
        },
        "NoTypeAliasOption": {
            "description": "Option.",
            "properties": {
                "allowAliases": {
                    "description": "Whether to allow direct one-to-one type aliases.",
                    "enum": [
                        "always",
                        "in-intersections",
                        "in-unions",
                        "in-unions-and-intersections",
                        "never"
                    ],
                    "type": "string"
                },
                "allowCallbacks": {
                    "description": "Whether to allow type aliases for callbacks.",
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "allowConditionalTypes": {
                    "description": "Whether to allow type aliases for conditional types.",
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "allowConstructors": {
                    "description": "Whether to allow type aliases with constructors.",
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "allowGenerics": {
                    "description": "Whether to allow type aliases with generic types.",
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "allowLiterals": {
                    "description": "Whether to allow type aliases with object literal types.",
                    "enum": [
                        "always",
                        "in-intersections",
                        "in-unions",
                        "in-unions-and-intersections",
                        "never"
                    ],
                    "type": "string"
                },
                "allowMappedTypes": {
                    "description": "Whether to allow type aliases with mapped types.",
                    "enum": [
                        "always",
                        "in-intersections",
                        "in-unions",
                        "in-unions-and-intersections",
                        "never"
                    ],
                    "type": "string"
                },
                "allowTupleTypes": {
                    "description": "Whether to allow type aliases with tuple types.",
                    "enum": [
                        "always",
                        "in-intersections",
                        "in-unions",
                        "in-unions-and-intersections",
                        "never"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoTypeAliasRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoTypeAliasOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow type aliases."
        },
        "NoTypeofUndefinedOption": {
            "description": "Option.",
            "properties": {
                "checkGlobalVariables": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoTypeofUndefinedRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoTypeofUndefinedOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow comparing `undefined` using `typeof`."
        },
        "NoUnassignedImportOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "devDependencies": {
                    "anyOf": [
                        {
                            "items": {},
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "optionalDependencies": {
                    "anyOf": [
                        {
                            "items": {},
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "peerDependencies": {
                    "anyOf": [
                        {
                            "items": {},
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NoUnassignedImportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnassignedImportOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid unassigned imports."
        },
        "NoUndefComponentsOption": {
            "description": "Option.",
            "properties": {
                "ignorePatterns": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUndefComponentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUndefComponentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of undefined components in `<template>`."
        },
        "NoUndefInitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow initializing variables to `undefined`."
        },
        "NoUndefOption": {
            "description": "Option.",
            "properties": {
                "typeof": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUndefPropertiesOption": {
            "description": "Option.",
            "properties": {
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUndefPropertiesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUndefPropertiesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow undefined properties."
        },
        "NoUndefRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUndefOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of undeclared variables unless mentioned in `/*global ` comments."
        },
        "NoUndefinedRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `undefined` as an identifier."
        },
        "NoUndefinedValueRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `undefined`."
        },
        "NoUnderscoreDangleOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "allowAfterSuper": {
                    "type": "boolean"
                },
                "allowAfterThis": {
                    "type": "boolean"
                },
                "allowAfterThisConstructor": {
                    "type": "boolean"
                },
                "allowFunctionParams": {
                    "type": "boolean"
                },
                "allowInArrayDestructuring": {
                    "type": "boolean"
                },
                "allowInObjectDestructuring": {
                    "type": "boolean"
                },
                "enforceInClassFields": {
                    "type": "boolean"
                },
                "enforceInMethodNames": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnderscoreDangleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnderscoreDangleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow dangling underscores in identifiers."
        },
        "NoUnexpectedMultilineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow confusing multiline expressions."
        },
        "NoUnicodeCodepointEscapesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow Unicode code point escape sequences."
        },
        "NoUnlimitedDisableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `eslint-disable` comments without rule names."
        },
        "NoUnmodifiedLoopConditionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unmodified loop conditions."
        },
        "NoUnnecessaryAwaitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow awaiting non-promise values."
        },
        "NoUnnecessaryBooleanLiteralCompareOption": {
            "description": "Option.",
            "properties": {
                "allowComparingNullableBooleansToFalse": {
                    "description": "Whether to allow comparisons between nullable boolean variables and `false`.",
                    "type": "boolean"
                },
                "allowComparingNullableBooleansToTrue": {
                    "description": "Whether to allow comparisons between nullable boolean variables and `true`.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnnecessaryBooleanLiteralCompareRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnnecessaryBooleanLiteralCompareOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary equality comparisons against boolean literals."
        },
        "NoUnnecessaryConditionOption": {
            "description": "Option.",
            "properties": {
                "allowConstantLoopConditions": {
                    "description": "Whether to ignore constant loop conditions, such as `while (true)`.",
                    "type": "boolean"
                },
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                    "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnnecessaryConditionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnnecessaryConditionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow conditionals where the type is always truthy or always falsy."
        },
        "NoUnnecessaryQualifierRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary namespace qualifiers."
        },
        "NoUnnecessaryTypeArgumentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow type arguments that are equal to the default."
        },
        "NoUnnecessaryTypeAssertionOption": {
            "description": "Option.",
            "properties": {
                "typesToIgnore": {
                    "description": "A list of type names to ignore.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUnnecessaryTypeAssertionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnnecessaryTypeAssertionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow type assertions that do not change the type of an expression."
        },
        "NoUnnecessaryTypeConstraintRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary constraints on generic types."
        },
        "NoUnneededTernaryOption": {
            "description": "Option.",
            "properties": {
                "defaultAssignment": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnneededTernaryRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnneededTernaryOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow ternary operators when simpler alternatives exist."
        },
        "NoUnpublishedBinOption$1": {
            "additionalProperties": {},
            "description": "Option.",
            "properties": {
                "convertPath": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "items": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            },
                            "type": "object"
                        },
                        {
                            "additionalItems": {
                                "properties": {
                                    "exclude": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "include": {
                                        "additionalItems": {
                                            "type": "string"
                                        },
                                        "items": [
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "replace": {
                                        "items": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "items": [
                                {
                                    "properties": {
                                        "exclude": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "include": {
                                            "additionalItems": {
                                                "type": "string"
                                            },
                                            "items": [
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "minItems": 1,
                                            "type": "array"
                                        },
                                        "replace": {
                                            "items": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "NoUnpublishedBinRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnpublishedBinOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `bin` files that npm ignores."
        },
        "NoUnpublishedImportOption$1": {
            "description": "Option.",
            "properties": {
                "allowModules": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "convertPath": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "items": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            },
                            "type": "object"
                        },
                        {
                            "additionalItems": {
                                "properties": {
                                    "exclude": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "include": {
                                        "additionalItems": {
                                            "type": "string"
                                        },
                                        "items": [
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "replace": {
                                        "items": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "items": [
                                {
                                    "properties": {
                                        "exclude": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "include": {
                                            "additionalItems": {
                                                "type": "string"
                                            },
                                            "items": [
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "minItems": 1,
                                            "type": "array"
                                        },
                                        "replace": {
                                            "items": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    ]
                },
                "ignoreTypeImport": {
                    "type": "boolean"
                },
                "resolvePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUnpublishedImportRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnpublishedImportOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `import` declarations which import private modules."
        },
        "NoUnpublishedRequireOption$1": {
            "description": "Option.",
            "properties": {
                "allowModules": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "convertPath": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "items": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            },
                            "type": "object"
                        },
                        {
                            "additionalItems": {
                                "properties": {
                                    "exclude": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "include": {
                                        "additionalItems": {
                                            "type": "string"
                                        },
                                        "items": [
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "replace": {
                                        "items": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "items": [
                                {
                                    "properties": {
                                        "exclude": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "include": {
                                            "additionalItems": {
                                                "type": "string"
                                            },
                                            "items": [
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "minItems": 1,
                                            "type": "array"
                                        },
                                        "replace": {
                                            "items": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    ]
                },
                "resolvePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tryExtensions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUnpublishedRequireRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnpublishedRequireOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `require()` expressions which import private modules."
        },
        "NoUnreachableLoopOption": {
            "description": "Option.",
            "properties": {
                "ignore": {
                    "items": {
                        "enum": [
                            "DoWhileStatement",
                            "ForInStatement",
                            "ForOfStatement",
                            "ForStatement",
                            "WhileStatement"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUnreachableLoopRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnreachableLoopOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow loops with a body that allows only one iteration."
        },
        "NoUnreachableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements."
        },
        "NoUnreadableArrayDestructuringRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unreadable array destructuring."
        },
        "NoUnreadableIifeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unreadable IIFEs."
        },
        "NoUnresolvedOption": {
            "description": "Option.",
            "properties": {
                "amd": {
                    "type": "boolean"
                },
                "caseSensitive": {
                    "type": "boolean"
                },
                "caseSensitiveStrict": {
                    "type": "boolean"
                },
                "commonjs": {
                    "type": "boolean"
                },
                "esmodule": {
                    "type": "boolean"
                },
                "ignore": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUnresolvedRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnresolvedOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Ensure imports point to a file/module that can be resolved."
        },
        "NoUnsafeArgumentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow calling a function with a value with type `any`."
        },
        "NoUnsafeAssignmentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assigning a value with type `any` to variables and properties."
        },
        "NoUnsafeCallRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow calling a value with type `any`."
        },
        "NoUnsafeDeclarationMergingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unsafe declaration merging."
        },
        "NoUnsafeEnumComparisonRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow comparing an enum value with a non-enum value."
        },
        "NoUnsafeFinallyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow control flow statements in `finally` blocks."
        },
        "NoUnsafeMemberAccessRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow member access on a value with type `any`."
        },
        "NoUnsafeNegationOption": {
            "description": "Option.",
            "properties": {
                "enforceForOrderingRelations": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnsafeNegationRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnsafeNegationOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow negating the left operand of relational operators."
        },
        "NoUnsafeOptionalChainingOption": {
            "description": "Option.",
            "properties": {
                "disallowArithmeticOperators": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnsafeOptionalChainingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnsafeOptionalChainingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed."
        },
        "NoUnsafeRegexRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "NoUnsafeReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow returning a value with type `any` from a function."
        },
        "NoUnsupportedFeaturesEsBuiltinsOption$1": {
            "description": "Option.",
            "properties": {
                "ignores": {
                    "items": {
                        "enum": [
                            "Array.from",
                            "Array.of",
                            "Atomics",
                            "BigInt",
                            "BigInt64Array",
                            "BigUint64Array",
                            "DataView",
                            "Float32Array",
                            "Float64Array",
                            "Int16Array",
                            "Int32Array",
                            "Int8Array",
                            "Map",
                            "Math.acosh",
                            "Math.asinh",
                            "Math.atanh",
                            "Math.cbrt",
                            "Math.clz32",
                            "Math.cosh",
                            "Math.expm1",
                            "Math.fround",
                            "Math.hypot",
                            "Math.imul",
                            "Math.log10",
                            "Math.log1p",
                            "Math.log2",
                            "Math.sign",
                            "Math.sinh",
                            "Math.tanh",
                            "Math.trunc",
                            "Number.EPSILON",
                            "Number.MAX_SAFE_INTEGER",
                            "Number.MIN_SAFE_INTEGER",
                            "Number.isFinite",
                            "Number.isInteger",
                            "Number.isNaN",
                            "Number.isSafeInteger",
                            "Number.parseFloat",
                            "Number.parseInt",
                            "Object.assign",
                            "Object.entries",
                            "Object.fromEntries",
                            "Object.getOwnPropertyDescriptors",
                            "Object.getOwnPropertySymbols",
                            "Object.is",
                            "Object.setPrototypeOf",
                            "Object.values",
                            "Promise",
                            "Promise.allSettled",
                            "Proxy",
                            "Reflect",
                            "Set",
                            "SharedArrayBuffer",
                            "String.fromCodePoint",
                            "String.raw",
                            "Symbol",
                            "Uint16Array",
                            "Uint32Array",
                            "Uint8Array",
                            "Uint8ClampedArray",
                            "WeakMap",
                            "WeakSet",
                            "globalThis"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoUnsupportedFeaturesEsBuiltinsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnsupportedFeaturesEsBuiltinsOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unsupported ECMAScript built-ins on the specified version."
        },
        "NoUnsupportedFeaturesEsSyntaxOption$1": {
            "description": "Option.",
            "properties": {
                "ignores": {
                    "items": {
                        "enum": [
                            "arrowFunctions",
                            "asyncFunctions",
                            "asyncIteration",
                            "bigint",
                            "binaryNumericLiterals",
                            "blockScopedFunctions",
                            "blockScopedVariables",
                            "classes",
                            "computedProperties",
                            "defaultParameters",
                            "destructuring",
                            "dynamicImport",
                            "exponentialOperators",
                            "forOfLoops",
                            "generators",
                            "jsonSuperset",
                            "malformedTemplateLiterals",
                            "modules",
                            "new.target",
                            "nullishCoalescingOperators",
                            "objectSuperProperties",
                            "octalNumericLiterals",
                            "optionalCatchBinding",
                            "optionalChaining",
                            "propertyShorthands",
                            "regexpLookbehind",
                            "regexpNamedCaptureGroups",
                            "regexpS",
                            "regexpU",
                            "regexpUnicodeProperties",
                            "regexpY",
                            "restParameters",
                            "restSpreadProperties",
                            "spreadElements",
                            "templateLiterals",
                            "trailingCommasInFunctions",
                            "unicodeCodePointEscapes"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoUnsupportedFeaturesEsSyntaxRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnsupportedFeaturesEsSyntaxOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unsupported ECMAScript syntax on the specified version."
        },
        "NoUnsupportedFeaturesNodeBuiltinsOption$1": {
            "description": "Option.",
            "properties": {
                "ignores": {
                    "items": {
                        "enum": [
                            "Buffer.alloc",
                            "Buffer.allocUnsafe",
                            "Buffer.allocUnsafeSlow",
                            "Buffer.from",
                            "TextDecoder",
                            "TextEncoder",
                            "URL",
                            "URLSearchParams",
                            "assert.CallTracker",
                            "assert.deepStrictEqual",
                            "assert.doesNotReject",
                            "assert.notDeepStrictEqual",
                            "assert.rejects",
                            "assert.strict",
                            "assert.strict.doesNotReject",
                            "assert.strict.rejects",
                            "async_hooks",
                            "async_hooks.AsyncLocalStorage",
                            "async_hooks.createHook",
                            "buffer.Blob",
                            "buffer.Buffer.alloc",
                            "buffer.Buffer.allocUnsafe",
                            "buffer.Buffer.allocUnsafeSlow",
                            "buffer.Buffer.from",
                            "buffer.constants",
                            "buffer.kMaxLength",
                            "buffer.transcode",
                            "child_process.ChildProcess",
                            "console.clear",
                            "console.count",
                            "console.countReset",
                            "console.debug",
                            "console.dirxml",
                            "console.group",
                            "console.groupCollapsed",
                            "console.groupEnd",
                            "console.markTimeline",
                            "console.profile",
                            "console.profileEnd",
                            "console.table",
                            "console.timeLog",
                            "console.timeStamp",
                            "console.timeline",
                            "console.timelineEnd",
                            "crypto.Certificate.exportChallenge",
                            "crypto.Certificate.exportPublicKey",
                            "crypto.Certificate.verifySpkac",
                            "crypto.ECDH",
                            "crypto.KeyObject",
                            "crypto.constants",
                            "crypto.createPrivateKey",
                            "crypto.createPublicKey",
                            "crypto.createSecretKey",
                            "crypto.fips",
                            "crypto.generateKeyPair",
                            "crypto.generateKeyPairSync",
                            "crypto.getCurves",
                            "crypto.getFips",
                            "crypto.privateEncrypt",
                            "crypto.publicDecrypt",
                            "crypto.randomFill",
                            "crypto.randomFillSync",
                            "crypto.scrypt",
                            "crypto.scryptSync",
                            "crypto.setFips",
                            "crypto.sign",
                            "crypto.timingSafeEqual",
                            "crypto.verify",
                            "dns.Resolver",
                            "dns.promises",
                            "dns.resolvePtr",
                            "events.EventEmitter.once",
                            "events.once",
                            "fs.Dir",
                            "fs.Dirent",
                            "fs.StatWatcher",
                            "fs.copyFile",
                            "fs.copyFileSync",
                            "fs.lutimes",
                            "fs.lutimesSync",
                            "fs.mkdtemp",
                            "fs.mkdtempSync",
                            "fs.opendir",
                            "fs.opendirSync",
                            "fs.promises",
                            "fs.read",
                            "fs.readSync",
                            "fs.readv",
                            "fs.readvSync",
                            "fs.realpath.native",
                            "fs.realpathSync.native",
                            "fs.rm",
                            "fs.rmSync",
                            "fs.writev",
                            "fs.writevSync",
                            "fs/promises",
                            "http2",
                            "inspector",
                            "module.Module.builtinModules",
                            "module.Module.createRequire",
                            "module.Module.createRequireFromPath",
                            "module.Module.syncBuiltinESMExports",
                            "module.builtinModules",
                            "module.createRequire",
                            "module.createRequireFromPath",
                            "module.syncBuiltinESMExports",
                            "os.constants",
                            "os.constants.priority",
                            "os.getPriority",
                            "os.homedir",
                            "os.setPriority",
                            "os.userInfo",
                            "path.toNamespacedPath",
                            "perf_hooks",
                            "perf_hooks.monitorEventLoopDelay",
                            "process.allowedNodeEnvironmentFlags",
                            "process.argv0",
                            "process.channel",
                            "process.cpuUsage",
                            "process.emitWarning",
                            "process.getegid",
                            "process.geteuid",
                            "process.hasUncaughtExceptionCaptureCallback",
                            "process.hrtime.bigint",
                            "process.ppid",
                            "process.release",
                            "process.report",
                            "process.resourceUsage",
                            "process.setUncaughtExceptionCaptureCallback",
                            "process.setegid",
                            "process.seteuid",
                            "process.stderr.getColorDepth",
                            "process.stderr.hasColor",
                            "process.stdout.getColorDepth",
                            "process.stdout.hasColor",
                            "queueMicrotask",
                            "require.resolve.paths",
                            "stream.Readable.from",
                            "stream.finished",
                            "stream.pipeline",
                            "trace_events",
                            "url.URL",
                            "url.URLSearchParams",
                            "url.domainToASCII",
                            "url.domainToUnicode",
                            "util.TextDecoder",
                            "util.TextEncoder",
                            "util.callbackify",
                            "util.formatWithOptions",
                            "util.getSystemErrorName",
                            "util.inspect.custom",
                            "util.inspect.defaultOptions",
                            "util.inspect.replDefaults",
                            "util.isDeepStrictEqual",
                            "util.promisify",
                            "util.types",
                            "util.types.isBoxedPrimitive",
                            "v8",
                            "v8.DefaultDeserializer",
                            "v8.DefaultSerializer",
                            "v8.Deserializer",
                            "v8.Serializer",
                            "v8.cachedDataVersionTag",
                            "v8.deserialize",
                            "v8.getHeapCodeStatistics",
                            "v8.getHeapSnapshot",
                            "v8.getHeapSpaceStatistics",
                            "v8.serialize",
                            "v8.writeHeapSnapshot",
                            "vm.Module",
                            "vm.compileFunction",
                            "worker_threads"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoUnsupportedFeaturesNodeBuiltinsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnsupportedFeaturesNodeBuiltinsOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unsupported Node.js built-in APIs on the specified version."
        },
        "NoUnsupportedFeaturesOption": {
            "description": "Option.",
            "properties": {
                "ignores": {
                    "items": {
                        "enum": [
                            "define-options",
                            "define-slots",
                            "dynamic-directive-arguments",
                            "is-attribute-with-vue-prefix",
                            "script-setup",
                            "slot-scope-attribute",
                            "style-css-vars-injection",
                            "v-bind-attr-modifier",
                            "v-bind-prop-modifier-shorthand",
                            "v-is",
                            "v-memo",
                            "v-model-argument",
                            "v-model-custom-modifiers",
                            "v-slot"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoUnsupportedFeaturesOption$2": {
            "anyOf": [
                {
                    "properties": {
                        "ignores": {
                            "items": {
                                "enum": [
                                    "Array.*",
                                    "Array.from",
                                    "Array.of",
                                    "Atomics",
                                    "Atomics.*",
                                    "Atomics.add",
                                    "Atomics.and",
                                    "Atomics.compareExchange",
                                    "Atomics.exchange",
                                    "Atomics.isLockFree",
                                    "Atomics.load",
                                    "Atomics.or",
                                    "Atomics.store",
                                    "Atomics.sub",
                                    "Atomics.wait",
                                    "Atomics.wake",
                                    "Atomics.xor",
                                    "DataView",
                                    "Float32Array",
                                    "Float64Array",
                                    "Int16Array",
                                    "Int32Array",
                                    "Int8Array",
                                    "Map",
                                    "Math.*",
                                    "Math.acosh",
                                    "Math.asinh",
                                    "Math.atanh",
                                    "Math.cbrt",
                                    "Math.clz32",
                                    "Math.cosh",
                                    "Math.expm1",
                                    "Math.fround",
                                    "Math.hypot",
                                    "Math.imul",
                                    "Math.log10",
                                    "Math.log1p",
                                    "Math.log2",
                                    "Math.sign",
                                    "Math.sinh",
                                    "Math.tanh",
                                    "Math.trunc",
                                    "Number.*",
                                    "Number.EPSILON",
                                    "Number.MAX_SAFE_INTEGER",
                                    "Number.MIN_SAFE_INTEGER",
                                    "Number.isFinite",
                                    "Number.isInteger",
                                    "Number.isNaN",
                                    "Number.isSafeInteger",
                                    "Object.*",
                                    "Object.assign",
                                    "Object.entries",
                                    "Object.getOwnPropertyDescriptors",
                                    "Object.getOwnPropertySymbols",
                                    "Object.is",
                                    "Object.setPrototypeOf",
                                    "Object.values",
                                    "Promise",
                                    "Proxy",
                                    "Reflect",
                                    "Set",
                                    "SharedArrayBuffer",
                                    "String.*",
                                    "String.fromCodePoint",
                                    "String.raw",
                                    "Symbol",
                                    "Symbol.*",
                                    "Symbol.hasInstance",
                                    "Symbol.isConcatSpreadablec",
                                    "Symbol.iterator",
                                    "Symbol.match",
                                    "Symbol.replace",
                                    "Symbol.search",
                                    "Symbol.species",
                                    "Symbol.split",
                                    "Symbol.toPrimitive",
                                    "Symbol.toStringTag",
                                    "Symbol.unscopables",
                                    "Uint16Array",
                                    "Uint32Array",
                                    "Uint8Array",
                                    "Uint8ClampedArray",
                                    "WeakMap",
                                    "WeakSet",
                                    "arrowFunctions",
                                    "asyncAwait",
                                    "asyncGenerators",
                                    "binaryNumberLiterals",
                                    "blockScopedFunctions",
                                    "classes",
                                    "const",
                                    "defaultParameters",
                                    "destructuring",
                                    "exponentialOperators",
                                    "extends",
                                    "extendsArray",
                                    "extendsBoolean",
                                    "extendsFunction",
                                    "extendsMap",
                                    "extendsNull",
                                    "extendsNumber",
                                    "extendsPromise",
                                    "extendsRegExp",
                                    "extendsSet",
                                    "extendsString",
                                    "forAwaitOf",
                                    "forOf",
                                    "generatorFunctions",
                                    "globalObjects",
                                    "let",
                                    "modules",
                                    "new.target",
                                    "objectLiteralExtensions",
                                    "objectPropertyShorthandOfGetSet",
                                    "octalNumberLiterals",
                                    "regexpLookbehind",
                                    "regexpNamedCaptureGroups",
                                    "regexpS",
                                    "regexpU",
                                    "regexpUnicodeProperties",
                                    "regexpY",
                                    "restParameters",
                                    "restProperties",
                                    "runtime",
                                    "spreadOperators",
                                    "spreadProperties",
                                    "staticMethods",
                                    "syntax",
                                    "templateLiteralRevision",
                                    "templateStrings",
                                    "trailingCommasInFunctions",
                                    "typedArrays",
                                    "unicodeCodePointEscapes"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "version": {
                            "anyOf": [
                                {
                                    "enum": [
                                        0.1,
                                        0.12,
                                        10,
                                        4,
                                        5,
                                        6,
                                        6.5,
                                        7,
                                        7.6,
                                        8,
                                        8.3,
                                        9
                                    ],
                                    "type": "number"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        0.1,
                        0.12,
                        10,
                        4,
                        5,
                        6,
                        6.5,
                        7,
                        7.6,
                        8,
                        8.3,
                        9
                    ],
                    "type": "number"
                },
                {
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "NoUnsupportedFeaturesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnsupportedFeaturesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unsupported Vue.js syntax on the specified version."
        },
        "NoUnsupportedFeaturesRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnsupportedFeaturesOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unsupported ECMAScript features on the specified version."
        },
        "NoUnusedComponentsOption": {
            "description": "Option.",
            "properties": {
                "ignoreWhenBindingPresent": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnusedComponentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnusedComponentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow registering components that are not used inside templates."
        },
        "NoUnusedDisableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused `eslint-disable` comments."
        },
        "NoUnusedEnableRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused `eslint-enable` comments."
        },
        "NoUnusedExpressionsOption": {
            "description": "Option.",
            "properties": {
                "allowShortCircuit": {
                    "type": "boolean"
                },
                "allowTaggedTemplates": {
                    "type": "boolean"
                },
                "allowTernary": {
                    "type": "boolean"
                },
                "enforceForJSX": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnusedExpressionsOption$1": {
            "description": "Option.",
            "properties": {
                "allowShortCircuit": {
                    "type": "boolean"
                },
                "allowTaggedTemplates": {
                    "type": "boolean"
                },
                "allowTernary": {
                    "type": "boolean"
                },
                "enforceForJSX": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUnusedExpressionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnusedExpressionsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused expressions."
        },
        "NoUnusedExpressionsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnusedExpressionsOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused expressions."
        },
        "NoUnusedLabelsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused labels."
        },
        "NoUnusedModulesOption": {
            "anyOf": [
                {
                    "allOf": [
                        {
                            "additionalProperties": {},
                            "properties": {
                                "src": {
                                    "additionalProperties": {},
                                    "type": "object"
                                },
                                "unusedExports": {
                                    "const": true,
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": {},
                            "properties": {
                                "ignoreExports": {
                                    "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "missingExports": {
                                    "description": "report modules without any exports",
                                    "type": "boolean"
                                },
                                "src": {
                                    "description": "files/paths to be analyzed (only for unused exports)",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "unusedExports": {
                                    "description": "report exports without any usage",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "additionalProperties": {},
                            "properties": {
                                "missingExports": {
                                    "const": true,
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": {},
                            "properties": {
                                "ignoreExports": {
                                    "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "missingExports": {
                                    "description": "report modules without any exports",
                                    "type": "boolean"
                                },
                                "src": {
                                    "description": "files/paths to be analyzed (only for unused exports)",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "unusedExports": {
                                    "description": "report exports without any usage",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ]
                }
            ],
            "description": "Option."
        },
        "NoUnusedModulesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnusedModulesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid modules without exports, or exports without matching import in another module."
        },
        "NoUnusedPrivateClassMembersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused private class members."
        },
        "NoUnusedPropertiesOption": {
            "description": "Option.",
            "properties": {
                "deepData": {
                    "type": "boolean"
                },
                "groups": {
                    "items": {
                        "enum": [
                            "asyncData",
                            "computed",
                            "data",
                            "methods",
                            "props",
                            "setup"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignorePublicMembers": {
                    "type": "boolean"
                },
                "unreferencedOptions": {
                    "items": {
                        "enum": [
                            "returnAsUnreferenced",
                            "unknownMemberAsUnreferenced"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUnusedPropertiesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnusedPropertiesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused properties."
        },
        "NoUnusedPropertiesRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused object properties."
        },
        "NoUnusedRefsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused refs."
        },
        "NoUnusedVarsOption": {
            "description": "Option.",
            "properties": {
                "ignorePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoUnusedVarsOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "args": {
                            "enum": [
                                "after-used",
                                "all",
                                "none"
                            ],
                            "type": "string"
                        },
                        "argsIgnorePattern": {
                            "type": "string"
                        },
                        "caughtErrors": {
                            "enum": [
                                "all",
                                "none"
                            ],
                            "type": "string"
                        },
                        "caughtErrorsIgnorePattern": {
                            "type": "string"
                        },
                        "destructuredArrayIgnorePattern": {
                            "type": "string"
                        },
                        "ignoreRestSiblings": {
                            "type": "boolean"
                        },
                        "vars": {
                            "enum": [
                                "all",
                                "local"
                            ],
                            "type": "string"
                        },
                        "varsIgnorePattern": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "all",
                        "local"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "NoUnusedVarsOption$2": {
            "anyOf": [
                {
                    "properties": {
                        "args": {
                            "enum": [
                                "after-used",
                                "all",
                                "none"
                            ],
                            "type": "string"
                        },
                        "argsIgnorePattern": {
                            "type": "string"
                        },
                        "caughtErrors": {
                            "enum": [
                                "all",
                                "none"
                            ],
                            "type": "string"
                        },
                        "caughtErrorsIgnorePattern": {
                            "type": "string"
                        },
                        "destructuredArrayIgnorePattern": {
                            "type": "string"
                        },
                        "ignoreRestSiblings": {
                            "type": "boolean"
                        },
                        "vars": {
                            "enum": [
                                "all",
                                "local"
                            ],
                            "type": "string"
                        },
                        "varsIgnorePattern": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "all",
                        "local"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "NoUnusedVarsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnusedVarsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused variable definitions of v-for directives or scope attributes."
        },
        "NoUnusedVarsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnusedVarsOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused variables."
        },
        "NoUnusedVarsRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUnusedVarsOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unused variables."
        },
        "NoUseBeforeDefineOption": {
            "anyOf": [
                {
                    "properties": {
                        "allowNamedExports": {
                            "type": "boolean"
                        },
                        "classes": {
                            "type": "boolean"
                        },
                        "enums": {
                            "type": "boolean"
                        },
                        "functions": {
                            "type": "boolean"
                        },
                        "ignoreTypeReferences": {
                            "type": "boolean"
                        },
                        "typedefs": {
                            "type": "boolean"
                        },
                        "variables": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "const": "nofunc",
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "NoUseBeforeDefineOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "allowNamedExports": {
                            "type": "boolean"
                        },
                        "classes": {
                            "type": "boolean"
                        },
                        "functions": {
                            "type": "boolean"
                        },
                        "variables": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "const": "nofunc",
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "NoUseBeforeDefineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUseBeforeDefineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of variables before they are defined."
        },
        "NoUseBeforeDefineRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUseBeforeDefineOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of variables before they are defined."
        },
        "NoUseComputedPropertyLikeMethodRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use computed property like method."
        },
        "NoUseOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "enum": [
                            "eslint",
                            "eslint-disable",
                            "eslint-disable-line",
                            "eslint-disable-next-line",
                            "eslint-enable",
                            "eslint-env",
                            "exported",
                            "global",
                            "globals"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoUseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUseOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow ESLint directive-comments."
        },
        "NoUseVElseWithVForRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using `v-else-if`/`v-else` on the same element as `v-for`."
        },
        "NoUseVIfWithVForOption": {
            "description": "Option.",
            "properties": {
                "allowUsingIterationVar": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUseVIfWithVForRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUseVIfWithVForOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using `v-if` on the same element as `v-for`."
        },
        "NoUselessBackreferenceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow useless backreferences in regular expressions."
        },
        "NoUselessCallRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary calls to `.call()` and `.apply()`."
        },
        "NoUselessCatchRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary `catch` clauses."
        },
        "NoUselessComputedKeyOption": {
            "description": "Option.",
            "properties": {
                "enforceForClassMembers": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUselessComputedKeyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUselessComputedKeyOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary computed property keys in objects and classes."
        },
        "NoUselessConcatRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary concatenation of literals or template literals in `<template>`."
        },
        "NoUselessConcatRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary concatenation of literals or template literals."
        },
        "NoUselessConstructorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary constructors."
        },
        "NoUselessConstructorRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary constructors."
        },
        "NoUselessEmptyExportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow empty exports that don't change anything in a module file."
        },
        "NoUselessEscapeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary escape usage."
        },
        "NoUselessEscapeRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary escape characters."
        },
        "NoUselessFallbackInSpreadRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow useless fallback when spreading in object literals."
        },
        "NoUselessLengthCheckRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow useless array length check."
        },
        "NoUselessMustachesOption": {
            "description": "Option.",
            "properties": {
                "ignoreIncludesComment": {
                    "type": "boolean"
                },
                "ignoreStringEscape": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUselessMustachesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUselessMustachesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary mustache interpolations."
        },
        "NoUselessPathSegmentsOption": {
            "description": "Option.",
            "properties": {
                "commonjs": {
                    "type": "boolean"
                },
                "noUselessIndex": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUselessPathSegmentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUselessPathSegmentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid unnecessary path segments in import and require statements."
        },
        "NoUselessPromiseResolveRejectRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks."
        },
        "NoUselessRenameOption": {
            "description": "Option.",
            "properties": {
                "ignoreDestructuring": {
                    "type": "boolean"
                },
                "ignoreExport": {
                    "type": "boolean"
                },
                "ignoreImport": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUselessRenameRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUselessRenameOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow renaming import, export, and destructured assignments to the same name."
        },
        "NoUselessReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow redundant return statements."
        },
        "NoUselessSpreadRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary spread."
        },
        "NoUselessSwitchCaseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow useless case in switch statements."
        },
        "NoUselessTemplateAttributesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow useless attribute on `<template>`."
        },
        "NoUselessUndefinedOption": {
            "description": "Option.",
            "properties": {
                "checkArguments": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUselessUndefinedRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUselessUndefinedOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow useless `undefined`."
        },
        "NoUselessVBindOption": {
            "description": "Option.",
            "properties": {
                "ignoreIncludesComment": {
                    "type": "boolean"
                },
                "ignoreStringEscape": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoUselessVBindRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoUselessVBindOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow unnecessary `v-bind` directives."
        },
        "NoVForTemplateKeyOnChildRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow key of `<template v-for>` placed on child elements."
        },
        "NoVForTemplateKeyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `key` attribute on `<template v-for>`."
        },
        "NoVHtmlRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of v-html to prevent XSS attack."
        },
        "NoVModelArgumentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow adding an argument to `v-model` used in custom component."
        },
        "NoVTextRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of v-text."
        },
        "NoVTextVHtmlOnComponentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow v-text / v-html on component."
        },
        "NoVarRequiresRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `require` statements except in import statements."
        },
        "NoVarRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `let` or `const` instead of `var`."
        },
        "NoVoidOption": {
            "description": "Option.",
            "properties": {
                "allowAsStatement": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoVoidRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoVoidOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `void` operators."
        },
        "NoWarningCommentsOption": {
            "description": "Option.",
            "properties": {
                "decoration": {
                    "additionalItems": {
                        "type": "string"
                    },
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                "location": {
                    "enum": [
                        "anywhere",
                        "start"
                    ],
                    "type": "string"
                },
                "terms": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NoWarningCommentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NoWarningCommentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow specified warning terms in comments."
        },
        "NoWatchAfterAwaitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow asynchronously registered `watch`."
        },
        "NoWebpackLoaderSyntaxRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid webpack loader syntax in imports."
        },
        "NoWhitespaceBeforePropertyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow whitespace before properties."
        },
        "NoWithRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `with` statements."
        },
        "NoZeroFractionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow number literals with zero fractions or dangling dots."
        },
        "NonNullableTypeAssertionStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce non-null assertions over explicit type casts."
        },
        "NonblockStatementBodyPositionConfig": {
            "description": "Config.",
            "properties": {
                "overrides": {
                    "properties": {
                        "do": {
                            "enum": [
                                "any",
                                "below",
                                "beside"
                            ],
                            "type": "string"
                        },
                        "else": {
                            "enum": [
                                "any",
                                "below",
                                "beside"
                            ],
                            "type": "string"
                        },
                        "for": {
                            "enum": [
                                "any",
                                "below",
                                "beside"
                            ],
                            "type": "string"
                        },
                        "if": {
                            "enum": [
                                "any",
                                "below",
                                "beside"
                            ],
                            "type": "string"
                        },
                        "while": {
                            "enum": [
                                "any",
                                "below",
                                "beside"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "NonblockStatementBodyPositionOption": {
            "description": "Option.",
            "enum": [
                "any",
                "below",
                "beside"
            ],
            "type": "string"
        },
        "NonblockStatementBodyPositionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NonblockStatementBodyPositionOption"
                        },
                        {
                            "$ref": "#/definitions/NonblockStatementBodyPositionConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the location of single-line statements."
        },
        "NumberLiteralCaseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce proper case for numeric literals."
        },
        "NumericSeparatorsStyleOption": {
            "description": "Option.",
            "properties": {
                "binary": {
                    "properties": {
                        "groupLength": {
                            "type": "number"
                        },
                        "minimumDigits": {
                            "type": "number"
                        },
                        "onlyIfContainsSeparator": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "hexadecimal": {
                    "properties": {
                        "groupLength": {
                            "type": "number"
                        },
                        "minimumDigits": {
                            "type": "number"
                        },
                        "onlyIfContainsSeparator": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "number": {
                    "properties": {
                        "groupLength": {
                            "type": "number"
                        },
                        "minimumDigits": {
                            "type": "number"
                        },
                        "onlyIfContainsSeparator": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "octal": {
                    "properties": {
                        "groupLength": {
                            "type": "number"
                        },
                        "minimumDigits": {
                            "type": "number"
                        },
                        "onlyIfContainsSeparator": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "onlyIfContainsSeparator": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NumericSeparatorsStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/NumericSeparatorsStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the style of numeric separators by correctly grouping digits."
        },
        "ObjectCurlyNewlineOption": {
            "anyOf": [
                {
                    "properties": {
                        "consistent": {
                            "type": "boolean"
                        },
                        "minProperties": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "ExportDeclaration": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ImportDeclaration": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ObjectExpression": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ObjectPattern": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "ObjectCurlyNewlineOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "consistent": {
                            "type": "boolean"
                        },
                        "minProperties": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "ExportDeclaration": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ImportDeclaration": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ObjectExpression": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ObjectPattern": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "ObjectCurlyNewlineOption$2": {
            "anyOf": [
                {
                    "properties": {
                        "consistent": {
                            "type": "boolean"
                        },
                        "minProperties": {
                            "type": "number"
                        },
                        "multiline": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "ExportDeclaration": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ImportDeclaration": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ObjectExpression": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "ObjectPattern": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "consistent": {
                                            "type": "boolean"
                                        },
                                        "minProperties": {
                                            "type": "number"
                                        },
                                        "multiline": {
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "ObjectCurlyNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlyNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent line breaks after opening and before closing braces in `<template>`."
        },
        "ObjectCurlyNewlineRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlyNewlineOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent line breaks inside braces."
        },
        "ObjectCurlyNewlineRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlyNewlineOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent line breaks after opening and before closing braces."
        },
        "ObjectCurlySpacingConfig": {
            "description": "Config.",
            "properties": {
                "arraysInObjects": {
                    "type": "boolean"
                },
                "objectsInObjects": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ObjectCurlySpacingConfig$1": {
            "description": "Config.",
            "properties": {
                "arraysInObjects": {
                    "type": "boolean"
                },
                "objectsInObjects": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ObjectCurlySpacingConfig$2": {
            "description": "Config.",
            "properties": {
                "arraysInObjects": {
                    "type": "boolean"
                },
                "objectsInObjects": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ObjectCurlySpacingConfig$3": {
            "description": "Config.",
            "properties": {
                "arraysInObjects": {
                    "type": "boolean"
                },
                "objectsInObjects": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ObjectCurlySpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ObjectCurlySpacingOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ObjectCurlySpacingOption$2": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ObjectCurlySpacingOption$3": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ObjectCurlySpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlySpacingOption"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlySpacingConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside braces in `<template>`."
        },
        "ObjectCurlySpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlySpacingOption$1"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlySpacingConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside braces."
        },
        "ObjectCurlySpacingRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlySpacingOption$2"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlySpacingConfig$2"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside braces."
        },
        "ObjectCurlySpacingRuleConfig$3": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlySpacingOption$3"
                        },
                        {
                            "$ref": "#/definitions/ObjectCurlySpacingConfig$3"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside braces."
        },
        "ObjectPropertyNewlineOption": {
            "description": "Option.",
            "properties": {
                "allowAllPropertiesOnSameLine": {
                    "type": "boolean"
                },
                "allowMultiplePropertiesPerLine": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ObjectPropertyNewlineOption$1": {
            "description": "Option.",
            "properties": {
                "allowAllPropertiesOnSameLine": {
                    "type": "boolean"
                },
                "allowMultiplePropertiesPerLine": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ObjectPropertyNewlineOption$2": {
            "description": "Option.",
            "properties": {
                "allowAllPropertiesOnSameLine": {
                    "type": "boolean"
                },
                "allowMultiplePropertiesPerLine": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ObjectPropertyNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectPropertyNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce placing object properties on separate lines in `<template>`."
        },
        "ObjectPropertyNewlineRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectPropertyNewlineOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce placing object properties on separate lines."
        },
        "ObjectPropertyNewlineRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ObjectPropertyNewlineOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce placing object properties on separate lines."
        },
        "ObjectShorthandRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "consistent",
                                "consistent-as-needed",
                                "methods",
                                "never",
                                "properties"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "methods",
                                "properties"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "methods"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "methods",
                                "properties"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "avoidQuotes": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "methods"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "avoidExplicitReturnArrows": {
                                    "type": "boolean"
                                },
                                "avoidQuotes": {
                                    "type": "boolean"
                                },
                                "ignoreConstructors": {
                                    "type": "boolean"
                                },
                                "methodsIgnorePattern": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow method and property shorthand syntax for object literals in `<template>`."
        },
        "ObjectShorthandRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "consistent",
                                "consistent-as-needed",
                                "methods",
                                "never",
                                "properties"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "methods",
                                "properties"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "methods",
                                "properties"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "avoidQuotes": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "methods"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "methods"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "avoidExplicitReturnArrows": {
                                    "type": "boolean"
                                },
                                "avoidQuotes": {
                                    "type": "boolean"
                                },
                                "ignoreConstructors": {
                                    "type": "boolean"
                                },
                                "methodsIgnorePattern": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow method and property shorthand syntax for object literals."
        },
        "Omit<FlatESLintConfigItem<MergeIntersection<Prefix<Unprefix<TypeScriptRules,\"@typescript-eslint/\">,\"ts/\">&Prefix<Unprefix<MergeIntersection<PreferLowercaseTitleRule&MaxNestedDescribeRule&NoIdenticalTitleRule&NoFocusedTestsRule&NoConditionalTestsRule&ExpectExpectRule&ConsistentTestItRule&PreferToBeRule&NoHooksRule&NoRestrictedViMethodsRule&ConsistentTestFilenameRule&MaxExpectsRule&NoAliasMethodsRule&NoCommentedOutTestsRule&NoConditionalExpectRule&NoConditionalInTestRule&NoDisabledTestsRule&NoDoneCallbackRule&NoDuplicateHooksRule&NoLargeSnapshotsRule&NoInterpolationInSnapshotsRule&NoMocksImportRule&NoRestrictedMatchersRule&NoStandaloneExpectRule&NoTestPrefixesRule&NoTestReturnStatementRule&PreferCalledWithRule&ValidTitleRule&ValidExpectRule&PreferToBeFalsyRule&PreferToBeObjectRule&PreferToBeTruthyRule&PreferToHaveLengthRule&PreferEqualityMatcherRule&PreferStrictEqualRule&PreferExpectResolvesRule&PreferEachRule&PreferHooksOnTopRule&PreferHooksInOrderRule&PreferMockPromiseShorthandRule&PreferSnapshotHintRule&ValidDescribeCallbackRule&RequireTopLevelDescribeRule&RequireToThrowMessageRule&RequireHookRule&PreferTodoRule&PreferSpyOnRule&PreferComparisonMatcherRule&PreferToContainRule>,\"vitest/\">,\"test/\">&Prefix<Unprefix<YmlRules,\"yml/\">,\"yaml/\">&Prefix<Unprefix<NRules,\"n/\">,\"node/\">&Prefix<StylisticRules,\"style/\">&Prefix<Rules,\"antfu/\">&NoUnresolvedRule&NamedRule&DefaultRule&NamespaceRule&NoNamespaceRule$2&ExportRule&NoMutableExportsRule&ExtensionsRule&NoRestrictedPathsRule&NoInternalModulesRule&GroupExportsRule&NoRelativePackagesRule&NoRelativeParentImportsRule&ConsistentTypeSpecifierStyleRule&NoSelfImportRule&NoCycleRule&NoNamedDefaultRule&NoNamedAsDefaultRule&NoNamedAsDefaultMemberRule&NoAnonymousDefaultExportRule&NoUnusedModulesRule&NoCommonjsRule&NoAmdRule&NoDuplicatesRule&FirstRule&MaxDependenciesRule&NoExtraneousDependenciesRule&NoAbsolutePathRule&NoNodejsModulesRule&NoWebpackLoaderSyntaxRule&OrderRule&NewlineAfterImportRule&PreferDefaultExportRule&NoDefaultExportRule&NoNamedExportRule&NoDynamicRequireRule&UnambiguousRule&NoUnassignedImportRule&NoUselessPathSegmentsRule&DynamicImportChunknameRule&NoImportModuleExportsRule&NoEmptyNamedBlocksRule&ExportsLastRule&NoDeprecatedRule$1&ImportsFirstRule&AccessorPairsRule&ArrayBracketNewlineRule$2&ArrayBracketSpacingRule$2&ArrayCallbackReturnRule&ArrayElementNewlineRule$2&ArrowBodyStyleRule&ArrowParensRule&ArrowSpacingRule$1&BlockScopedVarRule&BlockSpacingRule$2&BraceStyleRule$2&CallbackReturnRule$2&CamelcaseRule$1&CapitalizedCommentsRule&ClassMethodsUseThisRule$1&CommaDangleRule$3&CommaSpacingRule$2&CommaStyleRule$2&ComplexityRule&ComputedPropertySpacingRule&ConsistentReturnRule&ConsistentThisRule&ConstructorSuperRule&CurlyRule&DefaultCaseRule&DefaultCaseLastRule&DefaultParamLastRule$1&DotLocationRule$1&DotNotationRule$2&EolLastRule&EqeqeqRule$1&ForDirectionRule&FuncCallSpacingRule$2&FuncNameMatchingRule&FuncNamesRule&FuncStyleRule&FunctionCallArgumentNewlineRule&FunctionParenNewlineRule&GeneratorStarSpacingRule&GetterReturnRule&GlobalRequireRule$2&GroupedAccessorPairsRule&GuardForInRule&HandleCallbackErrRule$2&IdBlacklistRule&IdDenylistRule&IdLengthRule&IdMatchRule&ImplicitArrowLinebreakRule&IndentRule$3&IndentLegacyRule&InitDeclarationsRule$1&JsxQuotesRule&KeySpacingRule$4&KeywordSpacingRule$2&LineCommentPositionRule&LinebreakStyleRule&LinesAroundCommentRule$1&LinesAroundDirectiveRule&LinesBetweenClassMembersRule$1&LogicalAssignmentOperatorsRule&MaxClassesPerFileRule&MaxDepthRule&MaxLenRule$1&MaxLinesRule&MaxLinesPerFunctionRule&MaxNestedCallbacksRule&MaxParamsRule&MaxStatementsRule&MaxStatementsPerLineRule&MultilineCommentStyleRule&MultilineTernaryRule$1&NewCapRule&NewParensRule&NewlineAfterVarRule&NewlineBeforeReturnRule&NewlinePerChainedCallRule&NoAlertRule&NoArrayConstructorRule$1&NoAsyncPromiseExecutorRule&NoAwaitInLoopRule&NoBitwiseRule&NoBufferConstructorRule&NoCallerRule&NoCaseDeclarationsRule&NoCatchShadowRule&NoClassAssignRule&NoCompareNegZeroRule&NoCondAssignRule&NoConfusingArrowRule&NoConsoleRule$1&NoConstAssignRule&NoConstantBinaryExpressionRule&NoConstantConditionRule$1&NoConstructorReturnRule&NoContinueRule&NoControlRegexRule&NoDebuggerRule&NoDeleteVarRule&NoDivRegexRule&NoDupeArgsRule&NoDupeClassMembersRule$1&NoDupeElseIfRule&NoDupeKeysRule$2&NoDuplicateCaseRule&NoDuplicateImportsRule&NoElseReturnRule&NoEmptyRule&NoEmptyCharacterClassRule&NoEmptyFunctionRule$1&NoEmptyPatternRule$1&NoEmptyStaticBlockRule&NoEqNullRule&NoEvalRule&NoExAssignRule&NoExtendNativeRule&NoExtraBindRule&NoExtraBooleanCastRule&NoExtraLabelRule&NoExtraParensRule$2&NoExtraSemiRule$1&NoFallthroughRule&NoFloatingDecimalRule$1&NoFuncAssignRule&NoGlobalAssignRule&NoImplicitCoercionRule&NoImplicitGlobalsRule&NoImpliedEvalRule$1&NoImportAssignRule&NoInlineCommentsRule&NoInnerDeclarationsRule&NoInvalidRegexpRule&NoInvalidThisRule$1&NoIrregularWhitespaceRule$3&NoIteratorRule&NoLabelVarRule&NoLabelsRule&NoLoneBlocksRule&NoLonelyIfRule$1&NoLoopFuncRule$1&NoLossOfPrecisionRule$2&NoMagicNumbersRule$1&NoMisleadingCharacterClassRule&NoMixedOperatorsRule&NoMixedRequiresRule$2&NoMixedSpacesAndTabsRule&NoMultiAssignRule&NoMultiSpacesRule$1&NoMultiStrRule$1&NoMultipleEmptyLinesRule$1&NoNativeReassignRule&NoNegatedConditionRule$1&NoNegatedInLhsRule&NoNestedTernaryRule$1&NoNewRule&NoNewFuncRule&NoNewNativeNonconstructorRule&NoNewObjectRule&NoNewRequireRule$2&NoNewSymbolRule&NoNewWrappersRule&NoNonoctalDecimalEscapeRule&NoObjCallsRule&NoObjectConstructorRule&NoOctalRule$1&NoOctalEscapeRule$1&NoParamReassignRule&NoPathConcatRule$2&NoPlusplusRule&NoProcessEnvRule$2&NoProcessExitRule$3&NoPromiseExecutorReturnRule&NoProtoRule&NoPrototypeBuiltinsRule&NoRedeclareRule$1&NoRegexSpacesRule&NoRestrictedExportsRule&NoRestrictedGlobalsRule&NoRestrictedImportsRule$1&NoRestrictedModulesRule&NoRestrictedPropertiesRule&NoRestrictedSyntaxRule$2&NoReturnAssignRule&NoReturnAwaitRule&NoScriptUrlRule&NoSelfAssignRule&NoSelfCompareRule&NoSequencesRule&NoSetterReturnRule&NoShadowRule$1&NoShadowRestrictedNamesRule&NoSpacedFuncRule&NoSparseArraysRule$2&NoSyncRule$2&NoTabsRule&NoTemplateCurlyInStringRule&NoTernaryRule&NoThisBeforeSuperRule&NoThrowLiteralRule$1&NoTrailingSpacesRule&NoUndefRule&NoUndefInitRule&NoUndefinedRule&NoUnderscoreDangleRule&NoUnexpectedMultilineRule&NoUnmodifiedLoopConditionRule&NoUnneededTernaryRule&NoUnreachableRule&NoUnreachableLoopRule&NoUnsafeFinallyRule&NoUnsafeNegationRule&NoUnsafeOptionalChainingRule&NoUnusedExpressionsRule$1&NoUnusedLabelsRule&NoUnusedPrivateClassMembersRule&NoUnusedVarsRule$2&NoUseBeforeDefineRule$1&NoUselessBackreferenceRule&NoUselessCallRule&NoUselessCatchRule$1&NoUselessComputedKeyRule&NoUselessConcatRule$1&NoUselessConstructorRule$1&NoUselessEscapeRule$1&NoUselessRenameRule&NoUselessReturnRule&NoVarRule&NoVoidRule&NoWarningCommentsRule&NoWhitespaceBeforePropertyRule&NoWithRule&NonblockStatementBodyPositionRule&ObjectCurlyNewlineRule$2&ObjectCurlySpacingRule$3&ObjectPropertyNewlineRule$2&ObjectShorthandRule$1&OneVarRule&OneVarDeclarationPerLineRule&OperatorAssignmentRule&OperatorLinebreakRule$1&PaddedBlocksRule&PaddingLineBetweenStatementsRule$1&PreferArrowCallbackRule&PreferConstRule&PreferDestructuringRule&PreferExponentiationOperatorRule$1&PreferNamedCaptureGroupRule&PreferNumericLiteralsRule&PreferObjectHasOwnRule$1&PreferObjectSpreadRule&PreferPromiseRejectErrorsRule&PreferReflectRule&PreferRegexLiteralsRule&PreferRestParamsRule&PreferSpreadRule$1&PreferTemplateRule$1&QuotePropsRule$2&QuotesRule$3&RadixRule&RequireAtomicUpdatesRule&RequireAwaitRule$1&RequireJsdocRule$1&RequireUnicodeRegexpRule&RequireYieldRule&RestSpreadSpacingRule&SemiRule$1&SemiSpacingRule&SemiStyleRule&SortImportsRule&SortKeysRule$3&SortVarsRule&SpaceBeforeBlocksRule$1&SpaceBeforeFunctionParenRule$1&SpaceInParensRule$1&SpaceInfixOpsRule$2&SpaceUnaryOpsRule$2&SpacedCommentRule$1&StrictRule&SwitchColonSpacingRule&SymbolDescriptionRule&TemplateCurlySpacingRule$1&TemplateTagSpacingRule&UnicodeBomRule&UseIsnanRule&ValidJsdocRule&ValidTypeofRule&VarsOnTopRule&WrapIifeRule&WrapRegexRule&YieldStarSpacingRule&YodaRule&ArrayBracketNewlineRule$1&ArrayBracketSpacingRule$1&ArrayElementNewlineRule$1&AutoRule&CommaDangleRule$2&CommaStyleRule$1&IndentRule$2&KeyNameCasingRule$1&KeySpacingRule$3&NoBigintLiteralsRule&NoBinaryExpressionRule&NoBinaryNumericLiteralsRule&NoCommentsRule&NoDupeKeysRule$1&NoEscapeSequenceInIdentifierRule&NoFloatingDecimalRule&NoHexadecimalNumericLiteralsRule&NoInfinityRule&NoIrregularWhitespaceRule$2&NoMultiStrRule&NoNanRule&NoNumberPropsRule&NoNumericSeparatorsRule&NoOctalEscapeRule&NoOctalNumericLiteralsRule&NoOctalRule&NoParenthesizedRule&NoPlusSignRule&NoRegexpLiteralsRule&NoSparseArraysRule$1&NoTemplateLiteralsRule&NoUndefinedValueRule&NoUnicodeCodepointEscapesRule&NoUselessEscapeRule&ObjectCurlyNewlineRule$1&ObjectCurlySpacingRule$2&ObjectPropertyNewlineRule$1&QuotePropsRule$1&QuotesRule$2&SortArrayValuesRule&SortKeysRule$2&SpaceUnaryOpsRule$1&ValidJsonNumberRule&VueCustomBlockNoParsingErrorRule$1&ArrayBracketNewlineRule&ArrayBracketSpacingRule&ArrayElementNewlineRule&ArrowSpacingRule&AttributeHyphenationRule&AttributesOrderRule&BlockLangRule&BlockOrderRule&BlockSpacingRule&BlockTagNewlineRule&BraceStyleRule&CamelcaseRule&CommaDangleRule&CommaSpacingRule&CommaStyleRule&CommentDirectiveRule&ComponentApiStyleRule&ComponentDefinitionNameCasingRule&ComponentNameInTemplateCasingRule$1&ComponentOptionsNameCasingRule&ComponentTagsOrderRule&CustomEventNameCasingRule&DefineEmitsDeclarationRule&DefineMacrosOrderRule&DefinePropsDeclarationRule&DotLocationRule&DotNotationRule&EqeqeqRule&FirstAttributeLinebreakRule&FuncCallSpacingRule&HtmlButtonHasTypeRule&HtmlClosingBracketNewlineRule&HtmlClosingBracketSpacingRule&HtmlCommentContentNewlineRule&HtmlCommentContentSpacingRule&HtmlCommentIndentRule&HtmlEndTagsRule&HtmlIndentRule&HtmlQuotesRule&HtmlSelfClosingRule&JsxUsesVarsRule&KeySpacingRule$1&KeywordSpacingRule&MatchComponentFileNameRule&MatchComponentImportNameRule&MaxAttributesPerLineRule&MaxLenRule&MaxLinesPerBlockRule&MultiWordComponentNamesRule&MultilineHtmlElementContentNewlineRule&MultilineTernaryRule&MustacheInterpolationSpacingRule&NewLineBetweenMultiLinePropertyRule&NextTickStyleRule&NoArrowFunctionsInWatchRule&NoAsyncInComputedPropertiesRule&NoBareStringsInTemplateRule&NoBooleanDefaultRule&NoChildContentRule&NoComputedPropertiesInDataRule&NoConsoleRule&NoConstantConditionRule&NoCustomModifiersOnVModelRule&NoDeprecatedDataObjectDeclarationRule&NoDeprecatedDestroyedLifecycleRule&NoDeprecatedDollarListenersApiRule&NoDeprecatedDollarScopedslotsApiRule&NoDeprecatedEventsApiRule&NoDeprecatedFilterRule&NoDeprecatedFunctionalTemplateRule&NoDeprecatedHtmlElementIsRule&NoDeprecatedInlineTemplateRule&NoDeprecatedModelDefinitionRule&NoDeprecatedPropsDefaultThisRule&NoDeprecatedRouterLinkTagPropRule&NoDeprecatedScopeAttributeRule&NoDeprecatedSlotAttributeRule&NoDeprecatedSlotScopeAttributeRule&NoDeprecatedVBindSyncRule&NoDeprecatedVIsRule&NoDeprecatedVOnNativeModifierRule&NoDeprecatedVOnNumberModifiersRule&NoDeprecatedVueConfigKeycodesRule&NoDupeKeysRule&NoDupeVElseIfRule&NoDuplicateAttrInheritanceRule&NoDuplicateAttributesRule&NoEmptyComponentBlockRule&NoEmptyPatternRule&NoExportInScriptSetupRule&NoExposeAfterAwaitRule&NoExtraParensRule&NoInvalidModelKeysRule&NoIrregularWhitespaceRule$1&NoLifecycleAfterAwaitRule&NoLoneTemplateRule&NoLossOfPrecisionRule&NoMultiSpacesRule&NoMultipleObjectsInClassRule&NoMultipleSlotArgsRule&NoMultipleTemplateRootRule&NoMutatingPropsRule&NoParsingErrorRule$1&NoPotentialComponentOptionTypoRule&NoRefAsOperandRule&NoRefObjectDestructureRule&NoRefObjectReactivityLossRule&NoRequiredPropWithDefaultRule&NoReservedComponentNamesRule&NoReservedKeysRule&NoReservedPropsRule&NoRestrictedBlockRule&NoRestrictedCallAfterAwaitRule&NoRestrictedClassRule&NoRestrictedComponentNamesRule&NoRestrictedComponentOptionsRule&NoRestrictedCustomEventRule&NoRestrictedHtmlElementsRule&NoRestrictedPropsRule&NoRestrictedStaticAttributeRule&NoRestrictedSyntaxRule&NoRestrictedVBindRule&NoRootVIfRule&NoSetupPropsDestructureRule&NoSetupPropsReactivityLossRule&NoSharedComponentDataRule&NoSideEffectsInComputedPropertiesRule&NoSpacesAroundEqualSignsInAttributeRule&NoSparseArraysRule&NoStaticInlineStylesRule&NoTemplateKeyRule&NoTemplateShadowRule&NoTemplateTargetBlankRule&NoTextareaMustacheRule&NoThisInBeforeRouteEnterRule&NoUndefComponentsRule&NoUndefPropertiesRule&NoUnsupportedFeaturesRule&NoUnusedComponentsRule&NoUnusedPropertiesRule&NoUnusedRefsRule&NoUnusedVarsRule&NoUseComputedPropertyLikeMethodRule&NoUseVElseWithVForRule&NoUseVIfWithVForRule&NoUselessConcatRule&NoUselessMustachesRule&NoUselessTemplateAttributesRule&NoUselessVBindRule&NoVForTemplateKeyOnChildRule&NoVForTemplateKeyRule&NoVHtmlRule$1&NoVModelArgumentRule&NoVTextVHtmlOnComponentRule&NoVTextRule&NoWatchAfterAwaitRule&ObjectCurlyNewlineRule&ObjectCurlySpacingRule&ObjectPropertyNewlineRule&ObjectShorthandRule&OneComponentPerFileRule&OperatorLinebreakRule&OrderInComponentsRule&PaddingLineBetweenBlocksRule&PaddingLineBetweenTagsRule&PaddingLinesInComponentDefinitionRule&PreferDefineOptionsRule&PreferImportFromVueRule&PreferPropTypeBooleanFirstRule&PreferSeparateStaticClassRule&PreferTemplateRule&PreferTrueAttributeShorthandRule&PropNameCasingRule&QuotePropsRule&RequireComponentIsRule&RequireDefaultPropRule&RequireDirectExportRule&RequireEmitValidatorRule&RequireExplicitEmitsRule&RequireExposeRule&RequireMacroVariableNameRule&RequireNamePropertyRule&RequirePropCommentRule&RequirePropTypeConstructorRule&RequirePropTypesRule&RequireRenderReturnRule&RequireSlotsAsFunctionsRule&RequireToggleInsideTransitionRule&RequireTypedObjectPropRule&RequireTypedRefRule&RequireVForKeyRule&RequireValidDefaultPropRule&ReturnInComputedPropertyRule&ReturnInEmitsValidatorRule&ScriptIndentRule&ScriptSetupUsesVarsRule&SinglelineHtmlElementContentNewlineRule&SortKeysRule$1&SpaceInParensRule&SpaceInfixOpsRule&SpaceUnaryOpsRule&StaticClassNamesOrderRule&TemplateCurlySpacingRule&ThisInTemplateRule&UseVOnExactRule&VBindStyleRule&VForDelimiterStyleRule&VOnEventHyphenationRule&VOnFunctionCallRule&VOnHandlerStyleRule&VOnStyleRule&VSlotStyleRule&ValidAttributeNameRule&ValidDefineEmitsRule&ValidDefineOptionsRule&ValidDefinePropsRule&ValidModelDefinitionRule&ValidNextTickRule&ValidTemplateRootRule&ValidVBindSyncRule&ValidVBindRule&ValidVCloakRule&ValidVElseIfRule&ValidVElseRule&ValidVForRule&ValidVHtmlRule&ValidVIfRule&ValidVIsRule&ValidVMemoRule&ValidVModelRule&ValidVOnRule&ValidVOnceRule&ValidVPreRule&ValidVShowRule&ValidVSlotRule&ValidVTextRule&BetterRegexRule&CatchErrorNameRule&ConsistentDestructuringRule&ConsistentFunctionScopingRule&CustomErrorDefinitionRule&EmptyBraceSpacesRule&ErrorMessageRule&EscapeCaseRule&ExpiringTodoCommentsRule&ExplicitLengthCheckRule&FilenameCaseRule&ImportStyleRule&NewForBuiltinsRule&NoAbusiveEslintDisableRule&NoArrayCallbackReferenceRule&NoArrayForEachRule&NoArrayMethodThisArgumentRule&NoArrayPushPushRule&NoArrayReduceRule&NoAwaitExpressionMemberRule&NoConsoleSpacesRule&NoDocumentCookieRule&NoEmptyFileRule&NoForLoopRule&NoHexEscapeRule&NoInstanceofArrayRule&NoInvalidRemoveEventListenerRule&NoKeywordPrefixRule&NoLonelyIfRule&NoNegatedConditionRule&NoNestedTernaryRule&NoNewArrayRule&NoNewBufferRule&NoNullRule&NoObjectAsDefaultParameterRule&NoProcessExitRule&NoStaticOnlyClassRule&NoThenableRule&NoThisAssignmentRule&NoTypeofUndefinedRule&NoUnnecessaryAwaitRule&NoUnreadableArrayDestructuringRule&NoUnreadableIifeRule&NoUnusedPropertiesRule$1&NoUselessFallbackInSpreadRule&NoUselessLengthCheckRule&NoUselessPromiseResolveRejectRule&NoUselessSpreadRule&NoUselessSwitchCaseRule&NoUselessUndefinedRule&NoZeroFractionsRule&NumberLiteralCaseRule&NumericSeparatorsStyleRule&PreferAddEventListenerRule&PreferArrayFindRule&PreferArrayFlatMapRule&PreferArrayFlatRule&PreferArrayIndexOfRule&PreferArraySomeRule&PreferAtRule&PreferBlobReadingMethodsRule&PreferCodePointRule&PreferDateNowRule&PreferDefaultParametersRule&PreferDomNodeAppendRule&PreferDomNodeDatasetRule&PreferDomNodeRemoveRule&PreferDomNodeTextContentRule&PreferEventTargetRule&PreferExportFromRule&PreferIncludesRule&PreferJsonParseBufferRule&PreferKeyboardEventKeyRule&PreferLogicalOperatorOverTernaryRule&PreferMathTruncRule&PreferModernDomApisRule&PreferModernMathApisRule&PreferModuleRule&PreferNativeCoercionFunctionsRule&PreferNegativeIndexRule&PreferNodeProtocolRule&PreferNumberPropertiesRule&PreferObjectFromEntriesRule&PreferOptionalCatchBindingRule&PreferPrototypeMethodsRule&PreferQuerySelectorRule&PreferReflectApplyRule&PreferRegexpTestRule&PreferSetHasRule&PreferSetSizeRule&PreferSpreadRule&PreferStringReplaceAllRule&PreferStringSliceRule&PreferStringStartsEndsWithRule&PreferStringTrimStartEndRule&PreferSwitchRule&PreferTernaryRule&PreferTopLevelAwaitRule&PreferTypeErrorRule&PreventAbbreviationsRule&RelativeUrlStyleRule&RequireArrayJoinSeparatorRule&RequireNumberToFixedDigitsArgumentRule&RequirePostMessageTargetOriginRule&StringContentRule&SwitchCaseBracesRule&TemplateIndentRule&TextEncodingIdentifierCaseRule&ThrowNewErrorRule&ImportIndexRule&NoArrayInstanceofRule&NoFnReferenceInIteratorRule&NoReduceRule&NoUnsafeRegexRule&PreferDatasetRule&PreferEventKeyRule&PreferExponentiationOperatorRule&PreferFlatMapRule&PreferNodeAppendRule&PreferNodeRemoveRule&PreferObjectHasOwnRule&PreferReplaceAllRule&PreferStartsEndsWithRule&PreferTextContentRule&PreferTrimStartEndRule&RegexShorthandRule&DisableEnablePairRule&NoAggregatingEnableRule&NoDuplicateDisableRule&NoRestrictedDisableRule&NoUnlimitedDisableRule&NoUnusedDisableRule&NoUnusedEnableRule&NoUseRule&RequireDescriptionRule$2&{'test/no-only-tests':RuleConfig<[]>;}>,false>,\"plugins\">": {
            "properties": {
                "files": {
                    "description": "An array of glob patterns indicating the files that the configuration object should apply to. If not specified, the configuration object applies to all files.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignores": {
                    "description": "An array of glob patterns indicating the files that the configuration object should not apply to. If not specified, the configuration object applies to all files matched by files.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "languageOptions": {
                    "$ref": "#/definitions/LanguageOptions",
                    "description": "An object containing settings related to how JavaScript is configured for linting."
                },
                "linterOptions": {
                    "$ref": "#/definitions/LinterOptions",
                    "description": "An object containing settings related to the linting process."
                },
                "processor": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Linter.Processor<string|Linter.ProcessorFile>"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Either an object containing `preprocess()` and `postprocess()` methods or a string indicating the name of a processor inside of a plugin (i.e., `\"pluginName/processorName\"`)."
                },
                "rules": {
                    "$ref": "#/definitions/Partial<MergeIntersection<Prefix<Unprefix<TypeScriptRules,\"@typescript-eslint/\">,\"ts/\">&Prefix<Unprefix<MergeIntersection<PreferLowercaseTitleRule&MaxNestedDescribeRule&NoIdenticalTitleRule&NoFocusedTestsRule&NoConditionalTestsRule&ExpectExpectRule&ConsistentTestItRule&PreferToBeRule&NoHooksRule&NoRestrictedViMethodsRule&ConsistentTestFilenameRule&MaxExpectsRule&NoAliasMethodsRule&NoCommentedOutTestsRule&NoConditionalExpectRule&NoConditionalInTestRule&NoDisabledTestsRule&NoDoneCallbackRule&NoDuplicateHooksRule&NoLargeSnapshotsRule&NoInterpolationInSnapshotsRule&NoMocksImportRule&NoRestrictedMatchersRule&NoStandaloneExpectRule&NoTestPrefixesRule&NoTestReturnStatementRule&PreferCalledWithRule&ValidTitleRule&ValidExpectRule&PreferToBeFalsyRule&PreferToBeObjectRule&PreferToBeTruthyRule&PreferToHaveLengthRule&PreferEqualityMatcherRule&PreferStrictEqualRule&PreferExpectResolvesRule&PreferEachRule&PreferHooksOnTopRule&PreferHooksInOrderRule&PreferMockPromiseShorthandRule&PreferSnapshotHintRule&ValidDescribeCallbackRule&RequireTopLevelDescribeRule&RequireToThrowMessageRule&RequireHookRule&PreferTodoRule&PreferSpyOnRule&PreferComparisonMatcherRule&PreferToContainRule>,\"vitest/\">,\"test/\">&Prefix<Unprefix<YmlRules,\"yml/\">,\"yaml/\">&Prefix<Unprefix<NRules,\"n/\">,\"node/\">&Prefix<StylisticRules,\"style/\">&Prefix<Rules,\"antfu/\">&NoUnresolvedRule&NamedRule&DefaultRule&NamespaceRule&NoNamespaceRule$2&ExportRule&NoMutableExportsRule&ExtensionsRule&NoRestrictedPathsRule&NoInternalModulesRule&GroupExportsRule&NoRelativePackagesRule&NoRelativeParentImportsRule&ConsistentTypeSpecifierStyleRule&NoSelfImportRule&NoCycleRule&NoNamedDefaultRule&NoNamedAsDefaultRule&NoNamedAsDefaultMemberRule&NoAnonymousDefaultExportRule&NoUnusedModulesRule&NoCommonjsRule&NoAmdRule&NoDuplicatesRule&FirstRule&MaxDependenciesRule&NoExtraneousDependenciesRule&NoAbsolutePathRule&NoNodejsModulesRule&NoWebpackLoaderSyntaxRule&OrderRule&NewlineAfterImportRule&PreferDefaultExportRule&NoDefaultExportRule&NoNamedExportRule&NoDynamicRequireRule&UnambiguousRule&NoUnassignedImportRule&NoUselessPathSegmentsRule&DynamicImportChunknameRule&NoImportModuleExportsRule&NoEmptyNamedBlocksRule&ExportsLastRule&NoDeprecatedRule$1&ImportsFirstRule&AccessorPairsRule&ArrayBracketNewlineRule$2&ArrayBracketSpacingRule$2&ArrayCallbackReturnRule&ArrayElementNewlineRule$2&ArrowBodyStyleRule&ArrowParensRule&ArrowSpacingRule$1&BlockScopedVarRule&BlockSpacingRule$2&BraceStyleRule$2&CallbackReturnRule$2&CamelcaseRule$1&CapitalizedCommentsRule&ClassMethodsUseThisRule$1&CommaDangleRule$3&CommaSpacingRule$2&CommaStyleRule$2&ComplexityRule&ComputedPropertySpacingRule&ConsistentReturnRule&ConsistentThisRule&ConstructorSuperRule&CurlyRule&DefaultCaseRule&DefaultCaseLastRule&DefaultParamLastRule$1&DotLocationRule$1&DotNotationRule$2&EolLastRule&EqeqeqRule$1&ForDirectionRule&FuncCallSpacingRule$2&FuncNameMatchingRule&FuncNamesRule&FuncStyleRule&FunctionCallArgumentNewlineRule&FunctionParenNewlineRule&GeneratorStarSpacingRule&GetterReturnRule&GlobalRequireRule$2&GroupedAccessorPairsRule&GuardForInRule&HandleCallbackErrRule$2&IdBlacklistRule&IdDenylistRule&IdLengthRule&IdMatchRule&ImplicitArrowLinebreakRule&IndentRule$3&IndentLegacyRule&InitDeclarationsRule$1&JsxQuotesRule&KeySpacingRule$4&KeywordSpacingRule$2&LineCommentPositionRule&LinebreakStyleRule&LinesAroundCommentRule$1&LinesAroundDirectiveRule&LinesBetweenClassMembersRule$1&LogicalAssignmentOperatorsRule&MaxClassesPerFileRule&MaxDepthRule&MaxLenRule$1&MaxLinesRule&MaxLinesPerFunctionRule&MaxNestedCallbacksRule&MaxParamsRule&MaxStatementsRule&MaxStatementsPerLineRule&MultilineCommentStyleRule&MultilineTernaryRule$1&NewCapRule&NewParensRule&NewlineAfterVarRule&NewlineBeforeReturnRule&NewlinePerChainedCallRule&NoAlertRule&NoArrayConstructorRule$1&NoAsyncPromiseExecutorRule&NoAwaitInLoopRule&NoBitwiseRule&NoBufferConstructorRule&NoCallerRule&NoCaseDeclarationsRule&NoCatchShadowRule&NoClassAssignRule&NoCompareNegZeroRule&NoCondAssignRule&NoConfusingArrowRule&NoConsoleRule$1&NoConstAssignRule&NoConstantBinaryExpressionRule&NoConstantConditionRule$1&NoConstructorReturnRule&NoContinueRule&NoControlRegexRule&NoDebuggerRule&NoDeleteVarRule&NoDivRegexRule&NoDupeArgsRule&NoDupeClassMembersRule$1&NoDupeElseIfRule&NoDupeKeysRule$2&NoDuplicateCaseRule&NoDuplicateImportsRule&NoElseReturnRule&NoEmptyRule&NoEmptyCharacterClassRule&NoEmptyFunctionRule$1&NoEmptyPatternRule$1&NoEmptyStaticBlockRule&NoEqNullRule&NoEvalRule&NoExAssignRule&NoExtendNativeRule&NoExtraBindRule&NoExtraBooleanCastRule&NoExtraLabelRule&NoExtraParensRule$2&NoExtraSemiRule$1&NoFallthroughRule&NoFloatingDecimalRule$1&NoFuncAssignRule&NoGlobalAssignRule&NoImplicitCoercionRule&NoImplicitGlobalsRule&NoImpliedEvalRule$1&NoImportAssignRule&NoInlineCommentsRule&NoInnerDeclarationsRule&NoInvalidRegexpRule&NoInvalidThisRule$1&NoIrregularWhitespaceRule$3&NoIteratorRule&NoLabelVarRule&NoLabelsRule&NoLoneBlocksRule&NoLonelyIfRule$1&NoLoopFuncRule$1&NoLossOfPrecisionRule$2&NoMagicNumbersRule$1&NoMisleadingCharacterClassRule&NoMixedOperatorsRule&NoMixedRequiresRule$2&NoMixedSpacesAndTabsRule&NoMultiAssignRule&NoMultiSpacesRule$1&NoMultiStrRule$1&NoMultipleEmptyLinesRule$1&NoNativeReassignRule&NoNegatedConditionRule$1&NoNegatedInLhsRule&NoNestedTernaryRule$1&NoNewRule&NoNewFuncRule&NoNewNativeNonconstructorRule&NoNewObjectRule&NoNewRequireRule$2&NoNewSymbolRule&NoNewWrappersRule&NoNonoctalDecimalEscapeRule&NoObjCallsRule&NoObjectConstructorRule&NoOctalRule$1&NoOctalEscapeRule$1&NoParamReassignRule&NoPathConcatRule$2&NoPlusplusRule&NoProcessEnvRule$2&NoProcessExitRule$3&NoPromiseExecutorReturnRule&NoProtoRule&NoPrototypeBuiltinsRule&NoRedeclareRule$1&NoRegexSpacesRule&NoRestrictedExportsRule&NoRestrictedGlobalsRule&NoRestrictedImportsRule$1&NoRestrictedModulesRule&NoRestrictedPropertiesRule&NoRestrictedSyntaxRule$2&NoReturnAssignRule&NoReturnAwaitRule&NoScriptUrlRule&NoSelfAssignRule&NoSelfCompareRule&NoSequencesRule&NoSetterReturnRule&NoShadowRule$1&NoShadowRestrictedNamesRule&NoSpacedFuncRule&NoSparseArraysRule$2&NoSyncRule$2&NoTabsRule&NoTemplateCurlyInStringRule&NoTernaryRule&NoThisBeforeSuperRule&NoThrowLiteralRule$1&NoTrailingSpacesRule&NoUndefRule&NoUndefInitRule&NoUndefinedRule&NoUnderscoreDangleRule&NoUnexpectedMultilineRule&NoUnmodifiedLoopConditionRule&NoUnneededTernaryRule&NoUnreachableRule&NoUnreachableLoopRule&NoUnsafeFinallyRule&NoUnsafeNegationRule&NoUnsafeOptionalChainingRule&NoUnusedExpressionsRule$1&NoUnusedLabelsRule&NoUnusedPrivateClassMembersRule&NoUnusedVarsRule$2&NoUseBeforeDefineRule$1&NoUselessBackreferenceRule&NoUselessCallRule&NoUselessCatchRule$1&NoUselessComputedKeyRule&NoUselessConcatRule$1&NoUselessConstructorRule$1&NoUselessEscapeRule$1&NoUselessRenameRule&NoUselessReturnRule&NoVarRule&NoVoidRule&NoWarningCommentsRule&NoWhitespaceBeforePropertyRule&NoWithRule&NonblockStatementBodyPositionRule&ObjectCurlyNewlineRule$2&ObjectCurlySpacingRule$3&ObjectPropertyNewlineRule$2&ObjectShorthandRule$1&OneVarRule&OneVarDeclarationPerLineRule&OperatorAssignmentRule&OperatorLinebreakRule$1&PaddedBlocksRule&PaddingLineBetweenStatementsRule$1&PreferArrowCallbackRule&PreferConstRule&PreferDestructuringRule&PreferExponentiationOperatorRule$1&PreferNamedCaptureGroupRule&PreferNumericLiteralsRule&PreferObjectHasOwnRule$1&PreferObjectSpreadRule&PreferPromiseRejectErrorsRule&PreferReflectRule&PreferRegexLiteralsRule&PreferRestParamsRule&PreferSpreadRule$1&PreferTemplateRule$1&QuotePropsRule$2&QuotesRule$3&RadixRule&RequireAtomicUpdatesRule&RequireAwaitRule$1&RequireJsdocRule$1&RequireUnicodeRegexpRule&RequireYieldRule&RestSpreadSpacingRule&SemiRule$1&SemiSpacingRule&SemiStyleRule&SortImportsRule&SortKeysRule$3&SortVarsRule&SpaceBeforeBlocksRule$1&SpaceBeforeFunctionParenRule$1&SpaceInParensRule$1&SpaceInfixOpsRule$2&SpaceUnaryOpsRule$2&SpacedCommentRule$1&StrictRule&SwitchColonSpacingRule&SymbolDescriptionRule&TemplateCurlySpacingRule$1&TemplateTagSpacingRule&UnicodeBomRule&UseIsnanRule&ValidJsdocRule&ValidTypeofRule&VarsOnTopRule&WrapIifeRule&WrapRegexRule&YieldStarSpacingRule&YodaRule&ArrayBracketNewlineRule$1&ArrayBracketSpacingRule$1&ArrayElementNewlineRule$1&AutoRule&CommaDangleRule$2&CommaStyleRule$1&IndentRule$2&KeyNameCasingRule$1&KeySpacingRule$3&NoBigintLiteralsRule&NoBinaryExpressionRule&NoBinaryNumericLiteralsRule&NoCommentsRule&NoDupeKeysRule$1&NoEscapeSequenceInIdentifierRule&NoFloatingDecimalRule&NoHexadecimalNumericLiteralsRule&NoInfinityRule&NoIrregularWhitespaceRule$2&NoMultiStrRule&NoNanRule&NoNumberPropsRule&NoNumericSeparatorsRule&NoOctalEscapeRule&NoOctalNumericLiteralsRule&NoOctalRule&NoParenthesizedRule&NoPlusSignRule&NoRegexpLiteralsRule&NoSparseArraysRule$1&NoTemplateLiteralsRule&NoUndefinedValueRule&NoUnicodeCodepointEscapesRule&NoUselessEscapeRule&ObjectCurlyNewlineRule$1&ObjectCurlySpacingRule$2&ObjectPropertyNewlineRule$1&QuotePropsRule$1&QuotesRule$2&SortArrayValuesRule&SortKeysRule$2&SpaceUnaryOpsRule$1&ValidJsonNumberRule&VueCustomBlockNoParsingErrorRule$1&ArrayBracketNewlineRule&ArrayBracketSpacingRule&ArrayElementNewlineRule&ArrowSpacingRule&AttributeHyphenationRule&AttributesOrderRule&BlockLangRule&BlockOrderRule&BlockSpacingRule&BlockTagNewlineRule&BraceStyleRule&CamelcaseRule&CommaDangleRule&CommaSpacingRule&CommaStyleRule&CommentDirectiveRule&ComponentApiStyleRule&ComponentDefinitionNameCasingRule&ComponentNameInTemplateCasingRule$1&ComponentOptionsNameCasingRule&ComponentTagsOrderRule&CustomEventNameCasingRule&DefineEmitsDeclarationRule&DefineMacrosOrderRule&DefinePropsDeclarationRule&DotLocationRule&DotNotationRule&EqeqeqRule&FirstAttributeLinebreakRule&FuncCallSpacingRule&HtmlButtonHasTypeRule&HtmlClosingBracketNewlineRule&HtmlClosingBracketSpacingRule&HtmlCommentContentNewlineRule&HtmlCommentContentSpacingRule&HtmlCommentIndentRule&HtmlEndTagsRule&HtmlIndentRule&HtmlQuotesRule&HtmlSelfClosingRule&JsxUsesVarsRule&KeySpacingRule$1&KeywordSpacingRule&MatchComponentFileNameRule&MatchComponentImportNameRule&MaxAttributesPerLineRule&MaxLenRule&MaxLinesPerBlockRule&MultiWordComponentNamesRule&MultilineHtmlElementContentNewlineRule&MultilineTernaryRule&MustacheInterpolationSpacingRule&NewLineBetweenMultiLinePropertyRule&NextTickStyleRule&NoArrowFunctionsInWatchRule&NoAsyncInComputedPropertiesRule&NoBareStringsInTemplateRule&NoBooleanDefaultRule&NoChildContentRule&NoComputedPropertiesInDataRule&NoConsoleRule&NoConstantConditionRule&NoCustomModifiersOnVModelRule&NoDeprecatedDataObjectDeclarationRule&NoDeprecatedDestroyedLifecycleRule&NoDeprecatedDollarListenersApiRule&NoDeprecatedDollarScopedslotsApiRule&NoDeprecatedEventsApiRule&NoDeprecatedFilterRule&NoDeprecatedFunctionalTemplateRule&NoDeprecatedHtmlElementIsRule&NoDeprecatedInlineTemplateRule&NoDeprecatedModelDefinitionRule&NoDeprecatedPropsDefaultThisRule&NoDeprecatedRouterLinkTagPropRule&NoDeprecatedScopeAttributeRule&NoDeprecatedSlotAttributeRule&NoDeprecatedSlotScopeAttributeRule&NoDeprecatedVBindSyncRule&NoDeprecatedVIsRule&NoDeprecatedVOnNativeModifierRule&NoDeprecatedVOnNumberModifiersRule&NoDeprecatedVueConfigKeycodesRule&NoDupeKeysRule&NoDupeVElseIfRule&NoDuplicateAttrInheritanceRule&NoDuplicateAttributesRule&NoEmptyComponentBlockRule&NoEmptyPatternRule&NoExportInScriptSetupRule&NoExposeAfterAwaitRule&NoExtraParensRule&NoInvalidModelKeysRule&NoIrregularWhitespaceRule$1&NoLifecycleAfterAwaitRule&NoLoneTemplateRule&NoLossOfPrecisionRule&NoMultiSpacesRule&NoMultipleObjectsInClassRule&NoMultipleSlotArgsRule&NoMultipleTemplateRootRule&NoMutatingPropsRule&NoParsingErrorRule$1&NoPotentialComponentOptionTypoRule&NoRefAsOperandRule&NoRefObjectDestructureRule&NoRefObjectReactivityLossRule&NoRequiredPropWithDefaultRule&NoReservedComponentNamesRule&NoReservedKeysRule&NoReservedPropsRule&NoRestrictedBlockRule&NoRestrictedCallAfterAwaitRule&NoRestrictedClassRule&NoRestrictedComponentNamesRule&NoRestrictedComponentOptionsRule&NoRestrictedCustomEventRule&NoRestrictedHtmlElementsRule&NoRestrictedPropsRule&NoRestrictedStaticAttributeRule&NoRestrictedSyntaxRule&NoRestrictedVBindRule&NoRootVIfRule&NoSetupPropsDestructureRule&NoSetupPropsReactivityLossRule&NoSharedComponentDataRule&NoSideEffectsInComputedPropertiesRule&NoSpacesAroundEqualSignsInAttributeRule&NoSparseArraysRule&NoStaticInlineStylesRule&NoTemplateKeyRule&NoTemplateShadowRule&NoTemplateTargetBlankRule&NoTextareaMustacheRule&NoThisInBeforeRouteEnterRule&NoUndefComponentsRule&NoUndefPropertiesRule&NoUnsupportedFeaturesRule&NoUnusedComponentsRule&NoUnusedPropertiesRule&NoUnusedRefsRule&NoUnusedVarsRule&NoUseComputedPropertyLikeMethodRule&NoUseVElseWithVForRule&NoUseVIfWithVForRule&NoUselessConcatRule&NoUselessMustachesRule&NoUselessTemplateAttributesRule&NoUselessVBindRule&NoVForTemplateKeyOnChildRule&NoVForTemplateKeyRule&NoVHtmlRule$1&NoVModelArgumentRule&NoVTextVHtmlOnComponentRule&NoVTextRule&NoWatchAfterAwaitRule&ObjectCurlyNewlineRule&ObjectCurlySpacingRule&ObjectPropertyNewlineRule&ObjectShorthandRule&OneComponentPerFileRule&OperatorLinebreakRule&OrderInComponentsRule&PaddingLineBetweenBlocksRule&PaddingLineBetweenTagsRule&PaddingLinesInComponentDefinitionRule&PreferDefineOptionsRule&PreferImportFromVueRule&PreferPropTypeBooleanFirstRule&PreferSeparateStaticClassRule&PreferTemplateRule&PreferTrueAttributeShorthandRule&PropNameCasingRule&QuotePropsRule&RequireComponentIsRule&RequireDefaultPropRule&RequireDirectExportRule&RequireEmitValidatorRule&RequireExplicitEmitsRule&RequireExposeRule&RequireMacroVariableNameRule&RequireNamePropertyRule&RequirePropCommentRule&RequirePropTypeConstructorRule&RequirePropTypesRule&RequireRenderReturnRule&RequireSlotsAsFunctionsRule&RequireToggleInsideTransitionRule&RequireTypedObjectPropRule&RequireTypedRefRule&RequireVForKeyRule&RequireValidDefaultPropRule&ReturnInComputedPropertyRule&ReturnInEmitsValidatorRule&ScriptIndentRule&ScriptSetupUsesVarsRule&SinglelineHtmlElementContentNewlineRule&SortKeysRule$1&SpaceInParensRule&SpaceInfixOpsRule&SpaceUnaryOpsRule&StaticClassNamesOrderRule&TemplateCurlySpacingRule&ThisInTemplateRule&UseVOnExactRule&VBindStyleRule&VForDelimiterStyleRule&VOnEventHyphenationRule&VOnFunctionCallRule&VOnHandlerStyleRule&VOnStyleRule&VSlotStyleRule&ValidAttributeNameRule&ValidDefineEmitsRule&ValidDefineOptionsRule&ValidDefinePropsRule&ValidModelDefinitionRule&ValidNextTickRule&ValidTemplateRootRule&ValidVBindSyncRule&ValidVBindRule&ValidVCloakRule&ValidVElseIfRule&ValidVElseRule&ValidVForRule&ValidVHtmlRule&ValidVIfRule&ValidVIsRule&ValidVMemoRule&ValidVModelRule&ValidVOnRule&ValidVOnceRule&ValidVPreRule&ValidVShowRule&ValidVSlotRule&ValidVTextRule&BetterRegexRule&CatchErrorNameRule&ConsistentDestructuringRule&ConsistentFunctionScopingRule&CustomErrorDefinitionRule&EmptyBraceSpacesRule&ErrorMessageRule&EscapeCaseRule&ExpiringTodoCommentsRule&ExplicitLengthCheckRule&FilenameCaseRule&ImportStyleRule&NewForBuiltinsRule&NoAbusiveEslintDisableRule&NoArrayCallbackReferenceRule&NoArrayForEachRule&NoArrayMethodThisArgumentRule&NoArrayPushPushRule&NoArrayReduceRule&NoAwaitExpressionMemberRule&NoConsoleSpacesRule&NoDocumentCookieRule&NoEmptyFileRule&NoForLoopRule&NoHexEscapeRule&NoInstanceofArrayRule&NoInvalidRemoveEventListenerRule&NoKeywordPrefixRule&NoLonelyIfRule&NoNegatedConditionRule&NoNestedTernaryRule&NoNewArrayRule&NoNewBufferRule&NoNullRule&NoObjectAsDefaultParameterRule&NoProcessExitRule&NoStaticOnlyClassRule&NoThenableRule&NoThisAssignmentRule&NoTypeofUndefinedRule&NoUnnecessaryAwaitRule&NoUnreadableArrayDestructuringRule&NoUnreadableIifeRule&NoUnusedPropertiesRule$1&NoUselessFallbackInSpreadRule&NoUselessLengthCheckRule&NoUselessPromiseResolveRejectRule&NoUselessSpreadRule&NoUselessSwitchCaseRule&NoUselessUndefinedRule&NoZeroFractionsRule&NumberLiteralCaseRule&NumericSeparatorsStyleRule&PreferAddEventListenerRule&PreferArrayFindRule&PreferArrayFlatMapRule&PreferArrayFlatRule&PreferArrayIndexOfRule&PreferArraySomeRule&PreferAtRule&PreferBlobReadingMethodsRule&PreferCodePointRule&PreferDateNowRule&PreferDefaultParametersRule&PreferDomNodeAppendRule&PreferDomNodeDatasetRule&PreferDomNodeRemoveRule&PreferDomNodeTextContentRule&PreferEventTargetRule&PreferExportFromRule&PreferIncludesRule&PreferJsonParseBufferRule&PreferKeyboardEventKeyRule&PreferLogicalOperatorOverTernaryRule&PreferMathTruncRule&PreferModernDomApisRule&PreferModernMathApisRule&PreferModuleRule&PreferNativeCoercionFunctionsRule&PreferNegativeIndexRule&PreferNodeProtocolRule&PreferNumberPropertiesRule&PreferObjectFromEntriesRule&PreferOptionalCatchBindingRule&PreferPrototypeMethodsRule&PreferQuerySelectorRule&PreferReflectApplyRule&PreferRegexpTestRule&PreferSetHasRule&PreferSetSizeRule&PreferSpreadRule&PreferStringReplaceAllRule&PreferStringSliceRule&PreferStringStartsEndsWithRule&PreferStringTrimStartEndRule&PreferSwitchRule&PreferTernaryRule&PreferTopLevelAwaitRule&PreferTypeErrorRule&PreventAbbreviationsRule&RelativeUrlStyleRule&RequireArrayJoinSeparatorRule&RequireNumberToFixedDigitsArgumentRule&RequirePostMessageTargetOriginRule&StringContentRule&SwitchCaseBracesRule&TemplateIndentRule&TextEncodingIdentifierCaseRule&ThrowNewErrorRule&ImportIndexRule&NoArrayInstanceofRule&NoFnReferenceInIteratorRule&NoReduceRule&NoUnsafeRegexRule&PreferDatasetRule&PreferEventKeyRule&PreferExponentiationOperatorRule&PreferFlatMapRule&PreferNodeAppendRule&PreferNodeRemoveRule&PreferObjectHasOwnRule&PreferReplaceAllRule&PreferStartsEndsWithRule&PreferTextContentRule&PreferTrimStartEndRule&RegexShorthandRule&DisableEnablePairRule&NoAggregatingEnableRule&NoDuplicateDisableRule&NoRestrictedDisableRule&NoUnlimitedDisableRule&NoUnusedDisableRule&NoUnusedEnableRule&NoUseRule&RequireDescriptionRule$2&{'test/no-only-tests':RuleConfig<[]>;}>&Record<string,RuleConfig<any[]>>>",
                    "description": "An object containing the configured rules. When `files` or `ignores` are specified, these rule configurations are only available to the matching files."
                },
                "settings": {
                    "$ref": "#/definitions/Record<string,any>",
                    "description": "An object containing name-value pairs of information that should be available to all rules."
                }
            },
            "type": "object"
        },
        "OneComponentPerFileRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce that each component should be in its own file."
        },
        "OneVarDeclarationPerLineOption": {
            "description": "Option.",
            "enum": [
                "always",
                "initializations"
            ],
            "type": "string"
        },
        "OneVarDeclarationPerLineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/OneVarDeclarationPerLineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow newlines around variable declarations."
        },
        "OneVarOption": {
            "anyOf": [
                {
                    "properties": {
                        "const": {
                            "enum": [
                                "always",
                                "consecutive",
                                "never"
                            ],
                            "type": "string"
                        },
                        "let": {
                            "enum": [
                                "always",
                                "consecutive",
                                "never"
                            ],
                            "type": "string"
                        },
                        "separateRequires": {
                            "type": "boolean"
                        },
                        "var": {
                            "enum": [
                                "always",
                                "consecutive",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "initialized": {
                            "enum": [
                                "always",
                                "consecutive",
                                "never"
                            ],
                            "type": "string"
                        },
                        "uninitialized": {
                            "enum": [
                                "always",
                                "consecutive",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "consecutive",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "OneVarRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/OneVarOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce variables to be declared either together or separately in functions."
        },
        "OperatorAssignmentOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "OperatorAssignmentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/OperatorAssignmentOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow assignment operator shorthand where possible."
        },
        "OperatorLinebreakConfig": {
            "description": "Config.",
            "properties": {
                "overrides": {
                    "additionalProperties": {
                        "enum": [
                            "after",
                            "before",
                            "ignore",
                            "none"
                        ],
                        "type": "string"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "OperatorLinebreakConfig$1": {
            "description": "Config.",
            "properties": {
                "overrides": {
                    "additionalProperties": {
                        "enum": [
                            "after",
                            "before",
                            "ignore",
                            "none"
                        ],
                        "type": "string"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "OperatorLinebreakOption": {
            "description": "Option.",
            "enum": [
                "after",
                "before",
                "none"
            ],
            "type": "string"
        },
        "OperatorLinebreakOption$1": {
            "description": "Option.",
            "enum": [
                "after",
                "before",
                "none"
            ],
            "type": "string"
        },
        "OperatorLinebreakRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/OperatorLinebreakOption"
                        },
                        {
                            "$ref": "#/definitions/OperatorLinebreakConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent linebreak style for operators in `<template>`."
        },
        "OperatorLinebreakRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/OperatorLinebreakOption$1"
                        },
                        {
                            "$ref": "#/definitions/OperatorLinebreakConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent linebreak style for operators."
        },
        "OptionValue": {
            "enum": [
                "always",
                "any",
                "never"
            ],
            "type": "string"
        },
        "OptionalityOrderOptions": {
            "enum": [
                "optional-first",
                "required-first"
            ],
            "type": "string"
        },
        "OrderInComponentsOption": {
            "description": "Option.",
            "properties": {
                "order": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OrderInComponentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/OrderInComponentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce order of properties in components."
        },
        "OrderOption": {
            "description": "Option.",
            "properties": {
                "alphabetize": {
                    "properties": {
                        "caseInsensitive": {
                            "type": "boolean"
                        },
                        "order": {
                            "enum": [
                                "asc",
                                "desc",
                                "ignore"
                            ],
                            "type": "string"
                        },
                        "orderImportKind": {
                            "enum": [
                                "asc",
                                "desc",
                                "ignore"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "distinctGroup": {
                    "type": "boolean"
                },
                "groups": {
                    "items": {},
                    "type": "array"
                },
                "newlines-between": {
                    "enum": [
                        "always",
                        "always-and-inside-groups",
                        "ignore",
                        "never"
                    ],
                    "type": "string"
                },
                "pathGroups": {
                    "items": {
                        "properties": {
                            "group": {
                                "enum": [
                                    "builtin",
                                    "external",
                                    "index",
                                    "internal",
                                    "object",
                                    "parent",
                                    "sibling",
                                    "type",
                                    "unknown"
                                ],
                                "type": "string"
                            },
                            "pattern": {
                                "type": "string"
                            },
                            "patternOptions": {
                                "additionalProperties": {},
                                "type": "object"
                            },
                            "position": {
                                "enum": [
                                    "after",
                                    "before"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "pathGroupsExcludedImportTypes": {
                    "items": {},
                    "type": "array"
                },
                "warnOnUnassignedImports": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "OrderOptions": {
            "enum": [
                "alphabetically",
                "alphabetically-case-insensitive",
                "as-written",
                "natural",
                "natural-case-insensitive"
            ],
            "type": "string"
        },
        "OrderRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/OrderOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce a convention in module import order."
        },
        "PaddedBlocksConfig": {
            "description": "Config.",
            "properties": {
                "allowSingleLineBlocks": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PaddedBlocksOption": {
            "anyOf": [
                {
                    "properties": {
                        "blocks": {
                            "enum": [
                                "always",
                                "never"
                            ],
                            "type": "string"
                        },
                        "classes": {
                            "enum": [
                                "always",
                                "never"
                            ],
                            "type": "string"
                        },
                        "switches": {
                            "enum": [
                                "always",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "PaddedBlocksRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PaddedBlocksOption"
                        },
                        {
                            "$ref": "#/definitions/PaddedBlocksConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow padding within blocks."
        },
        "PaddingLineBetweenBlocksOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PaddingLineBetweenBlocksRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PaddingLineBetweenBlocksOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow padding lines between blocks."
        },
        "PaddingLineBetweenStatementsRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "properties": {
                            "blankLine": {
                                "$ref": "#/definitions/PaddingType"
                            },
                            "next": {
                                "$ref": "#/definitions/StatementType"
                            },
                            "prev": {
                                "$ref": "#/definitions/StatementType"
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow padding lines between statements."
        },
        "PaddingLineBetweenStatementsRuleConfig$1": {
            "anyOf": [
                {
                    "additionalItems": {
                        "properties": {
                            "blankLine": {
                                "$ref": "#/definitions/PaddingType$1"
                            },
                            "next": {
                                "$ref": "#/definitions/StatementType$1"
                            },
                            "prev": {
                                "$ref": "#/definitions/StatementType$1"
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow padding lines between statements."
        },
        "PaddingLineBetweenTagsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "description": "Option.",
                            "items": {
                                "properties": {
                                    "blankLine": {
                                        "enum": [
                                            "always",
                                            "consistent",
                                            "never"
                                        ],
                                        "type": "string"
                                    },
                                    "next": {
                                        "type": "string"
                                    },
                                    "prev": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow newlines between sibling tags in template."
        },
        "PaddingLinesInComponentDefinitionOption": {
            "anyOf": [
                {
                    "properties": {
                        "betweenOptions": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        },
                        "groupSingleLineProperties": {
                            "type": "boolean"
                        },
                        "withinOption": {
                            "anyOf": [
                                {
                                    "additionalProperties": {
                                        "anyOf": [
                                            {
                                                "properties": {
                                                    "betweenItems": {
                                                        "enum": [
                                                            "always",
                                                            "ignore",
                                                            "never"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "withinEach": {
                                                        "enum": [
                                                            "always",
                                                            "ignore",
                                                            "never"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "enum": [
                                                    "always",
                                                    "ignore",
                                                    "never"
                                                ],
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        "always",
                                        "ignore",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "PaddingLinesInComponentDefinitionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PaddingLinesInComponentDefinitionOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow padding lines in component definition."
        },
        "PaddingType": {
            "description": "Option.",
            "enum": [
                "always",
                "any",
                "never"
            ],
            "type": "string"
        },
        "PaddingType$1": {
            "description": "Option.",
            "enum": [
                "always",
                "any",
                "never"
            ],
            "type": "string"
        },
        "ParameterPropertiesOption": {
            "properties": {
                "allow": {
                    "items": {
                        "$ref": "#/definitions/Modifier"
                    },
                    "type": "array"
                },
                "prefer": {
                    "enum": [
                        "class-property",
                        "parameter-property"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ParameterPropertiesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ParameterPropertiesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow parameter properties in class constructors."
        },
        "ParserOptions": {
            "description": "Parser options.",
            "properties": {
                "comment": {
                    "type": "boolean"
                },
                "debugLevel": {
                    "$ref": "#/definitions/DebugLevel"
                },
                "ecmaFeatures": {
                    "$ref": "#/definitions/EcmaFeatures",
                    "description": "An object indicating which additional language features you'd like to use."
                },
                "ecmaVersion": {
                    "$ref": "#/definitions/EcmaVersion",
                    "default": 2018,
                    "description": "Accepts any valid ECMAScript version number or `'latest'`:\n\n- A version: es3, es5, es6, es7, es8, es9, es10, es11, es12, es13, es14, ..., or\n- A year: es2015, es2016, es2017, es2018, es2019, es2020, es2021, es2022, es2023, ..., or\n- `'latest'`\n\nWhen it's a version or a year, the value must be a number - so do not include the `es` prefix.\n\nSpecifies the version of ECMAScript syntax you want to use. This is used by the parser to determine how to perform scope analysis, and it affects the default"
                },
                "emitDecoratorMetadata": {
                    "default": "undefined",
                    "description": "This option allow you to tell parser to act as if `emitDecoratorMetadata: true` is set in `tsconfig.json`, but without [type-aware linting](https://typescript-eslint.io/linting/typed-linting).\nIn other words, you don't have to specify `parserOptions.project` in this case, making the linting process faster.",
                    "type": "boolean"
                },
                "errorOnTypeScriptSyntacticAndSemanticIssues": {
                    "type": "boolean"
                },
                "errorOnUnknownASTType": {
                    "type": "boolean"
                },
                "extraFileExtensions": {
                    "description": "This option allows you to provide one or more additional file extensions which should be considered in the TypeScript Program compilation.\n\nThe default extensions are `.ts`, `.tsx`, `.js`, and `.jsx`. Add extensions starting with `.`, followed by the file extension.\nE.g. for a `.vue` file use `\"extraFileExtensions: [\".vue\"]`.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "filePath": {
                    "type": "string"
                },
                "jsxFragmentName": {
                    "default": null,
                    "description": "The identifier that's used for JSX fragment elements (after transpilation).\nIf `null`, assumes transpilation will always use a member of the configured `jsxPragma`.\nThis should not be a member expression - just the root identifier (i.e. use `\"h\"` instead of `\"h.Fragment\"`).\n\nIf you provide `parserOptions.project`, you do not need to set this, as it will automatically detected from the compiler.",
                    "type": "string"
                },
                "jsxPragma": {
                    "default": "'React'",
                    "description": "The identifier that's used for JSX Elements creation (after transpilation).\nIf you're using a library other than React (like `preact`), then you should change this value.\nIf you are using the [new JSX transform](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) you can set this to `null`.\n\nThis should not be a member expression - just the root identifier (i.e. use `\"React\"` instead of `\"React.createElement\"`).\n\nIf you provide `parserOptions.project`, you do not need to set this, as it will automatically detected from the compiler.",
                    "type": "string"
                },
                "lib": {
                    "default": "['es2018']",
                    "description": "For valid options, see the [TypeScript compiler options](https://www.typescriptlang.org/tsconfig#lib).\n\nSpecifies the TypeScript `libs` that are available.\nThis is used by the scope analyser to ensure there are global variables declared for the types exposed by TypeScript.\n\nIf you provide `parserOptions.project`, you do not need to set this, as it will automatically detected from the compiler.",
                    "items": {
                        "$ref": "#/definitions/Lib"
                    },
                    "type": "array"
                },
                "loc": {
                    "type": "boolean"
                },
                "parser": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Record<string,string|(string&{zz_IGNORE_ME?:never;})>"
                        },
                        {
                            "enum": [
                                "@typescript-eslint/parser",
                                "babel-eslint",
                                "jsonc-eslint-parser",
                                "vue-eslint-parser"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Parser."
                },
                "project": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "const": true,
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "default": "undefined",
                    "description": "This option allows you to provide a path to your project's `tsconfig.json`.\n**This setting is required if you want to use rules which require type information.**\nRelative paths are interpreted relative to the current working directory if `tsconfigRootDir` is not set.\nIf you intend on running ESLint from directories other than the project root, you should consider using `tsconfigRootDir`."
                },
                "projectFolderIgnoreList": {
                    "default": "['**‎/node_modules/**']",
                    "description": "This option allows you to ignore folders from being included in your provided list of `project`s.\nThis is useful if you have configured glob patterns, but want to make sure you ignore certain folders.\n\nIt accepts an array of globs to exclude from the `project` globs.\n\nFor example, by default it will ensure that a glob like `./**‎/tsconfig.json` will not match any `tsconfigs` within your `node_modules` folder (some npm packages do not exclude their source files from their published packages).",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/RegExp"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "range": {
                    "type": "boolean"
                },
                "sourceType": {
                    "$ref": "#/definitions/SourceType",
                    "default": "'script'",
                    "description": "Set to \"script\" (default) or \"module\" if your code is in ECMAScript modules."
                },
                "templateTokenizer": {
                    "properties": {
                        "pug": {
                            "$ref": "#/definitions/LiteralUnion<\"vue-eslint-parser-template-tokenizer-pug\",string>"
                        }
                    },
                    "type": "object"
                },
                "tokens": {
                    "type": "boolean"
                },
                "tsconfigRootDir": {
                    "description": "This option allows you to provide the root directory for relative tsconfig paths specified in the `project` option above.",
                    "type": "string"
                },
                "useJSXTextNode": {
                    "type": "boolean"
                },
                "vueFeatures": {
                    "properties": {
                        "filter": {
                            "description": "You can use `parserOptions.vueFeatures.filter` property to specify whether to parse the Vue2 filter.\n\nIf you specify `false`, the parser does not parse `|` as a filter.",
                            "type": "boolean"
                        },
                        "interpolationAsNonHTML": {
                            "description": "You can use `parserOptions.vueFeatures.interpolationAsNonHTML` property to specify whether to parse the interpolation as HTML.\n\nIf you specify `true`, the parser handles the interpolation as non-HTML (However, you can use HTML escaping in the interpolation).",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "warnOnUnsupportedTypeScriptVersion": {
                    "default": true,
                    "description": "This option allows you to toggle the warning that the parser will give you if you use a version of TypeScript which is not explicitly supported.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Partial<MergeIntersection<Prefix<Unprefix<TypeScriptRules,\"@typescript-eslint/\">,\"ts/\">&Prefix<Unprefix<MergeIntersection<PreferLowercaseTitleRule&MaxNestedDescribeRule&NoIdenticalTitleRule&NoFocusedTestsRule&NoConditionalTestsRule&ExpectExpectRule&ConsistentTestItRule&PreferToBeRule&NoHooksRule&NoRestrictedViMethodsRule&ConsistentTestFilenameRule&MaxExpectsRule&NoAliasMethodsRule&NoCommentedOutTestsRule&NoConditionalExpectRule&NoConditionalInTestRule&NoDisabledTestsRule&NoDoneCallbackRule&NoDuplicateHooksRule&NoLargeSnapshotsRule&NoInterpolationInSnapshotsRule&NoMocksImportRule&NoRestrictedMatchersRule&NoStandaloneExpectRule&NoTestPrefixesRule&NoTestReturnStatementRule&PreferCalledWithRule&ValidTitleRule&ValidExpectRule&PreferToBeFalsyRule&PreferToBeObjectRule&PreferToBeTruthyRule&PreferToHaveLengthRule&PreferEqualityMatcherRule&PreferStrictEqualRule&PreferExpectResolvesRule&PreferEachRule&PreferHooksOnTopRule&PreferHooksInOrderRule&PreferMockPromiseShorthandRule&PreferSnapshotHintRule&ValidDescribeCallbackRule&RequireTopLevelDescribeRule&RequireToThrowMessageRule&RequireHookRule&PreferTodoRule&PreferSpyOnRule&PreferComparisonMatcherRule&PreferToContainRule>,\"vitest/\">,\"test/\">&Prefix<Unprefix<YmlRules,\"yml/\">,\"yaml/\">&Prefix<Unprefix<NRules,\"n/\">,\"node/\">&Prefix<StylisticRules,\"style/\">&Prefix<Rules,\"antfu/\">&NoUnresolvedRule&NamedRule&DefaultRule&NamespaceRule&NoNamespaceRule$2&ExportRule&NoMutableExportsRule&ExtensionsRule&NoRestrictedPathsRule&NoInternalModulesRule&GroupExportsRule&NoRelativePackagesRule&NoRelativeParentImportsRule&ConsistentTypeSpecifierStyleRule&NoSelfImportRule&NoCycleRule&NoNamedDefaultRule&NoNamedAsDefaultRule&NoNamedAsDefaultMemberRule&NoAnonymousDefaultExportRule&NoUnusedModulesRule&NoCommonjsRule&NoAmdRule&NoDuplicatesRule&FirstRule&MaxDependenciesRule&NoExtraneousDependenciesRule&NoAbsolutePathRule&NoNodejsModulesRule&NoWebpackLoaderSyntaxRule&OrderRule&NewlineAfterImportRule&PreferDefaultExportRule&NoDefaultExportRule&NoNamedExportRule&NoDynamicRequireRule&UnambiguousRule&NoUnassignedImportRule&NoUselessPathSegmentsRule&DynamicImportChunknameRule&NoImportModuleExportsRule&NoEmptyNamedBlocksRule&ExportsLastRule&NoDeprecatedRule$1&ImportsFirstRule&AccessorPairsRule&ArrayBracketNewlineRule$2&ArrayBracketSpacingRule$2&ArrayCallbackReturnRule&ArrayElementNewlineRule$2&ArrowBodyStyleRule&ArrowParensRule&ArrowSpacingRule$1&BlockScopedVarRule&BlockSpacingRule$2&BraceStyleRule$2&CallbackReturnRule$2&CamelcaseRule$1&CapitalizedCommentsRule&ClassMethodsUseThisRule$1&CommaDangleRule$3&CommaSpacingRule$2&CommaStyleRule$2&ComplexityRule&ComputedPropertySpacingRule&ConsistentReturnRule&ConsistentThisRule&ConstructorSuperRule&CurlyRule&DefaultCaseRule&DefaultCaseLastRule&DefaultParamLastRule$1&DotLocationRule$1&DotNotationRule$2&EolLastRule&EqeqeqRule$1&ForDirectionRule&FuncCallSpacingRule$2&FuncNameMatchingRule&FuncNamesRule&FuncStyleRule&FunctionCallArgumentNewlineRule&FunctionParenNewlineRule&GeneratorStarSpacingRule&GetterReturnRule&GlobalRequireRule$2&GroupedAccessorPairsRule&GuardForInRule&HandleCallbackErrRule$2&IdBlacklistRule&IdDenylistRule&IdLengthRule&IdMatchRule&ImplicitArrowLinebreakRule&IndentRule$3&IndentLegacyRule&InitDeclarationsRule$1&JsxQuotesRule&KeySpacingRule$4&KeywordSpacingRule$2&LineCommentPositionRule&LinebreakStyleRule&LinesAroundCommentRule$1&LinesAroundDirectiveRule&LinesBetweenClassMembersRule$1&LogicalAssignmentOperatorsRule&MaxClassesPerFileRule&MaxDepthRule&MaxLenRule$1&MaxLinesRule&MaxLinesPerFunctionRule&MaxNestedCallbacksRule&MaxParamsRule&MaxStatementsRule&MaxStatementsPerLineRule&MultilineCommentStyleRule&MultilineTernaryRule$1&NewCapRule&NewParensRule&NewlineAfterVarRule&NewlineBeforeReturnRule&NewlinePerChainedCallRule&NoAlertRule&NoArrayConstructorRule$1&NoAsyncPromiseExecutorRule&NoAwaitInLoopRule&NoBitwiseRule&NoBufferConstructorRule&NoCallerRule&NoCaseDeclarationsRule&NoCatchShadowRule&NoClassAssignRule&NoCompareNegZeroRule&NoCondAssignRule&NoConfusingArrowRule&NoConsoleRule$1&NoConstAssignRule&NoConstantBinaryExpressionRule&NoConstantConditionRule$1&NoConstructorReturnRule&NoContinueRule&NoControlRegexRule&NoDebuggerRule&NoDeleteVarRule&NoDivRegexRule&NoDupeArgsRule&NoDupeClassMembersRule$1&NoDupeElseIfRule&NoDupeKeysRule$2&NoDuplicateCaseRule&NoDuplicateImportsRule&NoElseReturnRule&NoEmptyRule&NoEmptyCharacterClassRule&NoEmptyFunctionRule$1&NoEmptyPatternRule$1&NoEmptyStaticBlockRule&NoEqNullRule&NoEvalRule&NoExAssignRule&NoExtendNativeRule&NoExtraBindRule&NoExtraBooleanCastRule&NoExtraLabelRule&NoExtraParensRule$2&NoExtraSemiRule$1&NoFallthroughRule&NoFloatingDecimalRule$1&NoFuncAssignRule&NoGlobalAssignRule&NoImplicitCoercionRule&NoImplicitGlobalsRule&NoImpliedEvalRule$1&NoImportAssignRule&NoInlineCommentsRule&NoInnerDeclarationsRule&NoInvalidRegexpRule&NoInvalidThisRule$1&NoIrregularWhitespaceRule$3&NoIteratorRule&NoLabelVarRule&NoLabelsRule&NoLoneBlocksRule&NoLonelyIfRule$1&NoLoopFuncRule$1&NoLossOfPrecisionRule$2&NoMagicNumbersRule$1&NoMisleadingCharacterClassRule&NoMixedOperatorsRule&NoMixedRequiresRule$2&NoMixedSpacesAndTabsRule&NoMultiAssignRule&NoMultiSpacesRule$1&NoMultiStrRule$1&NoMultipleEmptyLinesRule$1&NoNativeReassignRule&NoNegatedConditionRule$1&NoNegatedInLhsRule&NoNestedTernaryRule$1&NoNewRule&NoNewFuncRule&NoNewNativeNonconstructorRule&NoNewObjectRule&NoNewRequireRule$2&NoNewSymbolRule&NoNewWrappersRule&NoNonoctalDecimalEscapeRule&NoObjCallsRule&NoObjectConstructorRule&NoOctalRule$1&NoOctalEscapeRule$1&NoParamReassignRule&NoPathConcatRule$2&NoPlusplusRule&NoProcessEnvRule$2&NoProcessExitRule$3&NoPromiseExecutorReturnRule&NoProtoRule&NoPrototypeBuiltinsRule&NoRedeclareRule$1&NoRegexSpacesRule&NoRestrictedExportsRule&NoRestrictedGlobalsRule&NoRestrictedImportsRule$1&NoRestrictedModulesRule&NoRestrictedPropertiesRule&NoRestrictedSyntaxRule$2&NoReturnAssignRule&NoReturnAwaitRule&NoScriptUrlRule&NoSelfAssignRule&NoSelfCompareRule&NoSequencesRule&NoSetterReturnRule&NoShadowRule$1&NoShadowRestrictedNamesRule&NoSpacedFuncRule&NoSparseArraysRule$2&NoSyncRule$2&NoTabsRule&NoTemplateCurlyInStringRule&NoTernaryRule&NoThisBeforeSuperRule&NoThrowLiteralRule$1&NoTrailingSpacesRule&NoUndefRule&NoUndefInitRule&NoUndefinedRule&NoUnderscoreDangleRule&NoUnexpectedMultilineRule&NoUnmodifiedLoopConditionRule&NoUnneededTernaryRule&NoUnreachableRule&NoUnreachableLoopRule&NoUnsafeFinallyRule&NoUnsafeNegationRule&NoUnsafeOptionalChainingRule&NoUnusedExpressionsRule$1&NoUnusedLabelsRule&NoUnusedPrivateClassMembersRule&NoUnusedVarsRule$2&NoUseBeforeDefineRule$1&NoUselessBackreferenceRule&NoUselessCallRule&NoUselessCatchRule$1&NoUselessComputedKeyRule&NoUselessConcatRule$1&NoUselessConstructorRule$1&NoUselessEscapeRule$1&NoUselessRenameRule&NoUselessReturnRule&NoVarRule&NoVoidRule&NoWarningCommentsRule&NoWhitespaceBeforePropertyRule&NoWithRule&NonblockStatementBodyPositionRule&ObjectCurlyNewlineRule$2&ObjectCurlySpacingRule$3&ObjectPropertyNewlineRule$2&ObjectShorthandRule$1&OneVarRule&OneVarDeclarationPerLineRule&OperatorAssignmentRule&OperatorLinebreakRule$1&PaddedBlocksRule&PaddingLineBetweenStatementsRule$1&PreferArrowCallbackRule&PreferConstRule&PreferDestructuringRule&PreferExponentiationOperatorRule$1&PreferNamedCaptureGroupRule&PreferNumericLiteralsRule&PreferObjectHasOwnRule$1&PreferObjectSpreadRule&PreferPromiseRejectErrorsRule&PreferReflectRule&PreferRegexLiteralsRule&PreferRestParamsRule&PreferSpreadRule$1&PreferTemplateRule$1&QuotePropsRule$2&QuotesRule$3&RadixRule&RequireAtomicUpdatesRule&RequireAwaitRule$1&RequireJsdocRule$1&RequireUnicodeRegexpRule&RequireYieldRule&RestSpreadSpacingRule&SemiRule$1&SemiSpacingRule&SemiStyleRule&SortImportsRule&SortKeysRule$3&SortVarsRule&SpaceBeforeBlocksRule$1&SpaceBeforeFunctionParenRule$1&SpaceInParensRule$1&SpaceInfixOpsRule$2&SpaceUnaryOpsRule$2&SpacedCommentRule$1&StrictRule&SwitchColonSpacingRule&SymbolDescriptionRule&TemplateCurlySpacingRule$1&TemplateTagSpacingRule&UnicodeBomRule&UseIsnanRule&ValidJsdocRule&ValidTypeofRule&VarsOnTopRule&WrapIifeRule&WrapRegexRule&YieldStarSpacingRule&YodaRule&ArrayBracketNewlineRule$1&ArrayBracketSpacingRule$1&ArrayElementNewlineRule$1&AutoRule&CommaDangleRule$2&CommaStyleRule$1&IndentRule$2&KeyNameCasingRule$1&KeySpacingRule$3&NoBigintLiteralsRule&NoBinaryExpressionRule&NoBinaryNumericLiteralsRule&NoCommentsRule&NoDupeKeysRule$1&NoEscapeSequenceInIdentifierRule&NoFloatingDecimalRule&NoHexadecimalNumericLiteralsRule&NoInfinityRule&NoIrregularWhitespaceRule$2&NoMultiStrRule&NoNanRule&NoNumberPropsRule&NoNumericSeparatorsRule&NoOctalEscapeRule&NoOctalNumericLiteralsRule&NoOctalRule&NoParenthesizedRule&NoPlusSignRule&NoRegexpLiteralsRule&NoSparseArraysRule$1&NoTemplateLiteralsRule&NoUndefinedValueRule&NoUnicodeCodepointEscapesRule&NoUselessEscapeRule&ObjectCurlyNewlineRule$1&ObjectCurlySpacingRule$2&ObjectPropertyNewlineRule$1&QuotePropsRule$1&QuotesRule$2&SortArrayValuesRule&SortKeysRule$2&SpaceUnaryOpsRule$1&ValidJsonNumberRule&VueCustomBlockNoParsingErrorRule$1&ArrayBracketNewlineRule&ArrayBracketSpacingRule&ArrayElementNewlineRule&ArrowSpacingRule&AttributeHyphenationRule&AttributesOrderRule&BlockLangRule&BlockOrderRule&BlockSpacingRule&BlockTagNewlineRule&BraceStyleRule&CamelcaseRule&CommaDangleRule&CommaSpacingRule&CommaStyleRule&CommentDirectiveRule&ComponentApiStyleRule&ComponentDefinitionNameCasingRule&ComponentNameInTemplateCasingRule$1&ComponentOptionsNameCasingRule&ComponentTagsOrderRule&CustomEventNameCasingRule&DefineEmitsDeclarationRule&DefineMacrosOrderRule&DefinePropsDeclarationRule&DotLocationRule&DotNotationRule&EqeqeqRule&FirstAttributeLinebreakRule&FuncCallSpacingRule&HtmlButtonHasTypeRule&HtmlClosingBracketNewlineRule&HtmlClosingBracketSpacingRule&HtmlCommentContentNewlineRule&HtmlCommentContentSpacingRule&HtmlCommentIndentRule&HtmlEndTagsRule&HtmlIndentRule&HtmlQuotesRule&HtmlSelfClosingRule&JsxUsesVarsRule&KeySpacingRule$1&KeywordSpacingRule&MatchComponentFileNameRule&MatchComponentImportNameRule&MaxAttributesPerLineRule&MaxLenRule&MaxLinesPerBlockRule&MultiWordComponentNamesRule&MultilineHtmlElementContentNewlineRule&MultilineTernaryRule&MustacheInterpolationSpacingRule&NewLineBetweenMultiLinePropertyRule&NextTickStyleRule&NoArrowFunctionsInWatchRule&NoAsyncInComputedPropertiesRule&NoBareStringsInTemplateRule&NoBooleanDefaultRule&NoChildContentRule&NoComputedPropertiesInDataRule&NoConsoleRule&NoConstantConditionRule&NoCustomModifiersOnVModelRule&NoDeprecatedDataObjectDeclarationRule&NoDeprecatedDestroyedLifecycleRule&NoDeprecatedDollarListenersApiRule&NoDeprecatedDollarScopedslotsApiRule&NoDeprecatedEventsApiRule&NoDeprecatedFilterRule&NoDeprecatedFunctionalTemplateRule&NoDeprecatedHtmlElementIsRule&NoDeprecatedInlineTemplateRule&NoDeprecatedModelDefinitionRule&NoDeprecatedPropsDefaultThisRule&NoDeprecatedRouterLinkTagPropRule&NoDeprecatedScopeAttributeRule&NoDeprecatedSlotAttributeRule&NoDeprecatedSlotScopeAttributeRule&NoDeprecatedVBindSyncRule&NoDeprecatedVIsRule&NoDeprecatedVOnNativeModifierRule&NoDeprecatedVOnNumberModifiersRule&NoDeprecatedVueConfigKeycodesRule&NoDupeKeysRule&NoDupeVElseIfRule&NoDuplicateAttrInheritanceRule&NoDuplicateAttributesRule&NoEmptyComponentBlockRule&NoEmptyPatternRule&NoExportInScriptSetupRule&NoExposeAfterAwaitRule&NoExtraParensRule&NoInvalidModelKeysRule&NoIrregularWhitespaceRule$1&NoLifecycleAfterAwaitRule&NoLoneTemplateRule&NoLossOfPrecisionRule&NoMultiSpacesRule&NoMultipleObjectsInClassRule&NoMultipleSlotArgsRule&NoMultipleTemplateRootRule&NoMutatingPropsRule&NoParsingErrorRule$1&NoPotentialComponentOptionTypoRule&NoRefAsOperandRule&NoRefObjectDestructureRule&NoRefObjectReactivityLossRule&NoRequiredPropWithDefaultRule&NoReservedComponentNamesRule&NoReservedKeysRule&NoReservedPropsRule&NoRestrictedBlockRule&NoRestrictedCallAfterAwaitRule&NoRestrictedClassRule&NoRestrictedComponentNamesRule&NoRestrictedComponentOptionsRule&NoRestrictedCustomEventRule&NoRestrictedHtmlElementsRule&NoRestrictedPropsRule&NoRestrictedStaticAttributeRule&NoRestrictedSyntaxRule&NoRestrictedVBindRule&NoRootVIfRule&NoSetupPropsDestructureRule&NoSetupPropsReactivityLossRule&NoSharedComponentDataRule&NoSideEffectsInComputedPropertiesRule&NoSpacesAroundEqualSignsInAttributeRule&NoSparseArraysRule&NoStaticInlineStylesRule&NoTemplateKeyRule&NoTemplateShadowRule&NoTemplateTargetBlankRule&NoTextareaMustacheRule&NoThisInBeforeRouteEnterRule&NoUndefComponentsRule&NoUndefPropertiesRule&NoUnsupportedFeaturesRule&NoUnusedComponentsRule&NoUnusedPropertiesRule&NoUnusedRefsRule&NoUnusedVarsRule&NoUseComputedPropertyLikeMethodRule&NoUseVElseWithVForRule&NoUseVIfWithVForRule&NoUselessConcatRule&NoUselessMustachesRule&NoUselessTemplateAttributesRule&NoUselessVBindRule&NoVForTemplateKeyOnChildRule&NoVForTemplateKeyRule&NoVHtmlRule$1&NoVModelArgumentRule&NoVTextVHtmlOnComponentRule&NoVTextRule&NoWatchAfterAwaitRule&ObjectCurlyNewlineRule&ObjectCurlySpacingRule&ObjectPropertyNewlineRule&ObjectShorthandRule&OneComponentPerFileRule&OperatorLinebreakRule&OrderInComponentsRule&PaddingLineBetweenBlocksRule&PaddingLineBetweenTagsRule&PaddingLinesInComponentDefinitionRule&PreferDefineOptionsRule&PreferImportFromVueRule&PreferPropTypeBooleanFirstRule&PreferSeparateStaticClassRule&PreferTemplateRule&PreferTrueAttributeShorthandRule&PropNameCasingRule&QuotePropsRule&RequireComponentIsRule&RequireDefaultPropRule&RequireDirectExportRule&RequireEmitValidatorRule&RequireExplicitEmitsRule&RequireExposeRule&RequireMacroVariableNameRule&RequireNamePropertyRule&RequirePropCommentRule&RequirePropTypeConstructorRule&RequirePropTypesRule&RequireRenderReturnRule&RequireSlotsAsFunctionsRule&RequireToggleInsideTransitionRule&RequireTypedObjectPropRule&RequireTypedRefRule&RequireVForKeyRule&RequireValidDefaultPropRule&ReturnInComputedPropertyRule&ReturnInEmitsValidatorRule&ScriptIndentRule&ScriptSetupUsesVarsRule&SinglelineHtmlElementContentNewlineRule&SortKeysRule$1&SpaceInParensRule&SpaceInfixOpsRule&SpaceUnaryOpsRule&StaticClassNamesOrderRule&TemplateCurlySpacingRule&ThisInTemplateRule&UseVOnExactRule&VBindStyleRule&VForDelimiterStyleRule&VOnEventHyphenationRule&VOnFunctionCallRule&VOnHandlerStyleRule&VOnStyleRule&VSlotStyleRule&ValidAttributeNameRule&ValidDefineEmitsRule&ValidDefineOptionsRule&ValidDefinePropsRule&ValidModelDefinitionRule&ValidNextTickRule&ValidTemplateRootRule&ValidVBindSyncRule&ValidVBindRule&ValidVCloakRule&ValidVElseIfRule&ValidVElseRule&ValidVForRule&ValidVHtmlRule&ValidVIfRule&ValidVIsRule&ValidVMemoRule&ValidVModelRule&ValidVOnRule&ValidVOnceRule&ValidVPreRule&ValidVShowRule&ValidVSlotRule&ValidVTextRule&BetterRegexRule&CatchErrorNameRule&ConsistentDestructuringRule&ConsistentFunctionScopingRule&CustomErrorDefinitionRule&EmptyBraceSpacesRule&ErrorMessageRule&EscapeCaseRule&ExpiringTodoCommentsRule&ExplicitLengthCheckRule&FilenameCaseRule&ImportStyleRule&NewForBuiltinsRule&NoAbusiveEslintDisableRule&NoArrayCallbackReferenceRule&NoArrayForEachRule&NoArrayMethodThisArgumentRule&NoArrayPushPushRule&NoArrayReduceRule&NoAwaitExpressionMemberRule&NoConsoleSpacesRule&NoDocumentCookieRule&NoEmptyFileRule&NoForLoopRule&NoHexEscapeRule&NoInstanceofArrayRule&NoInvalidRemoveEventListenerRule&NoKeywordPrefixRule&NoLonelyIfRule&NoNegatedConditionRule&NoNestedTernaryRule&NoNewArrayRule&NoNewBufferRule&NoNullRule&NoObjectAsDefaultParameterRule&NoProcessExitRule&NoStaticOnlyClassRule&NoThenableRule&NoThisAssignmentRule&NoTypeofUndefinedRule&NoUnnecessaryAwaitRule&NoUnreadableArrayDestructuringRule&NoUnreadableIifeRule&NoUnusedPropertiesRule$1&NoUselessFallbackInSpreadRule&NoUselessLengthCheckRule&NoUselessPromiseResolveRejectRule&NoUselessSpreadRule&NoUselessSwitchCaseRule&NoUselessUndefinedRule&NoZeroFractionsRule&NumberLiteralCaseRule&NumericSeparatorsStyleRule&PreferAddEventListenerRule&PreferArrayFindRule&PreferArrayFlatMapRule&PreferArrayFlatRule&PreferArrayIndexOfRule&PreferArraySomeRule&PreferAtRule&PreferBlobReadingMethodsRule&PreferCodePointRule&PreferDateNowRule&PreferDefaultParametersRule&PreferDomNodeAppendRule&PreferDomNodeDatasetRule&PreferDomNodeRemoveRule&PreferDomNodeTextContentRule&PreferEventTargetRule&PreferExportFromRule&PreferIncludesRule&PreferJsonParseBufferRule&PreferKeyboardEventKeyRule&PreferLogicalOperatorOverTernaryRule&PreferMathTruncRule&PreferModernDomApisRule&PreferModernMathApisRule&PreferModuleRule&PreferNativeCoercionFunctionsRule&PreferNegativeIndexRule&PreferNodeProtocolRule&PreferNumberPropertiesRule&PreferObjectFromEntriesRule&PreferOptionalCatchBindingRule&PreferPrototypeMethodsRule&PreferQuerySelectorRule&PreferReflectApplyRule&PreferRegexpTestRule&PreferSetHasRule&PreferSetSizeRule&PreferSpreadRule&PreferStringReplaceAllRule&PreferStringSliceRule&PreferStringStartsEndsWithRule&PreferStringTrimStartEndRule&PreferSwitchRule&PreferTernaryRule&PreferTopLevelAwaitRule&PreferTypeErrorRule&PreventAbbreviationsRule&RelativeUrlStyleRule&RequireArrayJoinSeparatorRule&RequireNumberToFixedDigitsArgumentRule&RequirePostMessageTargetOriginRule&StringContentRule&SwitchCaseBracesRule&TemplateIndentRule&TextEncodingIdentifierCaseRule&ThrowNewErrorRule&ImportIndexRule&NoArrayInstanceofRule&NoFnReferenceInIteratorRule&NoReduceRule&NoUnsafeRegexRule&PreferDatasetRule&PreferEventKeyRule&PreferExponentiationOperatorRule&PreferFlatMapRule&PreferNodeAppendRule&PreferNodeRemoveRule&PreferObjectHasOwnRule&PreferReplaceAllRule&PreferStartsEndsWithRule&PreferTextContentRule&PreferTrimStartEndRule&RegexShorthandRule&DisableEnablePairRule&NoAggregatingEnableRule&NoDuplicateDisableRule&NoRestrictedDisableRule&NoUnlimitedDisableRule&NoUnusedDisableRule&NoUnusedEnableRule&NoUseRule&RequireDescriptionRule$2&{'test/no-only-tests':RuleConfig<[]>;}>&Record<string,RuleConfig<any[]>>>": {
            "properties": {
                "accessor-pairs": {
                    "$ref": "#/definitions/AccessorPairsRuleConfig",
                    "description": "Enforce getter and setter pairs in objects and classes."
                },
                "antfu/consistent-list-newline": {
                    "$ref": "#/definitions/Linter.RuleEntry<Options>"
                },
                "antfu/generic-spacing": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/if-newline": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/import-dedupe": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/named-tuple-spacing": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/no-cjs-exports": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/no-const-enum": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/no-import-node-modules-by-path": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/no-ts-export-equal": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/prefer-inline-type-import": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "antfu/top-level-function": {
                    "$ref": "#/definitions/Linter.RuleEntry<[]>"
                },
                "array-bracket-newline": {
                    "$ref": "#/definitions/ArrayBracketNewlineRuleConfig$2",
                    "description": "Enforce linebreaks after opening and before closing array brackets."
                },
                "array-bracket-spacing": {
                    "$ref": "#/definitions/ArrayBracketSpacingRuleConfig$2",
                    "description": "Enforce consistent spacing inside array brackets."
                },
                "array-callback-return": {
                    "$ref": "#/definitions/ArrayCallbackReturnRuleConfig",
                    "description": "Enforce `return` statements in callbacks of array methods."
                },
                "array-element-newline": {
                    "$ref": "#/definitions/ArrayElementNewlineRuleConfig$2",
                    "description": "Enforce line breaks after each array element."
                },
                "arrow-body-style": {
                    "$ref": "#/definitions/ArrowBodyStyleRuleConfig",
                    "description": "Require braces around arrow function bodies."
                },
                "arrow-parens": {
                    "$ref": "#/definitions/ArrowParensRuleConfig",
                    "description": "Require parentheses around arrow function arguments."
                },
                "arrow-spacing": {
                    "$ref": "#/definitions/ArrowSpacingRuleConfig$1",
                    "description": "Enforce consistent spacing before and after the arrow in arrow functions."
                },
                "block-scoped-var": {
                    "$ref": "#/definitions/BlockScopedVarRuleConfig",
                    "description": "Enforce the use of variables within the scope they are defined."
                },
                "block-spacing": {
                    "$ref": "#/definitions/BlockSpacingRuleConfig$2",
                    "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block."
                },
                "brace-style": {
                    "$ref": "#/definitions/BraceStyleRuleConfig$2",
                    "description": "Enforce consistent brace style for blocks."
                },
                "callback-return": {
                    "$ref": "#/definitions/CallbackReturnRuleConfig$2",
                    "description": "Require `return` statements after callbacks."
                },
                "camelcase": {
                    "$ref": "#/definitions/CamelcaseRuleConfig$1",
                    "description": "Enforce camelcase naming convention."
                },
                "capitalized-comments": {
                    "$ref": "#/definitions/CapitalizedCommentsRuleConfig",
                    "description": "Enforce or disallow capitalization of the first letter of a comment."
                },
                "class-methods-use-this": {
                    "$ref": "#/definitions/ClassMethodsUseThisRuleConfig$1",
                    "description": "Enforce that class methods utilize `this`."
                },
                "comma-dangle": {
                    "$ref": "#/definitions/CommaDangleRuleConfig$3",
                    "description": "Require or disallow trailing commas."
                },
                "comma-spacing": {
                    "$ref": "#/definitions/CommaSpacingRuleConfig$2",
                    "description": "Enforce consistent spacing before and after commas."
                },
                "comma-style": {
                    "$ref": "#/definitions/CommaStyleRuleConfig$2",
                    "description": "Enforce consistent comma style."
                },
                "complexity": {
                    "$ref": "#/definitions/ComplexityRuleConfig",
                    "description": "Enforce a maximum cyclomatic complexity allowed in a program."
                },
                "computed-property-spacing": {
                    "$ref": "#/definitions/ComputedPropertySpacingRuleConfig",
                    "description": "Enforce consistent spacing inside computed property brackets."
                },
                "consistent-return": {
                    "$ref": "#/definitions/ConsistentReturnRuleConfig",
                    "description": "Require `return` statements to either always or never specify values."
                },
                "consistent-this": {
                    "$ref": "#/definitions/ConsistentThisRuleConfig",
                    "description": "Enforce consistent naming when capturing the current execution context."
                },
                "constructor-super": {
                    "$ref": "#/definitions/ConstructorSuperRuleConfig",
                    "description": "Require `super()` calls in constructors."
                },
                "curly": {
                    "$ref": "#/definitions/CurlyRuleConfig",
                    "description": "Enforce consistent brace style for all control statements."
                },
                "default-case": {
                    "$ref": "#/definitions/DefaultCaseRuleConfig",
                    "description": "Require `default` cases in `switch` statements."
                },
                "default-case-last": {
                    "$ref": "#/definitions/DefaultCaseLastRuleConfig",
                    "description": "Enforce default clauses in switch statements to be last."
                },
                "default-param-last": {
                    "$ref": "#/definitions/DefaultParamLastRuleConfig$1",
                    "description": "Enforce default parameters to be last."
                },
                "dot-location": {
                    "$ref": "#/definitions/DotLocationRuleConfig$1",
                    "description": "Enforce consistent newlines before and after dots."
                },
                "dot-notation": {
                    "$ref": "#/definitions/DotNotationRuleConfig$2",
                    "description": "Enforce dot notation whenever possible."
                },
                "eol-last": {
                    "$ref": "#/definitions/EolLastRuleConfig",
                    "description": "Require or disallow newline at the end of files."
                },
                "eqeqeq": {
                    "$ref": "#/definitions/EqeqeqRuleConfig$1",
                    "description": "Require the use of `===` and `!==`."
                },
                "eslint-comments/disable-enable-pair": {
                    "$ref": "#/definitions/DisableEnablePairRuleConfig",
                    "description": "Require a `eslint-enable` comment for every `eslint-disable` comment."
                },
                "eslint-comments/no-aggregating-enable": {
                    "$ref": "#/definitions/NoAggregatingEnableRuleConfig",
                    "description": "Disallow a `eslint-enable` comment for multiple `eslint-disable` comments."
                },
                "eslint-comments/no-duplicate-disable": {
                    "$ref": "#/definitions/NoDuplicateDisableRuleConfig",
                    "description": "Disallow duplicate `eslint-disable` comments."
                },
                "eslint-comments/no-restricted-disable": {
                    "$ref": "#/definitions/NoRestrictedDisableRuleConfig",
                    "description": "Disallow `eslint-disable` comments about specific rules."
                },
                "eslint-comments/no-unlimited-disable": {
                    "$ref": "#/definitions/NoUnlimitedDisableRuleConfig",
                    "description": "Disallow `eslint-disable` comments without rule names."
                },
                "eslint-comments/no-unused-disable": {
                    "$ref": "#/definitions/NoUnusedDisableRuleConfig",
                    "description": "Disallow unused `eslint-disable` comments."
                },
                "eslint-comments/no-unused-enable": {
                    "$ref": "#/definitions/NoUnusedEnableRuleConfig",
                    "description": "Disallow unused `eslint-enable` comments."
                },
                "eslint-comments/no-use": {
                    "$ref": "#/definitions/NoUseRuleConfig",
                    "description": "Disallow ESLint directive-comments."
                },
                "eslint-comments/require-description": {
                    "$ref": "#/definitions/RequireDescriptionRuleConfig$2",
                    "description": "Require include descriptions in ESLint directive-comments."
                },
                "for-direction": {
                    "$ref": "#/definitions/ForDirectionRuleConfig",
                    "description": "Enforce \"for\" loop update clause moving the counter in the right direction."
                },
                "func-call-spacing": {
                    "$ref": "#/definitions/FuncCallSpacingRuleConfig$2",
                    "description": "Require or disallow spacing between function identifiers and their invocations."
                },
                "func-name-matching": {
                    "$ref": "#/definitions/FuncNameMatchingRuleConfig",
                    "description": "Require function names to match the name of the variable or property to which they are assigned."
                },
                "func-names": {
                    "$ref": "#/definitions/FuncNamesRuleConfig",
                    "description": "Require or disallow named `function` expressions."
                },
                "func-style": {
                    "$ref": "#/definitions/FuncStyleRuleConfig",
                    "description": "Enforce the consistent use of either `function` declarations or expressions."
                },
                "function-call-argument-newline": {
                    "$ref": "#/definitions/FunctionCallArgumentNewlineRuleConfig",
                    "description": "Enforce line breaks between arguments of a function call."
                },
                "function-paren-newline": {
                    "$ref": "#/definitions/FunctionParenNewlineRuleConfig",
                    "description": "Enforce consistent line breaks inside function parentheses."
                },
                "generator-star-spacing": {
                    "$ref": "#/definitions/GeneratorStarSpacingRuleConfig",
                    "description": "Enforce consistent spacing around `*` operators in generator functions."
                },
                "getter-return": {
                    "$ref": "#/definitions/GetterReturnRuleConfig",
                    "description": "Enforce `return` statements in getters."
                },
                "global-require": {
                    "$ref": "#/definitions/GlobalRequireRuleConfig$2",
                    "description": "Require `require()` calls to be placed at top-level module scope."
                },
                "grouped-accessor-pairs": {
                    "$ref": "#/definitions/GroupedAccessorPairsRuleConfig",
                    "description": "Require grouped accessor pairs in object literals and classes."
                },
                "guard-for-in": {
                    "$ref": "#/definitions/GuardForInRuleConfig",
                    "description": "Require `for-in` loops to include an `if` statement."
                },
                "handle-callback-err": {
                    "$ref": "#/definitions/HandleCallbackErrRuleConfig$2",
                    "description": "Require error handling in callbacks."
                },
                "id-blacklist": {
                    "$ref": "#/definitions/IdBlacklistRuleConfig",
                    "description": "Disallow specified identifiers."
                },
                "id-denylist": {
                    "$ref": "#/definitions/IdDenylistRuleConfig",
                    "description": "Disallow specified identifiers."
                },
                "id-length": {
                    "$ref": "#/definitions/IdLengthRuleConfig",
                    "description": "Enforce minimum and maximum identifier lengths."
                },
                "id-match": {
                    "$ref": "#/definitions/IdMatchRuleConfig",
                    "description": "Require identifiers to match a specified regular expression."
                },
                "implicit-arrow-linebreak": {
                    "$ref": "#/definitions/ImplicitArrowLinebreakRuleConfig",
                    "description": "Enforce the location of arrow function bodies."
                },
                "import/consistent-type-specifier-style": {
                    "$ref": "#/definitions/ConsistentTypeSpecifierStyleRuleConfig",
                    "description": "Enforce or ban the use of inline type-only markers for named imports."
                },
                "import/default": {
                    "$ref": "#/definitions/DefaultRuleConfig",
                    "description": "Ensure a default export is present, given a default import."
                },
                "import/dynamic-import-chunkname": {
                    "$ref": "#/definitions/DynamicImportChunknameRuleConfig",
                    "description": "Enforce a leading comment with the webpackChunkName for dynamic imports."
                },
                "import/export": {
                    "$ref": "#/definitions/ExportRuleConfig",
                    "description": "Forbid any invalid exports, i.e. re-export of the same name."
                },
                "import/exports-last": {
                    "$ref": "#/definitions/ExportsLastRuleConfig",
                    "description": "Ensure all exports appear after other statements."
                },
                "import/extensions": {
                    "$ref": "#/definitions/ExtensionsRuleConfig",
                    "description": "Ensure consistent use of file extension within the import path."
                },
                "import/first": {
                    "$ref": "#/definitions/FirstRuleConfig",
                    "description": "Ensure all imports appear before other statements."
                },
                "import/group-exports": {
                    "$ref": "#/definitions/GroupExportsRuleConfig",
                    "description": "Prefer named exports to be grouped together in a single export declaration."
                },
                "import/imports-first": {
                    "$ref": "#/definitions/ImportsFirstRuleConfig",
                    "description": "Replaced by `import/first`."
                },
                "import/max-dependencies": {
                    "$ref": "#/definitions/MaxDependenciesRuleConfig",
                    "description": "Enforce the maximum number of dependencies a module can have."
                },
                "import/named": {
                    "$ref": "#/definitions/NamedRuleConfig",
                    "description": "Ensure named imports correspond to a named export in the remote file."
                },
                "import/namespace": {
                    "$ref": "#/definitions/NamespaceRuleConfig",
                    "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced."
                },
                "import/newline-after-import": {
                    "$ref": "#/definitions/NewlineAfterImportRuleConfig",
                    "description": "Enforce a newline after import statements."
                },
                "import/no-absolute-path": {
                    "$ref": "#/definitions/NoAbsolutePathRuleConfig",
                    "description": "Forbid import of modules using absolute paths."
                },
                "import/no-amd": {
                    "$ref": "#/definitions/NoAmdRuleConfig",
                    "description": "Forbid AMD `require` and `define` calls."
                },
                "import/no-anonymous-default-export": {
                    "$ref": "#/definitions/NoAnonymousDefaultExportRuleConfig",
                    "description": "Forbid anonymous values as default exports."
                },
                "import/no-commonjs": {
                    "$ref": "#/definitions/NoCommonjsRuleConfig",
                    "description": "Forbid CommonJS `require` calls and `module.exports` or `exports.*`."
                },
                "import/no-cycle": {
                    "$ref": "#/definitions/NoCycleRuleConfig",
                    "description": "Forbid a module from importing a module with a dependency path back to itself."
                },
                "import/no-default-export": {
                    "$ref": "#/definitions/NoDefaultExportRuleConfig",
                    "description": "Forbid default exports."
                },
                "import/no-deprecated": {
                    "$ref": "#/definitions/NoDeprecatedRuleConfig$1",
                    "description": "Forbid imported names marked with `@deprecated` documentation tag."
                },
                "import/no-duplicates": {
                    "$ref": "#/definitions/NoDuplicatesRuleConfig",
                    "description": "Forbid repeated import of the same module in multiple places."
                },
                "import/no-dynamic-require": {
                    "$ref": "#/definitions/NoDynamicRequireRuleConfig",
                    "description": "Forbid `require()` calls with expressions."
                },
                "import/no-empty-named-blocks": {
                    "$ref": "#/definitions/NoEmptyNamedBlocksRuleConfig",
                    "description": "Forbid empty named import blocks."
                },
                "import/no-extraneous-dependencies": {
                    "$ref": "#/definitions/NoExtraneousDependenciesRuleConfig",
                    "description": "Forbid the use of extraneous packages."
                },
                "import/no-import-module-exports": {
                    "$ref": "#/definitions/NoImportModuleExportsRuleConfig",
                    "description": "Forbid import statements with CommonJS module.exports."
                },
                "import/no-internal-modules": {
                    "$ref": "#/definitions/NoInternalModulesRuleConfig",
                    "description": "Forbid importing the submodules of other modules."
                },
                "import/no-mutable-exports": {
                    "$ref": "#/definitions/NoMutableExportsRuleConfig",
                    "description": "Forbid the use of mutable exports with `var` or `let`."
                },
                "import/no-named-as-default": {
                    "$ref": "#/definitions/NoNamedAsDefaultRuleConfig",
                    "description": "Forbid use of exported name as identifier of default export."
                },
                "import/no-named-as-default-member": {
                    "$ref": "#/definitions/NoNamedAsDefaultMemberRuleConfig",
                    "description": "Forbid use of exported name as property of default export."
                },
                "import/no-named-default": {
                    "$ref": "#/definitions/NoNamedDefaultRuleConfig",
                    "description": "Forbid named default exports."
                },
                "import/no-named-export": {
                    "$ref": "#/definitions/NoNamedExportRuleConfig",
                    "description": "Forbid named exports."
                },
                "import/no-namespace": {
                    "$ref": "#/definitions/NoNamespaceRuleConfig$2",
                    "description": "Forbid namespace (a.k.a. \"wildcard\" `*`) imports."
                },
                "import/no-nodejs-modules": {
                    "$ref": "#/definitions/NoNodejsModulesRuleConfig",
                    "description": "Forbid Node.js builtin modules."
                },
                "import/no-relative-packages": {
                    "$ref": "#/definitions/NoRelativePackagesRuleConfig",
                    "description": "Forbid importing packages through relative paths."
                },
                "import/no-relative-parent-imports": {
                    "$ref": "#/definitions/NoRelativeParentImportsRuleConfig",
                    "description": "Forbid importing modules from parent directories."
                },
                "import/no-restricted-paths": {
                    "$ref": "#/definitions/NoRestrictedPathsRuleConfig",
                    "description": "Enforce which files can be imported in a given folder."
                },
                "import/no-self-import": {
                    "$ref": "#/definitions/NoSelfImportRuleConfig",
                    "description": "Forbid a module from importing itself."
                },
                "import/no-unassigned-import": {
                    "$ref": "#/definitions/NoUnassignedImportRuleConfig",
                    "description": "Forbid unassigned imports."
                },
                "import/no-unresolved": {
                    "$ref": "#/definitions/NoUnresolvedRuleConfig",
                    "description": "Ensure imports point to a file/module that can be resolved."
                },
                "import/no-unused-modules": {
                    "$ref": "#/definitions/NoUnusedModulesRuleConfig",
                    "description": "Forbid modules without exports, or exports without matching import in another module."
                },
                "import/no-useless-path-segments": {
                    "$ref": "#/definitions/NoUselessPathSegmentsRuleConfig",
                    "description": "Forbid unnecessary path segments in import and require statements."
                },
                "import/no-webpack-loader-syntax": {
                    "$ref": "#/definitions/NoWebpackLoaderSyntaxRuleConfig",
                    "description": "Forbid webpack loader syntax in imports."
                },
                "import/order": {
                    "$ref": "#/definitions/OrderRuleConfig",
                    "description": "Enforce a convention in module import order."
                },
                "import/prefer-default-export": {
                    "$ref": "#/definitions/PreferDefaultExportRuleConfig",
                    "description": "Prefer a default export if module exports a single name or multiple names."
                },
                "import/unambiguous": {
                    "$ref": "#/definitions/UnambiguousRuleConfig",
                    "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`)."
                },
                "indent": {
                    "$ref": "#/definitions/IndentRuleConfig$3",
                    "description": "Enforce consistent indentation."
                },
                "indent-legacy": {
                    "$ref": "#/definitions/IndentLegacyRuleConfig",
                    "description": "Enforce consistent indentation."
                },
                "init-declarations": {
                    "$ref": "#/definitions/InitDeclarationsRuleConfig$1",
                    "description": "Require or disallow initialization in variable declarations."
                },
                "jsonc/array-bracket-newline": {
                    "$ref": "#/definitions/ArrayBracketNewlineRuleConfig$1",
                    "description": "Enforce line breaks after opening and before closing array brackets."
                },
                "jsonc/array-bracket-spacing": {
                    "$ref": "#/definitions/ArrayBracketSpacingRuleConfig$1",
                    "description": "Disallow or enforce spaces inside of brackets."
                },
                "jsonc/array-element-newline": {
                    "$ref": "#/definitions/ArrayElementNewlineRuleConfig$1",
                    "description": "Enforce line breaks between array elements."
                },
                "jsonc/auto": {
                    "$ref": "#/definitions/AutoRuleConfig",
                    "description": "Apply jsonc rules similar to your configured ESLint core rules."
                },
                "jsonc/comma-dangle": {
                    "$ref": "#/definitions/CommaDangleRuleConfig$2",
                    "description": "Require or disallow trailing commas."
                },
                "jsonc/comma-style": {
                    "$ref": "#/definitions/CommaStyleRuleConfig$1",
                    "description": "Enforce consistent comma style."
                },
                "jsonc/indent": {
                    "$ref": "#/definitions/IndentRuleConfig$2",
                    "description": "Enforce consistent indentation."
                },
                "jsonc/key-name-casing": {
                    "$ref": "#/definitions/KeyNameCasingRuleConfig$1",
                    "description": "Enforce naming convention to property key names."
                },
                "jsonc/key-spacing": {
                    "$ref": "#/definitions/KeySpacingRuleConfig$3",
                    "description": "Enforce consistent spacing between keys and values in object literal properties."
                },
                "jsonc/no-bigint-literals": {
                    "$ref": "#/definitions/NoBigintLiteralsRuleConfig",
                    "description": "Disallow BigInt literals."
                },
                "jsonc/no-binary-expression": {
                    "$ref": "#/definitions/NoBinaryExpressionRuleConfig",
                    "description": "Disallow binary expression."
                },
                "jsonc/no-binary-numeric-literals": {
                    "$ref": "#/definitions/NoBinaryNumericLiteralsRuleConfig",
                    "description": "Disallow binary numeric literals."
                },
                "jsonc/no-comments": {
                    "$ref": "#/definitions/NoCommentsRuleConfig",
                    "description": "Disallow comments."
                },
                "jsonc/no-dupe-keys": {
                    "$ref": "#/definitions/NoDupeKeysRuleConfig$1",
                    "description": "Disallow duplicate keys in object literals."
                },
                "jsonc/no-escape-sequence-in-identifier": {
                    "$ref": "#/definitions/NoEscapeSequenceInIdentifierRuleConfig",
                    "description": "Disallow escape sequences in identifiers."
                },
                "jsonc/no-floating-decimal": {
                    "$ref": "#/definitions/NoFloatingDecimalRuleConfig",
                    "description": "Disallow leading or trailing decimal points in numeric literals."
                },
                "jsonc/no-hexadecimal-numeric-literals": {
                    "$ref": "#/definitions/NoHexadecimalNumericLiteralsRuleConfig",
                    "description": "Disallow hexadecimal numeric literals."
                },
                "jsonc/no-infinity": {
                    "$ref": "#/definitions/NoInfinityRuleConfig",
                    "description": "Disallow Infinity."
                },
                "jsonc/no-irregular-whitespace": {
                    "$ref": "#/definitions/NoIrregularWhitespaceRuleConfig$2",
                    "description": "Disallow irregular whitespace."
                },
                "jsonc/no-multi-str": {
                    "$ref": "#/definitions/NoMultiStrRuleConfig",
                    "description": "Disallow multiline strings."
                },
                "jsonc/no-nan": {
                    "$ref": "#/definitions/NoNanRuleConfig",
                    "description": "Disallow NaN."
                },
                "jsonc/no-number-props": {
                    "$ref": "#/definitions/NoNumberPropsRuleConfig",
                    "description": "Disallow number property keys."
                },
                "jsonc/no-numeric-separators": {
                    "$ref": "#/definitions/NoNumericSeparatorsRuleConfig",
                    "description": "Disallow numeric separators."
                },
                "jsonc/no-octal": {
                    "$ref": "#/definitions/NoOctalRuleConfig",
                    "description": "Disallow legacy octal literals."
                },
                "jsonc/no-octal-escape": {
                    "$ref": "#/definitions/NoOctalEscapeRuleConfig",
                    "description": "Disallow octal escape sequences in string literals."
                },
                "jsonc/no-octal-numeric-literals": {
                    "$ref": "#/definitions/NoOctalNumericLiteralsRuleConfig",
                    "description": "Disallow octal numeric literals."
                },
                "jsonc/no-parenthesized": {
                    "$ref": "#/definitions/NoParenthesizedRuleConfig",
                    "description": "Disallow parentheses around the expression."
                },
                "jsonc/no-plus-sign": {
                    "$ref": "#/definitions/NoPlusSignRuleConfig",
                    "description": "Disallow plus sign."
                },
                "jsonc/no-regexp-literals": {
                    "$ref": "#/definitions/NoRegexpLiteralsRuleConfig",
                    "description": "Disallow RegExp literals."
                },
                "jsonc/no-sparse-arrays": {
                    "$ref": "#/definitions/NoSparseArraysRuleConfig$1",
                    "description": "Disallow sparse arrays."
                },
                "jsonc/no-template-literals": {
                    "$ref": "#/definitions/NoTemplateLiteralsRuleConfig",
                    "description": "Disallow template literals."
                },
                "jsonc/no-undefined-value": {
                    "$ref": "#/definitions/NoUndefinedValueRuleConfig",
                    "description": "Disallow `undefined`."
                },
                "jsonc/no-unicode-codepoint-escapes": {
                    "$ref": "#/definitions/NoUnicodeCodepointEscapesRuleConfig",
                    "description": "Disallow Unicode code point escape sequences."
                },
                "jsonc/no-useless-escape": {
                    "$ref": "#/definitions/NoUselessEscapeRuleConfig",
                    "description": "Disallow unnecessary escape usage."
                },
                "jsonc/object-curly-newline": {
                    "$ref": "#/definitions/ObjectCurlyNewlineRuleConfig$1",
                    "description": "Enforce consistent line breaks inside braces."
                },
                "jsonc/object-curly-spacing": {
                    "$ref": "#/definitions/ObjectCurlySpacingRuleConfig$2",
                    "description": "Enforce consistent spacing inside braces."
                },
                "jsonc/object-property-newline": {
                    "$ref": "#/definitions/ObjectPropertyNewlineRuleConfig$1",
                    "description": "Enforce placing object properties on separate lines."
                },
                "jsonc/quote-props": {
                    "$ref": "#/definitions/QuotePropsRuleConfig$1",
                    "description": "Require quotes around object literal property names."
                },
                "jsonc/quotes": {
                    "$ref": "#/definitions/QuotesRuleConfig$2",
                    "description": "Enforce use of double or single quotes."
                },
                "jsonc/sort-array-values": {
                    "$ref": "#/definitions/SortArrayValuesRuleConfig",
                    "description": "Require array values to be sorted."
                },
                "jsonc/sort-keys": {
                    "$ref": "#/definitions/SortKeysRuleConfig$2",
                    "description": "Require object keys to be sorted."
                },
                "jsonc/space-unary-ops": {
                    "$ref": "#/definitions/SpaceUnaryOpsRuleConfig$1",
                    "description": "Disallow spaces after unary operators."
                },
                "jsonc/valid-json-number": {
                    "$ref": "#/definitions/ValidJsonNumberRuleConfig",
                    "description": "Disallow invalid number for JSON."
                },
                "jsonc/vue-custom-block/no-parsing-error": {
                    "$ref": "#/definitions/VueCustomBlockNoParsingErrorRuleConfig$1",
                    "description": "Disallow parsing errors in Vue custom blocks."
                },
                "jsx-quotes": {
                    "$ref": "#/definitions/JsxQuotesRuleConfig",
                    "description": "Enforce the consistent use of either double or single quotes in JSX attributes."
                },
                "key-spacing": {
                    "$ref": "#/definitions/KeySpacingRuleConfig$4",
                    "description": "Enforce consistent spacing between keys and values in object literal properties."
                },
                "keyword-spacing": {
                    "$ref": "#/definitions/KeywordSpacingRuleConfig$2",
                    "description": "Enforce consistent spacing before and after keywords."
                },
                "line-comment-position": {
                    "$ref": "#/definitions/LineCommentPositionRuleConfig",
                    "description": "Enforce position of line comments."
                },
                "linebreak-style": {
                    "$ref": "#/definitions/LinebreakStyleRuleConfig",
                    "description": "Enforce consistent linebreak style."
                },
                "lines-around-comment": {
                    "$ref": "#/definitions/LinesAroundCommentRuleConfig$1",
                    "description": "Require empty lines around comments."
                },
                "lines-around-directive": {
                    "$ref": "#/definitions/LinesAroundDirectiveRuleConfig",
                    "description": "Require or disallow newlines around directives."
                },
                "lines-between-class-members": {
                    "$ref": "#/definitions/LinesBetweenClassMembersRuleConfig$1",
                    "description": "Require or disallow an empty line between class members."
                },
                "logical-assignment-operators": {
                    "$ref": "#/definitions/LogicalAssignmentOperatorsRuleConfig",
                    "description": "Require or disallow logical assignment operator shorthand."
                },
                "max-classes-per-file": {
                    "$ref": "#/definitions/MaxClassesPerFileRuleConfig",
                    "description": "Enforce a maximum number of classes per file."
                },
                "max-depth": {
                    "$ref": "#/definitions/MaxDepthRuleConfig",
                    "description": "Enforce a maximum depth that blocks can be nested."
                },
                "max-len": {
                    "$ref": "#/definitions/MaxLenRuleConfig$1",
                    "description": "Enforce a maximum line length."
                },
                "max-lines": {
                    "$ref": "#/definitions/MaxLinesRuleConfig",
                    "description": "Enforce a maximum number of lines per file."
                },
                "max-lines-per-function": {
                    "$ref": "#/definitions/MaxLinesPerFunctionRuleConfig",
                    "description": "Enforce a maximum number of lines of code in a function."
                },
                "max-nested-callbacks": {
                    "$ref": "#/definitions/MaxNestedCallbacksRuleConfig",
                    "description": "Enforce a maximum depth that callbacks can be nested."
                },
                "max-params": {
                    "$ref": "#/definitions/MaxParamsRuleConfig",
                    "description": "Enforce a maximum number of parameters in function definitions."
                },
                "max-statements": {
                    "$ref": "#/definitions/MaxStatementsRuleConfig",
                    "description": "Enforce a maximum number of statements allowed in function blocks."
                },
                "max-statements-per-line": {
                    "$ref": "#/definitions/MaxStatementsPerLineRuleConfig",
                    "description": "Enforce a maximum number of statements allowed per line."
                },
                "multiline-comment-style": {
                    "$ref": "#/definitions/MultilineCommentStyleRuleConfig",
                    "description": "Enforce a particular style for multiline comments."
                },
                "multiline-ternary": {
                    "$ref": "#/definitions/MultilineTernaryRuleConfig$1",
                    "description": "Enforce newlines between operands of ternary expressions."
                },
                "new-cap": {
                    "$ref": "#/definitions/NewCapRuleConfig",
                    "description": "Require constructor names to begin with a capital letter."
                },
                "new-parens": {
                    "$ref": "#/definitions/NewParensRuleConfig",
                    "description": "Enforce or disallow parentheses when invoking a constructor with no arguments."
                },
                "newline-after-var": {
                    "$ref": "#/definitions/NewlineAfterVarRuleConfig",
                    "description": "Require or disallow an empty line after variable declarations."
                },
                "newline-before-return": {
                    "$ref": "#/definitions/NewlineBeforeReturnRuleConfig",
                    "description": "Require an empty line before `return` statements."
                },
                "newline-per-chained-call": {
                    "$ref": "#/definitions/NewlinePerChainedCallRuleConfig",
                    "description": "Require a newline after each call in a method chain."
                },
                "no-alert": {
                    "$ref": "#/definitions/NoAlertRuleConfig",
                    "description": "Disallow the use of `alert`, `confirm`, and `prompt`."
                },
                "no-array-constructor": {
                    "$ref": "#/definitions/NoArrayConstructorRuleConfig$1",
                    "description": "Disallow `Array` constructors."
                },
                "no-async-promise-executor": {
                    "$ref": "#/definitions/NoAsyncPromiseExecutorRuleConfig",
                    "description": "Disallow using an async function as a Promise executor."
                },
                "no-await-in-loop": {
                    "$ref": "#/definitions/NoAwaitInLoopRuleConfig",
                    "description": "Disallow `await` inside of loops."
                },
                "no-bitwise": {
                    "$ref": "#/definitions/NoBitwiseRuleConfig",
                    "description": "Disallow bitwise operators."
                },
                "no-buffer-constructor": {
                    "$ref": "#/definitions/NoBufferConstructorRuleConfig",
                    "description": "Disallow use of the `Buffer()` constructor."
                },
                "no-caller": {
                    "$ref": "#/definitions/NoCallerRuleConfig",
                    "description": "Disallow the use of `arguments.caller` or `arguments.callee`."
                },
                "no-case-declarations": {
                    "$ref": "#/definitions/NoCaseDeclarationsRuleConfig",
                    "description": "Disallow lexical declarations in case clauses."
                },
                "no-catch-shadow": {
                    "$ref": "#/definitions/NoCatchShadowRuleConfig",
                    "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope."
                },
                "no-class-assign": {
                    "$ref": "#/definitions/NoClassAssignRuleConfig",
                    "description": "Disallow reassigning class members."
                },
                "no-compare-neg-zero": {
                    "$ref": "#/definitions/NoCompareNegZeroRuleConfig",
                    "description": "Disallow comparing against -0."
                },
                "no-cond-assign": {
                    "$ref": "#/definitions/NoCondAssignRuleConfig",
                    "description": "Disallow assignment operators in conditional expressions."
                },
                "no-confusing-arrow": {
                    "$ref": "#/definitions/NoConfusingArrowRuleConfig",
                    "description": "Disallow arrow functions where they could be confused with comparisons."
                },
                "no-console": {
                    "$ref": "#/definitions/NoConsoleRuleConfig$1",
                    "description": "Disallow the use of `console`."
                },
                "no-const-assign": {
                    "$ref": "#/definitions/NoConstAssignRuleConfig",
                    "description": "Disallow reassigning `const` variables."
                },
                "no-constant-binary-expression": {
                    "$ref": "#/definitions/NoConstantBinaryExpressionRuleConfig",
                    "description": "Disallow expressions where the operation doesn't affect the value."
                },
                "no-constant-condition": {
                    "$ref": "#/definitions/NoConstantConditionRuleConfig$1",
                    "description": "Disallow constant expressions in conditions."
                },
                "no-constructor-return": {
                    "$ref": "#/definitions/NoConstructorReturnRuleConfig",
                    "description": "Disallow returning value from constructor."
                },
                "no-continue": {
                    "$ref": "#/definitions/NoContinueRuleConfig",
                    "description": "Disallow `continue` statements."
                },
                "no-control-regex": {
                    "$ref": "#/definitions/NoControlRegexRuleConfig",
                    "description": "Disallow control characters in regular expressions."
                },
                "no-debugger": {
                    "$ref": "#/definitions/NoDebuggerRuleConfig",
                    "description": "Disallow the use of `debugger`."
                },
                "no-delete-var": {
                    "$ref": "#/definitions/NoDeleteVarRuleConfig",
                    "description": "Disallow deleting variables."
                },
                "no-div-regex": {
                    "$ref": "#/definitions/NoDivRegexRuleConfig",
                    "description": "Disallow equal signs explicitly at the beginning of regular expressions."
                },
                "no-dupe-args": {
                    "$ref": "#/definitions/NoDupeArgsRuleConfig",
                    "description": "Disallow duplicate arguments in `function` definitions."
                },
                "no-dupe-class-members": {
                    "$ref": "#/definitions/NoDupeClassMembersRuleConfig$1",
                    "description": "Disallow duplicate class members."
                },
                "no-dupe-else-if": {
                    "$ref": "#/definitions/NoDupeElseIfRuleConfig",
                    "description": "Disallow duplicate conditions in if-else-if chains."
                },
                "no-dupe-keys": {
                    "$ref": "#/definitions/NoDupeKeysRuleConfig$2",
                    "description": "Disallow duplicate keys in object literals."
                },
                "no-duplicate-case": {
                    "$ref": "#/definitions/NoDuplicateCaseRuleConfig",
                    "description": "Disallow duplicate case labels."
                },
                "no-duplicate-imports": {
                    "$ref": "#/definitions/NoDuplicateImportsRuleConfig",
                    "description": "Disallow duplicate module imports."
                },
                "no-else-return": {
                    "$ref": "#/definitions/NoElseReturnRuleConfig",
                    "description": "Disallow `else` blocks after `return` statements in `if` statements."
                },
                "no-empty": {
                    "$ref": "#/definitions/NoEmptyRuleConfig",
                    "description": "Disallow empty block statements."
                },
                "no-empty-character-class": {
                    "$ref": "#/definitions/NoEmptyCharacterClassRuleConfig",
                    "description": "Disallow empty character classes in regular expressions."
                },
                "no-empty-function": {
                    "$ref": "#/definitions/NoEmptyFunctionRuleConfig$1",
                    "description": "Disallow empty functions."
                },
                "no-empty-pattern": {
                    "$ref": "#/definitions/NoEmptyPatternRuleConfig$1",
                    "description": "Disallow empty destructuring patterns."
                },
                "no-empty-static-block": {
                    "$ref": "#/definitions/NoEmptyStaticBlockRuleConfig",
                    "description": "Disallow empty static blocks."
                },
                "no-eq-null": {
                    "$ref": "#/definitions/NoEqNullRuleConfig",
                    "description": "Disallow `null` comparisons without type-checking operators."
                },
                "no-eval": {
                    "$ref": "#/definitions/NoEvalRuleConfig",
                    "description": "Disallow the use of `eval()`."
                },
                "no-ex-assign": {
                    "$ref": "#/definitions/NoExAssignRuleConfig",
                    "description": "Disallow reassigning exceptions in `catch` clauses."
                },
                "no-extend-native": {
                    "$ref": "#/definitions/NoExtendNativeRuleConfig",
                    "description": "Disallow extending native types."
                },
                "no-extra-bind": {
                    "$ref": "#/definitions/NoExtraBindRuleConfig",
                    "description": "Disallow unnecessary calls to `.bind()`."
                },
                "no-extra-boolean-cast": {
                    "$ref": "#/definitions/NoExtraBooleanCastRuleConfig",
                    "description": "Disallow unnecessary boolean casts."
                },
                "no-extra-label": {
                    "$ref": "#/definitions/NoExtraLabelRuleConfig",
                    "description": "Disallow unnecessary labels."
                },
                "no-extra-parens": {
                    "$ref": "#/definitions/NoExtraParensRuleConfig$2",
                    "description": "Disallow unnecessary parentheses."
                },
                "no-extra-semi": {
                    "$ref": "#/definitions/NoExtraSemiRuleConfig$1",
                    "description": "Disallow unnecessary semicolons."
                },
                "no-fallthrough": {
                    "$ref": "#/definitions/NoFallthroughRuleConfig",
                    "description": "Disallow fallthrough of `case` statements."
                },
                "no-floating-decimal": {
                    "$ref": "#/definitions/NoFloatingDecimalRuleConfig$1",
                    "description": "Disallow leading or trailing decimal points in numeric literals."
                },
                "no-func-assign": {
                    "$ref": "#/definitions/NoFuncAssignRuleConfig",
                    "description": "Disallow reassigning `function` declarations."
                },
                "no-global-assign": {
                    "$ref": "#/definitions/NoGlobalAssignRuleConfig",
                    "description": "Disallow assignments to native objects or read-only global variables."
                },
                "no-implicit-coercion": {
                    "$ref": "#/definitions/NoImplicitCoercionRuleConfig",
                    "description": "Disallow shorthand type conversions."
                },
                "no-implicit-globals": {
                    "$ref": "#/definitions/NoImplicitGlobalsRuleConfig",
                    "description": "Disallow declarations in the global scope."
                },
                "no-implied-eval": {
                    "$ref": "#/definitions/NoImpliedEvalRuleConfig$1",
                    "description": "Disallow the use of `eval()`-like methods."
                },
                "no-import-assign": {
                    "$ref": "#/definitions/NoImportAssignRuleConfig",
                    "description": "Disallow assigning to imported bindings."
                },
                "no-inline-comments": {
                    "$ref": "#/definitions/NoInlineCommentsRuleConfig",
                    "description": "Disallow inline comments after code."
                },
                "no-inner-declarations": {
                    "$ref": "#/definitions/NoInnerDeclarationsRuleConfig",
                    "description": "Disallow variable or `function` declarations in nested blocks."
                },
                "no-invalid-regexp": {
                    "$ref": "#/definitions/NoInvalidRegexpRuleConfig",
                    "description": "Disallow invalid regular expression strings in `RegExp` constructors."
                },
                "no-invalid-this": {
                    "$ref": "#/definitions/NoInvalidThisRuleConfig$1",
                    "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`."
                },
                "no-irregular-whitespace": {
                    "$ref": "#/definitions/NoIrregularWhitespaceRuleConfig$3",
                    "description": "Disallow irregular whitespace."
                },
                "no-iterator": {
                    "$ref": "#/definitions/NoIteratorRuleConfig",
                    "description": "Disallow the use of the `__iterator__` property."
                },
                "no-label-var": {
                    "$ref": "#/definitions/NoLabelVarRuleConfig",
                    "description": "Disallow labels that share a name with a variable."
                },
                "no-labels": {
                    "$ref": "#/definitions/NoLabelsRuleConfig",
                    "description": "Disallow labeled statements."
                },
                "no-lone-blocks": {
                    "$ref": "#/definitions/NoLoneBlocksRuleConfig",
                    "description": "Disallow unnecessary nested blocks."
                },
                "no-lonely-if": {
                    "$ref": "#/definitions/NoLonelyIfRuleConfig$1",
                    "description": "Disallow `if` statements as the only statement in `else` blocks."
                },
                "no-loop-func": {
                    "$ref": "#/definitions/NoLoopFuncRuleConfig$1",
                    "description": "Disallow function declarations that contain unsafe references inside loop statements."
                },
                "no-loss-of-precision": {
                    "$ref": "#/definitions/NoLossOfPrecisionRuleConfig$2",
                    "description": "Disallow literal numbers that lose precision."
                },
                "no-magic-numbers": {
                    "$ref": "#/definitions/NoMagicNumbersRuleConfig$1",
                    "description": "Disallow magic numbers."
                },
                "no-misleading-character-class": {
                    "$ref": "#/definitions/NoMisleadingCharacterClassRuleConfig",
                    "description": "Disallow characters which are made with multiple code points in character class syntax."
                },
                "no-mixed-operators": {
                    "$ref": "#/definitions/NoMixedOperatorsRuleConfig",
                    "description": "Disallow mixed binary operators."
                },
                "no-mixed-requires": {
                    "$ref": "#/definitions/NoMixedRequiresRuleConfig$2",
                    "description": "Disallow `require` calls to be mixed with regular variable declarations."
                },
                "no-mixed-spaces-and-tabs": {
                    "$ref": "#/definitions/NoMixedSpacesAndTabsRuleConfig",
                    "description": "Disallow mixed spaces and tabs for indentation."
                },
                "no-multi-assign": {
                    "$ref": "#/definitions/NoMultiAssignRuleConfig",
                    "description": "Disallow use of chained assignment expressions."
                },
                "no-multi-spaces": {
                    "$ref": "#/definitions/NoMultiSpacesRuleConfig$1",
                    "description": "Disallow multiple spaces."
                },
                "no-multi-str": {
                    "$ref": "#/definitions/NoMultiStrRuleConfig$1",
                    "description": "Disallow multiline strings."
                },
                "no-multiple-empty-lines": {
                    "$ref": "#/definitions/NoMultipleEmptyLinesRuleConfig$1",
                    "description": "Disallow multiple empty lines."
                },
                "no-native-reassign": {
                    "$ref": "#/definitions/NoNativeReassignRuleConfig",
                    "description": "Disallow assignments to native objects or read-only global variables."
                },
                "no-negated-condition": {
                    "$ref": "#/definitions/NoNegatedConditionRuleConfig$1",
                    "description": "Disallow negated conditions."
                },
                "no-negated-in-lhs": {
                    "$ref": "#/definitions/NoNegatedInLhsRuleConfig",
                    "description": "Disallow negating the left operand in `in` expressions."
                },
                "no-nested-ternary": {
                    "$ref": "#/definitions/NoNestedTernaryRuleConfig$1",
                    "description": "Disallow nested ternary expressions."
                },
                "no-new": {
                    "$ref": "#/definitions/NoNewRuleConfig",
                    "description": "Disallow `new` operators outside of assignments or comparisons."
                },
                "no-new-func": {
                    "$ref": "#/definitions/NoNewFuncRuleConfig",
                    "description": "Disallow `new` operators with the `Function` object."
                },
                "no-new-native-nonconstructor": {
                    "$ref": "#/definitions/NoNewNativeNonconstructorRuleConfig",
                    "description": "Disallow `new` operators with global non-constructor functions."
                },
                "no-new-object": {
                    "$ref": "#/definitions/NoNewObjectRuleConfig",
                    "description": "Disallow `Object` constructors."
                },
                "no-new-require": {
                    "$ref": "#/definitions/NoNewRequireRuleConfig$2",
                    "description": "Disallow `new` operators with calls to `require`."
                },
                "no-new-symbol": {
                    "$ref": "#/definitions/NoNewSymbolRuleConfig",
                    "description": "Disallow `new` operators with the `Symbol` object."
                },
                "no-new-wrappers": {
                    "$ref": "#/definitions/NoNewWrappersRuleConfig",
                    "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects."
                },
                "no-nonoctal-decimal-escape": {
                    "$ref": "#/definitions/NoNonoctalDecimalEscapeRuleConfig",
                    "description": "Disallow `\\8` and `\\9` escape sequences in string literals."
                },
                "no-obj-calls": {
                    "$ref": "#/definitions/NoObjCallsRuleConfig",
                    "description": "Disallow calling global object properties as functions."
                },
                "no-object-constructor": {
                    "$ref": "#/definitions/NoObjectConstructorRuleConfig",
                    "description": "Disallow calls to the `Object` constructor without an argument."
                },
                "no-octal": {
                    "$ref": "#/definitions/NoOctalRuleConfig$1",
                    "description": "Disallow octal literals."
                },
                "no-octal-escape": {
                    "$ref": "#/definitions/NoOctalEscapeRuleConfig$1",
                    "description": "Disallow octal escape sequences in string literals."
                },
                "no-param-reassign": {
                    "$ref": "#/definitions/NoParamReassignRuleConfig",
                    "description": "Disallow reassigning `function` parameters."
                },
                "no-path-concat": {
                    "$ref": "#/definitions/NoPathConcatRuleConfig$2",
                    "description": "Disallow string concatenation with `__dirname` and `__filename`."
                },
                "no-plusplus": {
                    "$ref": "#/definitions/NoPlusplusRuleConfig",
                    "description": "Disallow the unary operators `++` and `--`."
                },
                "no-process-env": {
                    "$ref": "#/definitions/NoProcessEnvRuleConfig$2",
                    "description": "Disallow the use of `process.env`."
                },
                "no-process-exit": {
                    "$ref": "#/definitions/NoProcessExitRuleConfig$3",
                    "description": "Disallow the use of `process.exit()`."
                },
                "no-promise-executor-return": {
                    "$ref": "#/definitions/NoPromiseExecutorReturnRuleConfig",
                    "description": "Disallow returning values from Promise executor functions."
                },
                "no-proto": {
                    "$ref": "#/definitions/NoProtoRuleConfig",
                    "description": "Disallow the use of the `__proto__` property."
                },
                "no-prototype-builtins": {
                    "$ref": "#/definitions/NoPrototypeBuiltinsRuleConfig",
                    "description": "Disallow calling some `Object.prototype` methods directly on objects."
                },
                "no-redeclare": {
                    "$ref": "#/definitions/NoRedeclareRuleConfig$1",
                    "description": "Disallow variable redeclaration."
                },
                "no-regex-spaces": {
                    "$ref": "#/definitions/NoRegexSpacesRuleConfig",
                    "description": "Disallow multiple spaces in regular expressions."
                },
                "no-restricted-exports": {
                    "$ref": "#/definitions/NoRestrictedExportsRuleConfig",
                    "description": "Disallow specified names in exports."
                },
                "no-restricted-globals": {
                    "$ref": "#/definitions/NoRestrictedGlobalsRuleConfig",
                    "description": "Disallow specified global variables."
                },
                "no-restricted-imports": {
                    "$ref": "#/definitions/NoRestrictedImportsRuleConfig$1",
                    "description": "Disallow specified modules when loaded by `import`."
                },
                "no-restricted-modules": {
                    "$ref": "#/definitions/NoRestrictedModulesRuleConfig",
                    "description": "Disallow specified modules when loaded by `require`."
                },
                "no-restricted-properties": {
                    "$ref": "#/definitions/NoRestrictedPropertiesRuleConfig",
                    "description": "Disallow certain properties on certain objects."
                },
                "no-restricted-syntax": {
                    "$ref": "#/definitions/NoRestrictedSyntaxRuleConfig$2",
                    "description": "Disallow specified syntax."
                },
                "no-return-assign": {
                    "$ref": "#/definitions/NoReturnAssignRuleConfig",
                    "description": "Disallow assignment operators in `return` statements."
                },
                "no-return-await": {
                    "$ref": "#/definitions/NoReturnAwaitRuleConfig",
                    "description": "Disallow unnecessary `return await`."
                },
                "no-script-url": {
                    "$ref": "#/definitions/NoScriptUrlRuleConfig",
                    "description": "Disallow `javascript:` urls."
                },
                "no-self-assign": {
                    "$ref": "#/definitions/NoSelfAssignRuleConfig",
                    "description": "Disallow assignments where both sides are exactly the same."
                },
                "no-self-compare": {
                    "$ref": "#/definitions/NoSelfCompareRuleConfig",
                    "description": "Disallow comparisons where both sides are exactly the same."
                },
                "no-sequences": {
                    "$ref": "#/definitions/NoSequencesRuleConfig",
                    "description": "Disallow comma operators."
                },
                "no-setter-return": {
                    "$ref": "#/definitions/NoSetterReturnRuleConfig",
                    "description": "Disallow returning values from setters."
                },
                "no-shadow": {
                    "$ref": "#/definitions/NoShadowRuleConfig$1",
                    "description": "Disallow variable declarations from shadowing variables declared in the outer scope."
                },
                "no-shadow-restricted-names": {
                    "$ref": "#/definitions/NoShadowRestrictedNamesRuleConfig",
                    "description": "Disallow identifiers from shadowing restricted names."
                },
                "no-spaced-func": {
                    "$ref": "#/definitions/NoSpacedFuncRuleConfig",
                    "description": "Disallow spacing between function identifiers and their applications (deprecated)."
                },
                "no-sparse-arrays": {
                    "$ref": "#/definitions/NoSparseArraysRuleConfig$2",
                    "description": "Disallow sparse arrays."
                },
                "no-sync": {
                    "$ref": "#/definitions/NoSyncRuleConfig$2",
                    "description": "Disallow synchronous methods."
                },
                "no-tabs": {
                    "$ref": "#/definitions/NoTabsRuleConfig",
                    "description": "Disallow all tabs."
                },
                "no-template-curly-in-string": {
                    "$ref": "#/definitions/NoTemplateCurlyInStringRuleConfig",
                    "description": "Disallow template literal placeholder syntax in regular strings."
                },
                "no-ternary": {
                    "$ref": "#/definitions/NoTernaryRuleConfig",
                    "description": "Disallow ternary operators."
                },
                "no-this-before-super": {
                    "$ref": "#/definitions/NoThisBeforeSuperRuleConfig",
                    "description": "Disallow `this`/`super` before calling `super()` in constructors."
                },
                "no-throw-literal": {
                    "$ref": "#/definitions/NoThrowLiteralRuleConfig$1",
                    "description": "Disallow throwing literals as exceptions."
                },
                "no-trailing-spaces": {
                    "$ref": "#/definitions/NoTrailingSpacesRuleConfig",
                    "description": "Disallow trailing whitespace at the end of lines."
                },
                "no-undef": {
                    "$ref": "#/definitions/NoUndefRuleConfig",
                    "description": "Disallow the use of undeclared variables unless mentioned in `/*global ` comments."
                },
                "no-undef-init": {
                    "$ref": "#/definitions/NoUndefInitRuleConfig",
                    "description": "Disallow initializing variables to `undefined`."
                },
                "no-undefined": {
                    "$ref": "#/definitions/NoUndefinedRuleConfig",
                    "description": "Disallow the use of `undefined` as an identifier."
                },
                "no-underscore-dangle": {
                    "$ref": "#/definitions/NoUnderscoreDangleRuleConfig",
                    "description": "Disallow dangling underscores in identifiers."
                },
                "no-unexpected-multiline": {
                    "$ref": "#/definitions/NoUnexpectedMultilineRuleConfig",
                    "description": "Disallow confusing multiline expressions."
                },
                "no-unmodified-loop-condition": {
                    "$ref": "#/definitions/NoUnmodifiedLoopConditionRuleConfig",
                    "description": "Disallow unmodified loop conditions."
                },
                "no-unneeded-ternary": {
                    "$ref": "#/definitions/NoUnneededTernaryRuleConfig",
                    "description": "Disallow ternary operators when simpler alternatives exist."
                },
                "no-unreachable": {
                    "$ref": "#/definitions/NoUnreachableRuleConfig",
                    "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements."
                },
                "no-unreachable-loop": {
                    "$ref": "#/definitions/NoUnreachableLoopRuleConfig",
                    "description": "Disallow loops with a body that allows only one iteration."
                },
                "no-unsafe-finally": {
                    "$ref": "#/definitions/NoUnsafeFinallyRuleConfig",
                    "description": "Disallow control flow statements in `finally` blocks."
                },
                "no-unsafe-negation": {
                    "$ref": "#/definitions/NoUnsafeNegationRuleConfig",
                    "description": "Disallow negating the left operand of relational operators."
                },
                "no-unsafe-optional-chaining": {
                    "$ref": "#/definitions/NoUnsafeOptionalChainingRuleConfig",
                    "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed."
                },
                "no-unused-expressions": {
                    "$ref": "#/definitions/NoUnusedExpressionsRuleConfig$1",
                    "description": "Disallow unused expressions."
                },
                "no-unused-labels": {
                    "$ref": "#/definitions/NoUnusedLabelsRuleConfig",
                    "description": "Disallow unused labels."
                },
                "no-unused-private-class-members": {
                    "$ref": "#/definitions/NoUnusedPrivateClassMembersRuleConfig",
                    "description": "Disallow unused private class members."
                },
                "no-unused-vars": {
                    "$ref": "#/definitions/NoUnusedVarsRuleConfig$2",
                    "description": "Disallow unused variables."
                },
                "no-use-before-define": {
                    "$ref": "#/definitions/NoUseBeforeDefineRuleConfig$1",
                    "description": "Disallow the use of variables before they are defined."
                },
                "no-useless-backreference": {
                    "$ref": "#/definitions/NoUselessBackreferenceRuleConfig",
                    "description": "Disallow useless backreferences in regular expressions."
                },
                "no-useless-call": {
                    "$ref": "#/definitions/NoUselessCallRuleConfig",
                    "description": "Disallow unnecessary calls to `.call()` and `.apply()`."
                },
                "no-useless-catch": {
                    "$ref": "#/definitions/NoUselessCatchRuleConfig$1",
                    "description": "Disallow unnecessary `catch` clauses."
                },
                "no-useless-computed-key": {
                    "$ref": "#/definitions/NoUselessComputedKeyRuleConfig",
                    "description": "Disallow unnecessary computed property keys in objects and classes."
                },
                "no-useless-concat": {
                    "$ref": "#/definitions/NoUselessConcatRuleConfig$1",
                    "description": "Disallow unnecessary concatenation of literals or template literals."
                },
                "no-useless-constructor": {
                    "$ref": "#/definitions/NoUselessConstructorRuleConfig$1",
                    "description": "Disallow unnecessary constructors."
                },
                "no-useless-escape": {
                    "$ref": "#/definitions/NoUselessEscapeRuleConfig$1",
                    "description": "Disallow unnecessary escape characters."
                },
                "no-useless-rename": {
                    "$ref": "#/definitions/NoUselessRenameRuleConfig",
                    "description": "Disallow renaming import, export, and destructured assignments to the same name."
                },
                "no-useless-return": {
                    "$ref": "#/definitions/NoUselessReturnRuleConfig",
                    "description": "Disallow redundant return statements."
                },
                "no-var": {
                    "$ref": "#/definitions/NoVarRuleConfig",
                    "description": "Require `let` or `const` instead of `var`."
                },
                "no-void": {
                    "$ref": "#/definitions/NoVoidRuleConfig",
                    "description": "Disallow `void` operators."
                },
                "no-warning-comments": {
                    "$ref": "#/definitions/NoWarningCommentsRuleConfig",
                    "description": "Disallow specified warning terms in comments."
                },
                "no-whitespace-before-property": {
                    "$ref": "#/definitions/NoWhitespaceBeforePropertyRuleConfig",
                    "description": "Disallow whitespace before properties."
                },
                "no-with": {
                    "$ref": "#/definitions/NoWithRuleConfig",
                    "description": "Disallow `with` statements."
                },
                "node/callback-return": {
                    "$ref": "#/definitions/CallbackReturnRuleConfig$1"
                },
                "node/exports-style": {
                    "$ref": "#/definitions/ExportsStyleRuleConfig$1"
                },
                "node/file-extension-in-import": {
                    "$ref": "#/definitions/FileExtensionInImportRuleConfig$1"
                },
                "node/global-require": {
                    "$ref": "#/definitions/GlobalRequireRuleConfig$1"
                },
                "node/handle-callback-err": {
                    "$ref": "#/definitions/HandleCallbackErrRuleConfig$1"
                },
                "node/no-callback-literal": {
                    "$ref": "#/definitions/NoCallbackLiteralRuleConfig$1"
                },
                "node/no-deprecated-api": {
                    "$ref": "#/definitions/NoDeprecatedApiRuleConfig$1"
                },
                "node/no-exports-assign": {
                    "$ref": "#/definitions/NoExportsAssignRuleConfig$1"
                },
                "node/no-extraneous-import": {
                    "$ref": "#/definitions/NoExtraneousImportRuleConfig$1"
                },
                "node/no-extraneous-require": {
                    "$ref": "#/definitions/NoExtraneousRequireRuleConfig$1"
                },
                "node/no-hide-core-modules": {
                    "$ref": "#/definitions/NoHideCoreModulesRuleConfig$1"
                },
                "node/no-missing-import": {
                    "$ref": "#/definitions/NoMissingImportRuleConfig$1"
                },
                "node/no-missing-require": {
                    "$ref": "#/definitions/NoMissingRequireRuleConfig$1"
                },
                "node/no-mixed-requires": {
                    "$ref": "#/definitions/NoMixedRequiresRuleConfig$1"
                },
                "node/no-new-require": {
                    "$ref": "#/definitions/NoNewRequireRuleConfig$1"
                },
                "node/no-path-concat": {
                    "$ref": "#/definitions/NoPathConcatRuleConfig$1"
                },
                "node/no-process-env": {
                    "$ref": "#/definitions/NoProcessEnvRuleConfig$1"
                },
                "node/no-process-exit": {
                    "$ref": "#/definitions/NoProcessExitRuleConfig$2"
                },
                "node/no-restricted-import": {
                    "$ref": "#/definitions/NoRestrictedImportRuleConfig$1"
                },
                "node/no-restricted-require": {
                    "$ref": "#/definitions/NoRestrictedRequireRuleConfig$1"
                },
                "node/no-sync": {
                    "$ref": "#/definitions/NoSyncRuleConfig$1"
                },
                "node/no-unpublished-bin": {
                    "$ref": "#/definitions/NoUnpublishedBinRuleConfig$1"
                },
                "node/no-unpublished-import": {
                    "$ref": "#/definitions/NoUnpublishedImportRuleConfig$1"
                },
                "node/no-unpublished-require": {
                    "$ref": "#/definitions/NoUnpublishedRequireRuleConfig$1"
                },
                "node/no-unsupported-features": {
                    "$ref": "#/definitions/NoUnsupportedFeaturesRuleConfig$2"
                },
                "node/no-unsupported-features/es-builtins": {
                    "$ref": "#/definitions/NoUnsupportedFeaturesEsBuiltinsRuleConfig$1"
                },
                "node/no-unsupported-features/es-syntax": {
                    "$ref": "#/definitions/NoUnsupportedFeaturesEsSyntaxRuleConfig$1"
                },
                "node/no-unsupported-features/node-builtins": {
                    "$ref": "#/definitions/NoUnsupportedFeaturesNodeBuiltinsRuleConfig$1"
                },
                "node/prefer-global/buffer": {
                    "$ref": "#/definitions/PreferGlobalBufferRuleConfig$1"
                },
                "node/prefer-global/console": {
                    "$ref": "#/definitions/PreferGlobalConsoleRuleConfig$1"
                },
                "node/prefer-global/process": {
                    "$ref": "#/definitions/PreferGlobalProcessRuleConfig$1"
                },
                "node/prefer-global/text-decoder": {
                    "$ref": "#/definitions/PreferGlobalTextDecoderRuleConfig$1"
                },
                "node/prefer-global/text-encoder": {
                    "$ref": "#/definitions/PreferGlobalTextEncoderRuleConfig$1"
                },
                "node/prefer-global/url": {
                    "$ref": "#/definitions/PreferGlobalUrlRuleConfig$1"
                },
                "node/prefer-global/url-search-params": {
                    "$ref": "#/definitions/PreferGlobalUrlSearchParamsRuleConfig$1"
                },
                "node/prefer-promises/dns": {
                    "$ref": "#/definitions/PreferPromisesDnsRuleConfig$1"
                },
                "node/prefer-promises/fs": {
                    "$ref": "#/definitions/PreferPromisesFsRuleConfig$1"
                },
                "node/process-exit-as-throw": {
                    "$ref": "#/definitions/ProcessExitAsThrowRuleConfig$1"
                },
                "node/shebang": {
                    "$ref": "#/definitions/ShebangRuleConfig$1"
                },
                "nonblock-statement-body-position": {
                    "$ref": "#/definitions/NonblockStatementBodyPositionRuleConfig",
                    "description": "Enforce the location of single-line statements."
                },
                "object-curly-newline": {
                    "$ref": "#/definitions/ObjectCurlyNewlineRuleConfig$2",
                    "description": "Enforce consistent line breaks after opening and before closing braces."
                },
                "object-curly-spacing": {
                    "$ref": "#/definitions/ObjectCurlySpacingRuleConfig$3",
                    "description": "Enforce consistent spacing inside braces."
                },
                "object-property-newline": {
                    "$ref": "#/definitions/ObjectPropertyNewlineRuleConfig$2",
                    "description": "Enforce placing object properties on separate lines."
                },
                "object-shorthand": {
                    "$ref": "#/definitions/ObjectShorthandRuleConfig$1",
                    "description": "Require or disallow method and property shorthand syntax for object literals."
                },
                "one-var": {
                    "$ref": "#/definitions/OneVarRuleConfig",
                    "description": "Enforce variables to be declared either together or separately in functions."
                },
                "one-var-declaration-per-line": {
                    "$ref": "#/definitions/OneVarDeclarationPerLineRuleConfig",
                    "description": "Require or disallow newlines around variable declarations."
                },
                "operator-assignment": {
                    "$ref": "#/definitions/OperatorAssignmentRuleConfig",
                    "description": "Require or disallow assignment operator shorthand where possible."
                },
                "operator-linebreak": {
                    "$ref": "#/definitions/OperatorLinebreakRuleConfig$1",
                    "description": "Enforce consistent linebreak style for operators."
                },
                "padded-blocks": {
                    "$ref": "#/definitions/PaddedBlocksRuleConfig",
                    "description": "Require or disallow padding within blocks."
                },
                "padding-line-between-statements": {
                    "$ref": "#/definitions/PaddingLineBetweenStatementsRuleConfig$1",
                    "description": "Require or disallow padding lines between statements."
                },
                "prefer-arrow-callback": {
                    "$ref": "#/definitions/PreferArrowCallbackRuleConfig",
                    "description": "Require using arrow functions for callbacks."
                },
                "prefer-const": {
                    "$ref": "#/definitions/PreferConstRuleConfig",
                    "description": "Require `const` declarations for variables that are never reassigned after declared."
                },
                "prefer-destructuring": {
                    "$ref": "#/definitions/PreferDestructuringRuleConfig",
                    "description": "Require destructuring from arrays and/or objects."
                },
                "prefer-exponentiation-operator": {
                    "$ref": "#/definitions/PreferExponentiationOperatorRuleConfig$1",
                    "description": "Disallow the use of `Math.pow` in favor of the `**` operator."
                },
                "prefer-named-capture-group": {
                    "$ref": "#/definitions/PreferNamedCaptureGroupRuleConfig",
                    "description": "Enforce using named capture group in regular expression."
                },
                "prefer-numeric-literals": {
                    "$ref": "#/definitions/PreferNumericLiteralsRuleConfig",
                    "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals."
                },
                "prefer-object-has-own": {
                    "$ref": "#/definitions/PreferObjectHasOwnRuleConfig$1",
                    "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`."
                },
                "prefer-object-spread": {
                    "$ref": "#/definitions/PreferObjectSpreadRuleConfig",
                    "description": "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead."
                },
                "prefer-promise-reject-errors": {
                    "$ref": "#/definitions/PreferPromiseRejectErrorsRuleConfig",
                    "description": "Require using Error objects as Promise rejection reasons."
                },
                "prefer-reflect": {
                    "$ref": "#/definitions/PreferReflectRuleConfig",
                    "description": "Require `Reflect` methods where applicable."
                },
                "prefer-regex-literals": {
                    "$ref": "#/definitions/PreferRegexLiteralsRuleConfig",
                    "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals."
                },
                "prefer-rest-params": {
                    "$ref": "#/definitions/PreferRestParamsRuleConfig",
                    "description": "Require rest parameters instead of `arguments`."
                },
                "prefer-spread": {
                    "$ref": "#/definitions/PreferSpreadRuleConfig$1",
                    "description": "Require spread operators instead of `.apply()`."
                },
                "prefer-template": {
                    "$ref": "#/definitions/PreferTemplateRuleConfig$1",
                    "description": "Require template literals instead of string concatenation."
                },
                "quote-props": {
                    "$ref": "#/definitions/QuotePropsRuleConfig$2",
                    "description": "Require quotes around object literal property names."
                },
                "quotes": {
                    "$ref": "#/definitions/QuotesRuleConfig$3",
                    "description": "Enforce the consistent use of either backticks, double, or single quotes."
                },
                "radix": {
                    "$ref": "#/definitions/RadixRuleConfig",
                    "description": "Enforce the consistent use of the radix argument when using `parseInt()`."
                },
                "require-atomic-updates": {
                    "$ref": "#/definitions/RequireAtomicUpdatesRuleConfig",
                    "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`."
                },
                "require-await": {
                    "$ref": "#/definitions/RequireAwaitRuleConfig$1",
                    "description": "Disallow async functions which have no `await` expression."
                },
                "require-jsdoc": {
                    "$ref": "#/definitions/RequireJsdocRuleConfig$1",
                    "description": "Require JSDoc comments."
                },
                "require-unicode-regexp": {
                    "$ref": "#/definitions/RequireUnicodeRegexpRuleConfig",
                    "description": "Enforce the use of `u` or `v` flag on RegExp."
                },
                "require-yield": {
                    "$ref": "#/definitions/RequireYieldRuleConfig",
                    "description": "Require generator functions to contain `yield`."
                },
                "rest-spread-spacing": {
                    "$ref": "#/definitions/RestSpreadSpacingRuleConfig",
                    "description": "Enforce spacing between rest and spread operators and their expressions."
                },
                "semi": {
                    "$ref": "#/definitions/SemiRuleConfig$1",
                    "description": "Require or disallow semicolons instead of ASI."
                },
                "semi-spacing": {
                    "$ref": "#/definitions/SemiSpacingRuleConfig",
                    "description": "Enforce consistent spacing before and after semicolons."
                },
                "semi-style": {
                    "$ref": "#/definitions/SemiStyleRuleConfig",
                    "description": "Enforce location of semicolons."
                },
                "sort-imports": {
                    "$ref": "#/definitions/SortImportsRuleConfig",
                    "description": "Enforce sorted import declarations within modules."
                },
                "sort-keys": {
                    "$ref": "#/definitions/SortKeysRuleConfig$3",
                    "description": "Require object keys to be sorted."
                },
                "sort-vars": {
                    "$ref": "#/definitions/SortVarsRuleConfig",
                    "description": "Require variables within the same declaration block to be sorted."
                },
                "space-before-blocks": {
                    "$ref": "#/definitions/SpaceBeforeBlocksRuleConfig$1",
                    "description": "Enforce consistent spacing before blocks."
                },
                "space-before-function-paren": {
                    "$ref": "#/definitions/SpaceBeforeFunctionParenRuleConfig$1",
                    "description": "Enforce consistent spacing before `function` definition opening parenthesis."
                },
                "space-in-parens": {
                    "$ref": "#/definitions/SpaceInParensRuleConfig$1",
                    "description": "Enforce consistent spacing inside parentheses."
                },
                "space-infix-ops": {
                    "$ref": "#/definitions/SpaceInfixOpsRuleConfig$2",
                    "description": "Require spacing around infix operators."
                },
                "space-unary-ops": {
                    "$ref": "#/definitions/SpaceUnaryOpsRuleConfig$2",
                    "description": "Enforce consistent spacing before or after unary operators."
                },
                "spaced-comment": {
                    "$ref": "#/definitions/SpacedCommentRuleConfig$1",
                    "description": "Enforce consistent spacing after the `//` or `/*` in a comment."
                },
                "strict": {
                    "$ref": "#/definitions/StrictRuleConfig",
                    "description": "Require or disallow strict mode directives."
                },
                "switch-colon-spacing": {
                    "$ref": "#/definitions/SwitchColonSpacingRuleConfig",
                    "description": "Enforce spacing around colons of switch statements."
                },
                "symbol-description": {
                    "$ref": "#/definitions/SymbolDescriptionRuleConfig",
                    "description": "Require symbol descriptions."
                },
                "template-curly-spacing": {
                    "$ref": "#/definitions/TemplateCurlySpacingRuleConfig$1",
                    "description": "Require or disallow spacing around embedded expressions of template strings."
                },
                "template-tag-spacing": {
                    "$ref": "#/definitions/TemplateTagSpacingRuleConfig",
                    "description": "Require or disallow spacing between template tags and their literals."
                },
                "test/consistent-test-filename": {
                    "$ref": "#/definitions/ConsistentTestFilenameRuleConfig"
                },
                "test/consistent-test-it": {
                    "$ref": "#/definitions/ConsistentTestItRuleConfig"
                },
                "test/expect-expect": {
                    "$ref": "#/definitions/ExpectExpectRuleConfig"
                },
                "test/max-expects": {
                    "$ref": "#/definitions/MaxExpectsRuleConfig"
                },
                "test/max-nested-describe": {
                    "$ref": "#/definitions/MaxNestedDescribeRuleConfig"
                },
                "test/no-alias-methods": {
                    "$ref": "#/definitions/NoAliasMethodsRuleConfig"
                },
                "test/no-commented-out-tests": {
                    "$ref": "#/definitions/NoCommentedOutTestsRuleConfig"
                },
                "test/no-conditional-expect": {
                    "$ref": "#/definitions/NoConditionalExpectRuleConfig"
                },
                "test/no-conditional-in-test": {
                    "$ref": "#/definitions/NoConditionalInTestRuleConfig"
                },
                "test/no-conditional-tests": {
                    "$ref": "#/definitions/NoConditionalTestsRuleConfig"
                },
                "test/no-disabled-tests": {
                    "$ref": "#/definitions/NoDisabledTestsRuleConfig"
                },
                "test/no-done-callback": {
                    "$ref": "#/definitions/NoDoneCallbackRuleConfig"
                },
                "test/no-duplicate-hooks": {
                    "$ref": "#/definitions/NoDuplicateHooksRuleConfig"
                },
                "test/no-focused-tests": {
                    "$ref": "#/definitions/NoFocusedTestsRuleConfig"
                },
                "test/no-hooks": {
                    "$ref": "#/definitions/NoHooksRuleConfig"
                },
                "test/no-identical-title": {
                    "$ref": "#/definitions/NoIdenticalTitleRuleConfig"
                },
                "test/no-interpolation-in-snapshots": {
                    "$ref": "#/definitions/NoInterpolationInSnapshotsRuleConfig"
                },
                "test/no-large-snapshots": {
                    "$ref": "#/definitions/NoLargeSnapshotsRuleConfig"
                },
                "test/no-mocks-import": {
                    "$ref": "#/definitions/NoMocksImportRuleConfig"
                },
                "test/no-only-tests": {
                    "$ref": "#/definitions/RuleConfig<[]>"
                },
                "test/no-restricted-matchers": {
                    "$ref": "#/definitions/NoRestrictedMatchersRuleConfig"
                },
                "test/no-restricted-vi-methods": {
                    "$ref": "#/definitions/NoRestrictedViMethodsRuleConfig"
                },
                "test/no-standalone-expect": {
                    "$ref": "#/definitions/NoStandaloneExpectRuleConfig"
                },
                "test/no-test-prefixes": {
                    "$ref": "#/definitions/NoTestPrefixesRuleConfig"
                },
                "test/no-test-return-statement": {
                    "$ref": "#/definitions/NoTestReturnStatementRuleConfig"
                },
                "test/prefer-called-with": {
                    "$ref": "#/definitions/PreferCalledWithRuleConfig"
                },
                "test/prefer-comparison-matcher": {
                    "$ref": "#/definitions/PreferComparisonMatcherRuleConfig"
                },
                "test/prefer-each": {
                    "$ref": "#/definitions/PreferEachRuleConfig"
                },
                "test/prefer-equality-matcher": {
                    "$ref": "#/definitions/PreferEqualityMatcherRuleConfig"
                },
                "test/prefer-expect-resolves": {
                    "$ref": "#/definitions/PreferExpectResolvesRuleConfig"
                },
                "test/prefer-hooks-in-order": {
                    "$ref": "#/definitions/PreferHooksInOrderRuleConfig"
                },
                "test/prefer-hooks-on-top": {
                    "$ref": "#/definitions/PreferHooksOnTopRuleConfig"
                },
                "test/prefer-lowercase-title": {
                    "$ref": "#/definitions/PreferLowercaseTitleRuleConfig"
                },
                "test/prefer-mock-promise-shorthand": {
                    "$ref": "#/definitions/PreferMockPromiseShorthandRuleConfig"
                },
                "test/prefer-snapshot-hint": {
                    "$ref": "#/definitions/PreferSnapshotHintRuleConfig"
                },
                "test/prefer-spy-on": {
                    "$ref": "#/definitions/PreferSpyOnRuleConfig"
                },
                "test/prefer-strict-equal": {
                    "$ref": "#/definitions/PreferStrictEqualRuleConfig"
                },
                "test/prefer-to-be": {
                    "$ref": "#/definitions/PreferToBeRuleConfig"
                },
                "test/prefer-to-be-falsy": {
                    "$ref": "#/definitions/PreferToBeFalsyRuleConfig"
                },
                "test/prefer-to-be-object": {
                    "$ref": "#/definitions/PreferToBeObjectRuleConfig"
                },
                "test/prefer-to-be-truthy": {
                    "$ref": "#/definitions/PreferToBeTruthyRuleConfig"
                },
                "test/prefer-to-contain": {
                    "$ref": "#/definitions/PreferToContainRuleConfig"
                },
                "test/prefer-to-have-length": {
                    "$ref": "#/definitions/PreferToHaveLengthRuleConfig"
                },
                "test/prefer-todo": {
                    "$ref": "#/definitions/PreferTodoRuleConfig"
                },
                "test/require-hook": {
                    "$ref": "#/definitions/RequireHookRuleConfig"
                },
                "test/require-to-throw-message": {
                    "$ref": "#/definitions/RequireToThrowMessageRuleConfig"
                },
                "test/require-top-level-describe": {
                    "$ref": "#/definitions/RequireTopLevelDescribeRuleConfig"
                },
                "test/valid-describe-callback": {
                    "$ref": "#/definitions/ValidDescribeCallbackRuleConfig"
                },
                "test/valid-expect": {
                    "$ref": "#/definitions/ValidExpectRuleConfig"
                },
                "test/valid-title": {
                    "$ref": "#/definitions/ValidTitleRuleConfig"
                },
                "ts/adjacent-overload-signatures": {
                    "$ref": "#/definitions/AdjacentOverloadSignaturesRuleConfig"
                },
                "ts/array-type": {
                    "$ref": "#/definitions/ArrayTypeRuleConfig"
                },
                "ts/await-thenable": {
                    "$ref": "#/definitions/AwaitThenableRuleConfig"
                },
                "ts/ban-ts-comment": {
                    "$ref": "#/definitions/BanTsCommentRuleConfig"
                },
                "ts/ban-tslint-comment": {
                    "$ref": "#/definitions/BanTslintCommentRuleConfig"
                },
                "ts/ban-types": {
                    "$ref": "#/definitions/BanTypesRuleConfig"
                },
                "ts/block-spacing": {
                    "$ref": "#/definitions/BlockSpacingRuleConfig$1"
                },
                "ts/brace-style": {
                    "$ref": "#/definitions/BraceStyleRuleConfig$1"
                },
                "ts/class-literal-property-style": {
                    "$ref": "#/definitions/ClassLiteralPropertyStyleRuleConfig"
                },
                "ts/class-methods-use-this": {
                    "$ref": "#/definitions/ClassMethodsUseThisRuleConfig"
                },
                "ts/comma-dangle": {
                    "$ref": "#/definitions/CommaDangleRuleConfig$1"
                },
                "ts/comma-spacing": {
                    "$ref": "#/definitions/CommaSpacingRuleConfig$1"
                },
                "ts/consistent-generic-constructors": {
                    "$ref": "#/definitions/ConsistentGenericConstructorsRuleConfig"
                },
                "ts/consistent-indexed-object-style": {
                    "$ref": "#/definitions/ConsistentIndexedObjectStyleRuleConfig"
                },
                "ts/consistent-type-assertions": {
                    "$ref": "#/definitions/ConsistentTypeAssertionsRuleConfig"
                },
                "ts/consistent-type-definitions": {
                    "$ref": "#/definitions/ConsistentTypeDefinitionsRuleConfig"
                },
                "ts/consistent-type-exports": {
                    "$ref": "#/definitions/ConsistentTypeExportsRuleConfig"
                },
                "ts/consistent-type-imports": {
                    "$ref": "#/definitions/ConsistentTypeImportsRuleConfig"
                },
                "ts/default-param-last": {
                    "$ref": "#/definitions/DefaultParamLastRuleConfig"
                },
                "ts/dot-notation": {
                    "$ref": "#/definitions/DotNotationRuleConfig$1"
                },
                "ts/explicit-function-return-type": {
                    "$ref": "#/definitions/ExplicitFunctionReturnTypeRuleConfig"
                },
                "ts/explicit-member-accessibility": {
                    "$ref": "#/definitions/ExplicitMemberAccessibilityRuleConfig"
                },
                "ts/explicit-module-boundary-types": {
                    "$ref": "#/definitions/ExplicitModuleBoundaryTypesRuleConfig"
                },
                "ts/func-call-spacing": {
                    "$ref": "#/definitions/FuncCallSpacingRuleConfig$1"
                },
                "ts/indent": {
                    "$ref": "#/definitions/IndentRuleConfig$1"
                },
                "ts/init-declarations": {
                    "$ref": "#/definitions/InitDeclarationsRuleConfig"
                },
                "ts/key-spacing": {
                    "$ref": "#/definitions/KeySpacingRuleConfig$2"
                },
                "ts/keyword-spacing": {
                    "$ref": "#/definitions/KeywordSpacingRuleConfig$1"
                },
                "ts/lines-around-comment": {
                    "$ref": "#/definitions/LinesAroundCommentRuleConfig"
                },
                "ts/lines-between-class-members": {
                    "$ref": "#/definitions/LinesBetweenClassMembersRuleConfig"
                },
                "ts/member-delimiter-style": {
                    "$ref": "#/definitions/MemberDelimiterStyleRuleConfig"
                },
                "ts/member-ordering": {
                    "$ref": "#/definitions/MemberOrderingRuleConfig"
                },
                "ts/method-signature-style": {
                    "$ref": "#/definitions/MethodSignatureStyleRuleConfig"
                },
                "ts/naming-convention": {
                    "$ref": "#/definitions/NamingConventionRuleConfig"
                },
                "ts/no-array-constructor": {
                    "$ref": "#/definitions/NoArrayConstructorRuleConfig"
                },
                "ts/no-base-to-string": {
                    "$ref": "#/definitions/NoBaseToStringRuleConfig"
                },
                "ts/no-confusing-non-null-assertion": {
                    "$ref": "#/definitions/NoConfusingNonNullAssertionRuleConfig"
                },
                "ts/no-confusing-void-expression": {
                    "$ref": "#/definitions/NoConfusingVoidExpressionRuleConfig"
                },
                "ts/no-dupe-class-members": {
                    "$ref": "#/definitions/NoDupeClassMembersRuleConfig"
                },
                "ts/no-duplicate-enum-values": {
                    "$ref": "#/definitions/NoDuplicateEnumValuesRuleConfig"
                },
                "ts/no-duplicate-type-constituents": {
                    "$ref": "#/definitions/NoDuplicateTypeConstituentsRuleConfig"
                },
                "ts/no-dynamic-delete": {
                    "$ref": "#/definitions/NoDynamicDeleteRuleConfig"
                },
                "ts/no-empty-function": {
                    "$ref": "#/definitions/NoEmptyFunctionRuleConfig"
                },
                "ts/no-empty-interface": {
                    "$ref": "#/definitions/NoEmptyInterfaceRuleConfig"
                },
                "ts/no-explicit-any": {
                    "$ref": "#/definitions/NoExplicitAnyRuleConfig"
                },
                "ts/no-extra-non-null-assertion": {
                    "$ref": "#/definitions/NoExtraNonNullAssertionRuleConfig"
                },
                "ts/no-extra-parens": {
                    "$ref": "#/definitions/NoExtraParensRuleConfig$1"
                },
                "ts/no-extra-semi": {
                    "$ref": "#/definitions/NoExtraSemiRuleConfig"
                },
                "ts/no-extraneous-class": {
                    "$ref": "#/definitions/NoExtraneousClassRuleConfig"
                },
                "ts/no-floating-promises": {
                    "$ref": "#/definitions/NoFloatingPromisesRuleConfig"
                },
                "ts/no-for-in-array": {
                    "$ref": "#/definitions/NoForInArrayRuleConfig"
                },
                "ts/no-implied-eval": {
                    "$ref": "#/definitions/NoImpliedEvalRuleConfig"
                },
                "ts/no-import-type-side-effects": {
                    "$ref": "#/definitions/NoImportTypeSideEffectsRuleConfig"
                },
                "ts/no-inferrable-types": {
                    "$ref": "#/definitions/NoInferrableTypesRuleConfig"
                },
                "ts/no-invalid-this": {
                    "$ref": "#/definitions/NoInvalidThisRuleConfig"
                },
                "ts/no-invalid-void-type": {
                    "$ref": "#/definitions/NoInvalidVoidTypeRuleConfig"
                },
                "ts/no-loop-func": {
                    "$ref": "#/definitions/NoLoopFuncRuleConfig"
                },
                "ts/no-loss-of-precision": {
                    "$ref": "#/definitions/NoLossOfPrecisionRuleConfig$1"
                },
                "ts/no-magic-numbers": {
                    "$ref": "#/definitions/NoMagicNumbersRuleConfig"
                },
                "ts/no-meaningless-void-operator": {
                    "$ref": "#/definitions/NoMeaninglessVoidOperatorRuleConfig"
                },
                "ts/no-misused-new": {
                    "$ref": "#/definitions/NoMisusedNewRuleConfig"
                },
                "ts/no-misused-promises": {
                    "$ref": "#/definitions/NoMisusedPromisesRuleConfig"
                },
                "ts/no-mixed-enums": {
                    "$ref": "#/definitions/NoMixedEnumsRuleConfig"
                },
                "ts/no-namespace": {
                    "$ref": "#/definitions/NoNamespaceRuleConfig"
                },
                "ts/no-non-null-asserted-nullish-coalescing": {
                    "$ref": "#/definitions/NoNonNullAssertedNullishCoalescingRuleConfig"
                },
                "ts/no-non-null-asserted-optional-chain": {
                    "$ref": "#/definitions/NoNonNullAssertedOptionalChainRuleConfig"
                },
                "ts/no-non-null-assertion": {
                    "$ref": "#/definitions/NoNonNullAssertionRuleConfig"
                },
                "ts/no-redeclare": {
                    "$ref": "#/definitions/NoRedeclareRuleConfig"
                },
                "ts/no-redundant-type-constituents": {
                    "$ref": "#/definitions/NoRedundantTypeConstituentsRuleConfig"
                },
                "ts/no-require-imports": {
                    "$ref": "#/definitions/NoRequireImportsRuleConfig"
                },
                "ts/no-restricted-imports": {
                    "$ref": "#/definitions/NoRestrictedImportsRuleConfig"
                },
                "ts/no-shadow": {
                    "$ref": "#/definitions/NoShadowRuleConfig"
                },
                "ts/no-this-alias": {
                    "$ref": "#/definitions/NoThisAliasRuleConfig"
                },
                "ts/no-throw-literal": {
                    "$ref": "#/definitions/NoThrowLiteralRuleConfig"
                },
                "ts/no-type-alias": {
                    "$ref": "#/definitions/NoTypeAliasRuleConfig"
                },
                "ts/no-unnecessary-boolean-literal-compare": {
                    "$ref": "#/definitions/NoUnnecessaryBooleanLiteralCompareRuleConfig"
                },
                "ts/no-unnecessary-condition": {
                    "$ref": "#/definitions/NoUnnecessaryConditionRuleConfig"
                },
                "ts/no-unnecessary-qualifier": {
                    "$ref": "#/definitions/NoUnnecessaryQualifierRuleConfig"
                },
                "ts/no-unnecessary-type-arguments": {
                    "$ref": "#/definitions/NoUnnecessaryTypeArgumentsRuleConfig"
                },
                "ts/no-unnecessary-type-assertion": {
                    "$ref": "#/definitions/NoUnnecessaryTypeAssertionRuleConfig"
                },
                "ts/no-unnecessary-type-constraint": {
                    "$ref": "#/definitions/NoUnnecessaryTypeConstraintRuleConfig"
                },
                "ts/no-unsafe-argument": {
                    "$ref": "#/definitions/NoUnsafeArgumentRuleConfig"
                },
                "ts/no-unsafe-assignment": {
                    "$ref": "#/definitions/NoUnsafeAssignmentRuleConfig"
                },
                "ts/no-unsafe-call": {
                    "$ref": "#/definitions/NoUnsafeCallRuleConfig"
                },
                "ts/no-unsafe-declaration-merging": {
                    "$ref": "#/definitions/NoUnsafeDeclarationMergingRuleConfig"
                },
                "ts/no-unsafe-enum-comparison": {
                    "$ref": "#/definitions/NoUnsafeEnumComparisonRuleConfig"
                },
                "ts/no-unsafe-member-access": {
                    "$ref": "#/definitions/NoUnsafeMemberAccessRuleConfig"
                },
                "ts/no-unsafe-return": {
                    "$ref": "#/definitions/NoUnsafeReturnRuleConfig"
                },
                "ts/no-unused-expressions": {
                    "$ref": "#/definitions/NoUnusedExpressionsRuleConfig"
                },
                "ts/no-unused-vars": {
                    "$ref": "#/definitions/NoUnusedVarsRuleConfig$1"
                },
                "ts/no-use-before-define": {
                    "$ref": "#/definitions/NoUseBeforeDefineRuleConfig"
                },
                "ts/no-useless-constructor": {
                    "$ref": "#/definitions/NoUselessConstructorRuleConfig"
                },
                "ts/no-useless-empty-export": {
                    "$ref": "#/definitions/NoUselessEmptyExportRuleConfig"
                },
                "ts/no-var-requires": {
                    "$ref": "#/definitions/NoVarRequiresRuleConfig"
                },
                "ts/non-nullable-type-assertion-style": {
                    "$ref": "#/definitions/NonNullableTypeAssertionStyleRuleConfig"
                },
                "ts/object-curly-spacing": {
                    "$ref": "#/definitions/ObjectCurlySpacingRuleConfig$1"
                },
                "ts/padding-line-between-statements": {
                    "$ref": "#/definitions/PaddingLineBetweenStatementsRuleConfig"
                },
                "ts/parameter-properties": {
                    "$ref": "#/definitions/ParameterPropertiesRuleConfig"
                },
                "ts/prefer-as-const": {
                    "$ref": "#/definitions/PreferAsConstRuleConfig"
                },
                "ts/prefer-enum-initializers": {
                    "$ref": "#/definitions/PreferEnumInitializersRuleConfig"
                },
                "ts/prefer-for-of": {
                    "$ref": "#/definitions/PreferForOfRuleConfig"
                },
                "ts/prefer-function-type": {
                    "$ref": "#/definitions/PreferFunctionTypeRuleConfig"
                },
                "ts/prefer-includes": {
                    "$ref": "#/definitions/PreferIncludesRuleConfig$1"
                },
                "ts/prefer-literal-enum-member": {
                    "$ref": "#/definitions/PreferLiteralEnumMemberRuleConfig"
                },
                "ts/prefer-namespace-keyword": {
                    "$ref": "#/definitions/PreferNamespaceKeywordRuleConfig"
                },
                "ts/prefer-nullish-coalescing": {
                    "$ref": "#/definitions/PreferNullishCoalescingRuleConfig"
                },
                "ts/prefer-optional-chain": {
                    "$ref": "#/definitions/PreferOptionalChainRuleConfig"
                },
                "ts/prefer-readonly": {
                    "$ref": "#/definitions/PreferReadonlyRuleConfig"
                },
                "ts/prefer-readonly-parameter-types": {
                    "$ref": "#/definitions/PreferReadonlyParameterTypesRuleConfig"
                },
                "ts/prefer-reduce-type-parameter": {
                    "$ref": "#/definitions/PreferReduceTypeParameterRuleConfig"
                },
                "ts/prefer-regexp-exec": {
                    "$ref": "#/definitions/PreferRegexpExecRuleConfig"
                },
                "ts/prefer-return-this-type": {
                    "$ref": "#/definitions/PreferReturnThisTypeRuleConfig"
                },
                "ts/prefer-string-starts-ends-with": {
                    "$ref": "#/definitions/PreferStringStartsEndsWithRuleConfig$1"
                },
                "ts/prefer-ts-expect-error": {
                    "$ref": "#/definitions/PreferTsExpectErrorRuleConfig"
                },
                "ts/promise-function-async": {
                    "$ref": "#/definitions/PromiseFunctionAsyncRuleConfig"
                },
                "ts/quotes": {
                    "$ref": "#/definitions/QuotesRuleConfig$1"
                },
                "ts/require-array-sort-compare": {
                    "$ref": "#/definitions/RequireArraySortCompareRuleConfig"
                },
                "ts/require-await": {
                    "$ref": "#/definitions/RequireAwaitRuleConfig"
                },
                "ts/restrict-plus-operands": {
                    "$ref": "#/definitions/RestrictPlusOperandsRuleConfig"
                },
                "ts/restrict-template-expressions": {
                    "$ref": "#/definitions/RestrictTemplateExpressionsRuleConfig"
                },
                "ts/return-await": {
                    "$ref": "#/definitions/ReturnAwaitRuleConfig"
                },
                "ts/semi": {
                    "$ref": "#/definitions/SemiRuleConfig"
                },
                "ts/sort-type-constituents": {
                    "$ref": "#/definitions/SortTypeConstituentsRuleConfig"
                },
                "ts/space-before-blocks": {
                    "$ref": "#/definitions/SpaceBeforeBlocksRuleConfig"
                },
                "ts/space-before-function-paren": {
                    "$ref": "#/definitions/SpaceBeforeFunctionParenRuleConfig"
                },
                "ts/space-infix-ops": {
                    "$ref": "#/definitions/SpaceInfixOpsRuleConfig$1"
                },
                "ts/strict-boolean-expressions": {
                    "$ref": "#/definitions/StrictBooleanExpressionsRuleConfig"
                },
                "ts/switch-exhaustiveness-check": {
                    "$ref": "#/definitions/SwitchExhaustivenessCheckRuleConfig"
                },
                "ts/triple-slash-reference": {
                    "$ref": "#/definitions/TripleSlashReferenceRuleConfig"
                },
                "ts/type-annotation-spacing": {
                    "$ref": "#/definitions/TypeAnnotationSpacingRuleConfig"
                },
                "ts/typedef": {
                    "$ref": "#/definitions/TypedefRuleConfig"
                },
                "ts/unbound-method": {
                    "$ref": "#/definitions/UnboundMethodRuleConfig"
                },
                "ts/unified-signatures": {
                    "$ref": "#/definitions/UnifiedSignaturesRuleConfig"
                },
                "unicode-bom": {
                    "$ref": "#/definitions/UnicodeBomRuleConfig",
                    "description": "Require or disallow Unicode byte order mark (BOM)."
                },
                "unicorn/better-regex": {
                    "$ref": "#/definitions/BetterRegexRuleConfig",
                    "description": "Improve regexes by making them shorter, consistent, and safer."
                },
                "unicorn/catch-error-name": {
                    "$ref": "#/definitions/CatchErrorNameRuleConfig",
                    "description": "Enforce a specific parameter name in catch clauses."
                },
                "unicorn/consistent-destructuring": {
                    "$ref": "#/definitions/ConsistentDestructuringRuleConfig",
                    "description": "Use destructured variables over properties."
                },
                "unicorn/consistent-function-scoping": {
                    "$ref": "#/definitions/ConsistentFunctionScopingRuleConfig",
                    "description": "Move function definitions to the highest possible scope."
                },
                "unicorn/custom-error-definition": {
                    "$ref": "#/definitions/CustomErrorDefinitionRuleConfig",
                    "description": "Enforce correct `Error` subclassing."
                },
                "unicorn/empty-brace-spaces": {
                    "$ref": "#/definitions/EmptyBraceSpacesRuleConfig",
                    "description": "Enforce no spaces between braces."
                },
                "unicorn/error-message": {
                    "$ref": "#/definitions/ErrorMessageRuleConfig",
                    "description": "Enforce passing a `message` value when creating a built-in error."
                },
                "unicorn/escape-case": {
                    "$ref": "#/definitions/EscapeCaseRuleConfig",
                    "description": "Require escape sequences to use uppercase values."
                },
                "unicorn/expiring-todo-comments": {
                    "$ref": "#/definitions/ExpiringTodoCommentsRuleConfig",
                    "description": "Add expiration conditions to TODO comments."
                },
                "unicorn/explicit-length-check": {
                    "$ref": "#/definitions/ExplicitLengthCheckRuleConfig",
                    "description": "Enforce explicitly comparing the `length` or `size` property of a value."
                },
                "unicorn/filename-case": {
                    "$ref": "#/definitions/FilenameCaseRuleConfig",
                    "description": "Enforce a case style for filenames."
                },
                "unicorn/import-index": {
                    "$ref": "#/definitions/ImportIndexRuleConfig"
                },
                "unicorn/import-style": {
                    "$ref": "#/definitions/ImportStyleRuleConfig",
                    "description": "Enforce specific import styles per module."
                },
                "unicorn/new-for-builtins": {
                    "$ref": "#/definitions/NewForBuiltinsRuleConfig",
                    "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`."
                },
                "unicorn/no-abusive-eslint-disable": {
                    "$ref": "#/definitions/NoAbusiveEslintDisableRuleConfig",
                    "description": "Enforce specifying rules to disable in `eslint-disable` comments."
                },
                "unicorn/no-array-callback-reference": {
                    "$ref": "#/definitions/NoArrayCallbackReferenceRuleConfig",
                    "description": "Prevent passing a function reference directly to iterator methods."
                },
                "unicorn/no-array-for-each": {
                    "$ref": "#/definitions/NoArrayForEachRuleConfig",
                    "description": "Prefer `for…of` over the `forEach` method."
                },
                "unicorn/no-array-instanceof": {
                    "$ref": "#/definitions/NoArrayInstanceofRuleConfig"
                },
                "unicorn/no-array-method-this-argument": {
                    "$ref": "#/definitions/NoArrayMethodThisArgumentRuleConfig",
                    "description": "Disallow using the `this` argument in array methods."
                },
                "unicorn/no-array-push-push": {
                    "$ref": "#/definitions/NoArrayPushPushRuleConfig",
                    "description": "Enforce combining multiple `Array#push()` into one call."
                },
                "unicorn/no-array-reduce": {
                    "$ref": "#/definitions/NoArrayReduceRuleConfig",
                    "description": "Disallow `Array#reduce()` and `Array#reduceRight()`."
                },
                "unicorn/no-await-expression-member": {
                    "$ref": "#/definitions/NoAwaitExpressionMemberRuleConfig",
                    "description": "Disallow member access from await expression."
                },
                "unicorn/no-console-spaces": {
                    "$ref": "#/definitions/NoConsoleSpacesRuleConfig",
                    "description": "Do not use leading/trailing space between `console.log` parameters."
                },
                "unicorn/no-document-cookie": {
                    "$ref": "#/definitions/NoDocumentCookieRuleConfig",
                    "description": "Do not use `document.cookie` directly."
                },
                "unicorn/no-empty-file": {
                    "$ref": "#/definitions/NoEmptyFileRuleConfig",
                    "description": "Disallow empty files."
                },
                "unicorn/no-fn-reference-in-iterator": {
                    "$ref": "#/definitions/NoFnReferenceInIteratorRuleConfig"
                },
                "unicorn/no-for-loop": {
                    "$ref": "#/definitions/NoForLoopRuleConfig",
                    "description": "Do not use a `for` loop that can be replaced with a `for-of` loop."
                },
                "unicorn/no-hex-escape": {
                    "$ref": "#/definitions/NoHexEscapeRuleConfig",
                    "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes."
                },
                "unicorn/no-instanceof-array": {
                    "$ref": "#/definitions/NoInstanceofArrayRuleConfig",
                    "description": "Require `Array.isArray()` instead of `instanceof Array`."
                },
                "unicorn/no-invalid-remove-event-listener": {
                    "$ref": "#/definitions/NoInvalidRemoveEventListenerRuleConfig",
                    "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression."
                },
                "unicorn/no-keyword-prefix": {
                    "$ref": "#/definitions/NoKeywordPrefixRuleConfig",
                    "description": "Disallow identifiers starting with `new` or `class`."
                },
                "unicorn/no-lonely-if": {
                    "$ref": "#/definitions/NoLonelyIfRuleConfig",
                    "description": "Disallow `if` statements as the only statement in `if` blocks without `else`."
                },
                "unicorn/no-negated-condition": {
                    "$ref": "#/definitions/NoNegatedConditionRuleConfig",
                    "description": "Disallow negated conditions."
                },
                "unicorn/no-nested-ternary": {
                    "$ref": "#/definitions/NoNestedTernaryRuleConfig",
                    "description": "Disallow nested ternary expressions."
                },
                "unicorn/no-new-array": {
                    "$ref": "#/definitions/NoNewArrayRuleConfig",
                    "description": "Disallow `new Array()`."
                },
                "unicorn/no-new-buffer": {
                    "$ref": "#/definitions/NoNewBufferRuleConfig",
                    "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`."
                },
                "unicorn/no-null": {
                    "$ref": "#/definitions/NoNullRuleConfig",
                    "description": "Disallow the use of the `null` literal."
                },
                "unicorn/no-object-as-default-parameter": {
                    "$ref": "#/definitions/NoObjectAsDefaultParameterRuleConfig",
                    "description": "Disallow the use of objects as default parameters."
                },
                "unicorn/no-process-exit": {
                    "$ref": "#/definitions/NoProcessExitRuleConfig",
                    "description": "Disallow `process.exit()`."
                },
                "unicorn/no-reduce": {
                    "$ref": "#/definitions/NoReduceRuleConfig"
                },
                "unicorn/no-static-only-class": {
                    "$ref": "#/definitions/NoStaticOnlyClassRuleConfig",
                    "description": "Disallow classes that only have static members."
                },
                "unicorn/no-thenable": {
                    "$ref": "#/definitions/NoThenableRuleConfig",
                    "description": "Disallow `then` property."
                },
                "unicorn/no-this-assignment": {
                    "$ref": "#/definitions/NoThisAssignmentRuleConfig",
                    "description": "Disallow assigning `this` to a variable."
                },
                "unicorn/no-typeof-undefined": {
                    "$ref": "#/definitions/NoTypeofUndefinedRuleConfig",
                    "description": "Disallow comparing `undefined` using `typeof`."
                },
                "unicorn/no-unnecessary-await": {
                    "$ref": "#/definitions/NoUnnecessaryAwaitRuleConfig",
                    "description": "Disallow awaiting non-promise values."
                },
                "unicorn/no-unreadable-array-destructuring": {
                    "$ref": "#/definitions/NoUnreadableArrayDestructuringRuleConfig",
                    "description": "Disallow unreadable array destructuring."
                },
                "unicorn/no-unreadable-iife": {
                    "$ref": "#/definitions/NoUnreadableIifeRuleConfig",
                    "description": "Disallow unreadable IIFEs."
                },
                "unicorn/no-unsafe-regex": {
                    "$ref": "#/definitions/NoUnsafeRegexRuleConfig"
                },
                "unicorn/no-unused-properties": {
                    "$ref": "#/definitions/NoUnusedPropertiesRuleConfig$1",
                    "description": "Disallow unused object properties."
                },
                "unicorn/no-useless-fallback-in-spread": {
                    "$ref": "#/definitions/NoUselessFallbackInSpreadRuleConfig",
                    "description": "Disallow useless fallback when spreading in object literals."
                },
                "unicorn/no-useless-length-check": {
                    "$ref": "#/definitions/NoUselessLengthCheckRuleConfig",
                    "description": "Disallow useless array length check."
                },
                "unicorn/no-useless-promise-resolve-reject": {
                    "$ref": "#/definitions/NoUselessPromiseResolveRejectRuleConfig",
                    "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks."
                },
                "unicorn/no-useless-spread": {
                    "$ref": "#/definitions/NoUselessSpreadRuleConfig",
                    "description": "Disallow unnecessary spread."
                },
                "unicorn/no-useless-switch-case": {
                    "$ref": "#/definitions/NoUselessSwitchCaseRuleConfig",
                    "description": "Disallow useless case in switch statements."
                },
                "unicorn/no-useless-undefined": {
                    "$ref": "#/definitions/NoUselessUndefinedRuleConfig",
                    "description": "Disallow useless `undefined`."
                },
                "unicorn/no-zero-fractions": {
                    "$ref": "#/definitions/NoZeroFractionsRuleConfig",
                    "description": "Disallow number literals with zero fractions or dangling dots."
                },
                "unicorn/number-literal-case": {
                    "$ref": "#/definitions/NumberLiteralCaseRuleConfig",
                    "description": "Enforce proper case for numeric literals."
                },
                "unicorn/numeric-separators-style": {
                    "$ref": "#/definitions/NumericSeparatorsStyleRuleConfig",
                    "description": "Enforce the style of numeric separators by correctly grouping digits."
                },
                "unicorn/prefer-add-event-listener": {
                    "$ref": "#/definitions/PreferAddEventListenerRuleConfig",
                    "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions."
                },
                "unicorn/prefer-array-find": {
                    "$ref": "#/definitions/PreferArrayFindRuleConfig",
                    "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`."
                },
                "unicorn/prefer-array-flat": {
                    "$ref": "#/definitions/PreferArrayFlatRuleConfig",
                    "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays."
                },
                "unicorn/prefer-array-flat-map": {
                    "$ref": "#/definitions/PreferArrayFlatMapRuleConfig",
                    "description": "Prefer `.flatMap(…)` over `.map(…).flat()`."
                },
                "unicorn/prefer-array-index-of": {
                    "$ref": "#/definitions/PreferArrayIndexOfRuleConfig",
                    "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item."
                },
                "unicorn/prefer-array-some": {
                    "$ref": "#/definitions/PreferArraySomeRuleConfig",
                    "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast}(…)`."
                },
                "unicorn/prefer-at": {
                    "$ref": "#/definitions/PreferAtRuleConfig",
                    "description": "Prefer `.at()` method for index access and `String#charAt()`."
                },
                "unicorn/prefer-blob-reading-methods": {
                    "$ref": "#/definitions/PreferBlobReadingMethodsRuleConfig",
                    "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`."
                },
                "unicorn/prefer-code-point": {
                    "$ref": "#/definitions/PreferCodePointRuleConfig",
                    "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`."
                },
                "unicorn/prefer-dataset": {
                    "$ref": "#/definitions/PreferDatasetRuleConfig"
                },
                "unicorn/prefer-date-now": {
                    "$ref": "#/definitions/PreferDateNowRuleConfig",
                    "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch."
                },
                "unicorn/prefer-default-parameters": {
                    "$ref": "#/definitions/PreferDefaultParametersRuleConfig",
                    "description": "Prefer default parameters over reassignment."
                },
                "unicorn/prefer-dom-node-append": {
                    "$ref": "#/definitions/PreferDomNodeAppendRuleConfig",
                    "description": "Prefer `Node#append()` over `Node#appendChild()`."
                },
                "unicorn/prefer-dom-node-dataset": {
                    "$ref": "#/definitions/PreferDomNodeDatasetRuleConfig",
                    "description": "Prefer using `.dataset` on DOM elements over calling attribute methods."
                },
                "unicorn/prefer-dom-node-remove": {
                    "$ref": "#/definitions/PreferDomNodeRemoveRuleConfig",
                    "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`."
                },
                "unicorn/prefer-dom-node-text-content": {
                    "$ref": "#/definitions/PreferDomNodeTextContentRuleConfig",
                    "description": "Prefer `.textContent` over `.innerText`."
                },
                "unicorn/prefer-event-key": {
                    "$ref": "#/definitions/PreferEventKeyRuleConfig"
                },
                "unicorn/prefer-event-target": {
                    "$ref": "#/definitions/PreferEventTargetRuleConfig",
                    "description": "Prefer `EventTarget` over `EventEmitter`."
                },
                "unicorn/prefer-exponentiation-operator": {
                    "$ref": "#/definitions/PreferExponentiationOperatorRuleConfig"
                },
                "unicorn/prefer-export-from": {
                    "$ref": "#/definitions/PreferExportFromRuleConfig",
                    "description": "Prefer `export…from` when re-exporting."
                },
                "unicorn/prefer-flat-map": {
                    "$ref": "#/definitions/PreferFlatMapRuleConfig"
                },
                "unicorn/prefer-includes": {
                    "$ref": "#/definitions/PreferIncludesRuleConfig",
                    "description": "Prefer `.includes()` over `.indexOf()` and `Array#some()` when checking for existence or non-existence."
                },
                "unicorn/prefer-json-parse-buffer": {
                    "$ref": "#/definitions/PreferJsonParseBufferRuleConfig",
                    "description": "Prefer reading a JSON file as a buffer."
                },
                "unicorn/prefer-keyboard-event-key": {
                    "$ref": "#/definitions/PreferKeyboardEventKeyRuleConfig",
                    "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`."
                },
                "unicorn/prefer-logical-operator-over-ternary": {
                    "$ref": "#/definitions/PreferLogicalOperatorOverTernaryRuleConfig",
                    "description": "Prefer using a logical operator over a ternary."
                },
                "unicorn/prefer-math-trunc": {
                    "$ref": "#/definitions/PreferMathTruncRuleConfig",
                    "description": "Enforce the use of `Math.trunc` instead of bitwise operators."
                },
                "unicorn/prefer-modern-dom-apis": {
                    "$ref": "#/definitions/PreferModernDomApisRuleConfig",
                    "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`."
                },
                "unicorn/prefer-modern-math-apis": {
                    "$ref": "#/definitions/PreferModernMathApisRuleConfig",
                    "description": "Prefer modern `Math` APIs over legacy patterns."
                },
                "unicorn/prefer-module": {
                    "$ref": "#/definitions/PreferModuleRuleConfig",
                    "description": "Prefer JavaScript modules (ESM) over CommonJS."
                },
                "unicorn/prefer-native-coercion-functions": {
                    "$ref": "#/definitions/PreferNativeCoercionFunctionsRuleConfig",
                    "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly."
                },
                "unicorn/prefer-negative-index": {
                    "$ref": "#/definitions/PreferNegativeIndexRuleConfig",
                    "description": "Prefer negative index over `.length - index` when possible."
                },
                "unicorn/prefer-node-append": {
                    "$ref": "#/definitions/PreferNodeAppendRuleConfig"
                },
                "unicorn/prefer-node-protocol": {
                    "$ref": "#/definitions/PreferNodeProtocolRuleConfig",
                    "description": "Prefer using the `node:` protocol when importing Node.js builtin modules."
                },
                "unicorn/prefer-node-remove": {
                    "$ref": "#/definitions/PreferNodeRemoveRuleConfig"
                },
                "unicorn/prefer-number-properties": {
                    "$ref": "#/definitions/PreferNumberPropertiesRuleConfig",
                    "description": "Prefer `Number` static properties over global ones."
                },
                "unicorn/prefer-object-from-entries": {
                    "$ref": "#/definitions/PreferObjectFromEntriesRuleConfig",
                    "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object."
                },
                "unicorn/prefer-object-has-own": {
                    "$ref": "#/definitions/PreferObjectHasOwnRuleConfig"
                },
                "unicorn/prefer-optional-catch-binding": {
                    "$ref": "#/definitions/PreferOptionalCatchBindingRuleConfig",
                    "description": "Prefer omitting the `catch` binding parameter."
                },
                "unicorn/prefer-prototype-methods": {
                    "$ref": "#/definitions/PreferPrototypeMethodsRuleConfig",
                    "description": "Prefer borrowing methods from the prototype instead of the instance."
                },
                "unicorn/prefer-query-selector": {
                    "$ref": "#/definitions/PreferQuerySelectorRuleConfig",
                    "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`."
                },
                "unicorn/prefer-reflect-apply": {
                    "$ref": "#/definitions/PreferReflectApplyRuleConfig",
                    "description": "Prefer `Reflect.apply()` over `Function#apply()`."
                },
                "unicorn/prefer-regexp-test": {
                    "$ref": "#/definitions/PreferRegexpTestRuleConfig",
                    "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`."
                },
                "unicorn/prefer-replace-all": {
                    "$ref": "#/definitions/PreferReplaceAllRuleConfig"
                },
                "unicorn/prefer-set-has": {
                    "$ref": "#/definitions/PreferSetHasRuleConfig",
                    "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence."
                },
                "unicorn/prefer-set-size": {
                    "$ref": "#/definitions/PreferSetSizeRuleConfig",
                    "description": "Prefer using `Set#size` instead of `Array#length`."
                },
                "unicorn/prefer-spread": {
                    "$ref": "#/definitions/PreferSpreadRuleConfig",
                    "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`."
                },
                "unicorn/prefer-starts-ends-with": {
                    "$ref": "#/definitions/PreferStartsEndsWithRuleConfig"
                },
                "unicorn/prefer-string-replace-all": {
                    "$ref": "#/definitions/PreferStringReplaceAllRuleConfig",
                    "description": "Prefer `String#replaceAll()` over regex searches with the global flag."
                },
                "unicorn/prefer-string-slice": {
                    "$ref": "#/definitions/PreferStringSliceRuleConfig",
                    "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`."
                },
                "unicorn/prefer-string-starts-ends-with": {
                    "$ref": "#/definitions/PreferStringStartsEndsWithRuleConfig",
                    "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`."
                },
                "unicorn/prefer-string-trim-start-end": {
                    "$ref": "#/definitions/PreferStringTrimStartEndRuleConfig",
                    "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`."
                },
                "unicorn/prefer-switch": {
                    "$ref": "#/definitions/PreferSwitchRuleConfig",
                    "description": "Prefer `switch` over multiple `else-if`."
                },
                "unicorn/prefer-ternary": {
                    "$ref": "#/definitions/PreferTernaryRuleConfig",
                    "description": "Prefer ternary expressions over simple `if-else` statements."
                },
                "unicorn/prefer-text-content": {
                    "$ref": "#/definitions/PreferTextContentRuleConfig"
                },
                "unicorn/prefer-top-level-await": {
                    "$ref": "#/definitions/PreferTopLevelAwaitRuleConfig",
                    "description": "Prefer top-level await over top-level promises and async function calls."
                },
                "unicorn/prefer-trim-start-end": {
                    "$ref": "#/definitions/PreferTrimStartEndRuleConfig"
                },
                "unicorn/prefer-type-error": {
                    "$ref": "#/definitions/PreferTypeErrorRuleConfig",
                    "description": "Enforce throwing `TypeError` in type checking conditions."
                },
                "unicorn/prevent-abbreviations": {
                    "$ref": "#/definitions/PreventAbbreviationsRuleConfig",
                    "description": "Prevent abbreviations."
                },
                "unicorn/regex-shorthand": {
                    "$ref": "#/definitions/RegexShorthandRuleConfig"
                },
                "unicorn/relative-url-style": {
                    "$ref": "#/definitions/RelativeUrlStyleRuleConfig",
                    "description": "Enforce consistent relative URL style."
                },
                "unicorn/require-array-join-separator": {
                    "$ref": "#/definitions/RequireArrayJoinSeparatorRuleConfig",
                    "description": "Enforce using the separator argument with `Array#join()`."
                },
                "unicorn/require-number-to-fixed-digits-argument": {
                    "$ref": "#/definitions/RequireNumberToFixedDigitsArgumentRuleConfig",
                    "description": "Enforce using the digits argument with `Number#toFixed()`."
                },
                "unicorn/require-post-message-target-origin": {
                    "$ref": "#/definitions/RequirePostMessageTargetOriginRuleConfig",
                    "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`."
                },
                "unicorn/string-content": {
                    "$ref": "#/definitions/StringContentRuleConfig",
                    "description": "Enforce better string content."
                },
                "unicorn/switch-case-braces": {
                    "$ref": "#/definitions/SwitchCaseBracesRuleConfig",
                    "description": "Enforce consistent brace style for `case` clauses."
                },
                "unicorn/template-indent": {
                    "$ref": "#/definitions/TemplateIndentRuleConfig",
                    "description": "Fix whitespace-insensitive template indentation."
                },
                "unicorn/text-encoding-identifier-case": {
                    "$ref": "#/definitions/TextEncodingIdentifierCaseRuleConfig",
                    "description": "Enforce consistent case for text encoding identifiers."
                },
                "unicorn/throw-new-error": {
                    "$ref": "#/definitions/ThrowNewErrorRuleConfig",
                    "description": "Require `new` when throwing an error."
                },
                "use-isnan": {
                    "$ref": "#/definitions/UseIsnanRuleConfig",
                    "description": "Require calls to `isNaN()` when checking for `NaN`."
                },
                "valid-jsdoc": {
                    "$ref": "#/definitions/ValidJsdocRuleConfig",
                    "description": "Enforce valid JSDoc comments."
                },
                "valid-typeof": {
                    "$ref": "#/definitions/ValidTypeofRuleConfig",
                    "description": "Enforce comparing `typeof` expressions against valid strings."
                },
                "vars-on-top": {
                    "$ref": "#/definitions/VarsOnTopRuleConfig",
                    "description": "Require `var` declarations be placed at the top of their containing scope."
                },
                "vue/array-bracket-newline": {
                    "$ref": "#/definitions/ArrayBracketNewlineRuleConfig",
                    "description": "Enforce linebreaks after opening and before closing array brackets in `<template>`."
                },
                "vue/array-bracket-spacing": {
                    "$ref": "#/definitions/ArrayBracketSpacingRuleConfig",
                    "description": "Enforce consistent spacing inside array brackets in `<template>`."
                },
                "vue/array-element-newline": {
                    "$ref": "#/definitions/ArrayElementNewlineRuleConfig",
                    "description": "Enforce line breaks after each array element in `<template>`."
                },
                "vue/arrow-spacing": {
                    "$ref": "#/definitions/ArrowSpacingRuleConfig",
                    "description": "Enforce consistent spacing before and after the arrow in arrow functions in `<template>`."
                },
                "vue/attribute-hyphenation": {
                    "$ref": "#/definitions/AttributeHyphenationRuleConfig",
                    "description": "Enforce attribute naming style on custom components in template."
                },
                "vue/attributes-order": {
                    "$ref": "#/definitions/AttributesOrderRuleConfig",
                    "description": "Enforce order of attributes."
                },
                "vue/block-lang": {
                    "$ref": "#/definitions/BlockLangRuleConfig",
                    "description": "Disallow use other than available `lang`."
                },
                "vue/block-order": {
                    "$ref": "#/definitions/BlockOrderRuleConfig",
                    "description": "Enforce order of component top-level elements."
                },
                "vue/block-spacing": {
                    "$ref": "#/definitions/BlockSpacingRuleConfig",
                    "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block in `<template>`."
                },
                "vue/block-tag-newline": {
                    "$ref": "#/definitions/BlockTagNewlineRuleConfig",
                    "description": "Enforce line breaks after opening and before closing block-level tags."
                },
                "vue/brace-style": {
                    "$ref": "#/definitions/BraceStyleRuleConfig",
                    "description": "Enforce consistent brace style for blocks in `<template>`."
                },
                "vue/camelcase": {
                    "$ref": "#/definitions/CamelcaseRuleConfig",
                    "description": "Enforce camelcase naming convention in `<template>`."
                },
                "vue/comma-dangle": {
                    "$ref": "#/definitions/CommaDangleRuleConfig",
                    "description": "Require or disallow trailing commas in `<template>`."
                },
                "vue/comma-spacing": {
                    "$ref": "#/definitions/CommaSpacingRuleConfig",
                    "description": "Enforce consistent spacing before and after commas in `<template>`."
                },
                "vue/comma-style": {
                    "$ref": "#/definitions/CommaStyleRuleConfig",
                    "description": "Enforce consistent comma style in `<template>`."
                },
                "vue/comment-directive": {
                    "$ref": "#/definitions/CommentDirectiveRuleConfig",
                    "description": "Support comment-directives in `<template>`."
                },
                "vue/component-api-style": {
                    "$ref": "#/definitions/ComponentApiStyleRuleConfig",
                    "description": "Enforce component API style."
                },
                "vue/component-definition-name-casing": {
                    "$ref": "#/definitions/ComponentDefinitionNameCasingRuleConfig",
                    "description": "Enforce specific casing for component definition name."
                },
                "vue/component-name-in-template-casing": {
                    "$ref": "#/definitions/ComponentNameInTemplateCasingRuleConfig$1",
                    "description": "Enforce specific casing for the component naming style in template."
                },
                "vue/component-options-name-casing": {
                    "$ref": "#/definitions/ComponentOptionsNameCasingRuleConfig",
                    "description": "Enforce the casing of component name in `components` options."
                },
                "vue/component-tags-order": {
                    "$ref": "#/definitions/ComponentTagsOrderRuleConfig",
                    "description": "Enforce order of component top-level elements."
                },
                "vue/custom-event-name-casing": {
                    "$ref": "#/definitions/CustomEventNameCasingRuleConfig",
                    "description": "Enforce specific casing for custom event name."
                },
                "vue/define-emits-declaration": {
                    "$ref": "#/definitions/DefineEmitsDeclarationRuleConfig",
                    "description": "Enforce declaration style of `defineEmits`."
                },
                "vue/define-macros-order": {
                    "$ref": "#/definitions/DefineMacrosOrderRuleConfig",
                    "description": "Enforce order of `defineEmits` and `defineProps` compiler macros."
                },
                "vue/define-props-declaration": {
                    "$ref": "#/definitions/DefinePropsDeclarationRuleConfig",
                    "description": "Enforce declaration style of `defineProps`."
                },
                "vue/dot-location": {
                    "$ref": "#/definitions/DotLocationRuleConfig",
                    "description": "Enforce consistent newlines before and after dots in `<template>`."
                },
                "vue/dot-notation": {
                    "$ref": "#/definitions/DotNotationRuleConfig",
                    "description": "Enforce dot notation whenever possible in `<template>`."
                },
                "vue/eqeqeq": {
                    "$ref": "#/definitions/EqeqeqRuleConfig",
                    "description": "Require the use of `===` and `!==` in `<template>`."
                },
                "vue/first-attribute-linebreak": {
                    "$ref": "#/definitions/FirstAttributeLinebreakRuleConfig",
                    "description": "Enforce the location of first attribute."
                },
                "vue/func-call-spacing": {
                    "$ref": "#/definitions/FuncCallSpacingRuleConfig",
                    "description": "Require or disallow spacing between function identifiers and their invocations in `<template>`."
                },
                "vue/html-button-has-type": {
                    "$ref": "#/definitions/HtmlButtonHasTypeRuleConfig",
                    "description": "Disallow usage of button without an explicit type attribute."
                },
                "vue/html-closing-bracket-newline": {
                    "$ref": "#/definitions/HtmlClosingBracketNewlineRuleConfig",
                    "description": "Require or disallow a line break before tag's closing brackets."
                },
                "vue/html-closing-bracket-spacing": {
                    "$ref": "#/definitions/HtmlClosingBracketSpacingRuleConfig",
                    "description": "Require or disallow a space before tag's closing brackets."
                },
                "vue/html-comment-content-newline": {
                    "$ref": "#/definitions/HtmlCommentContentNewlineRuleConfig",
                    "description": "Enforce unified line brake in HTML comments."
                },
                "vue/html-comment-content-spacing": {
                    "$ref": "#/definitions/HtmlCommentContentSpacingRuleConfig",
                    "description": "Enforce unified spacing in HTML comments."
                },
                "vue/html-comment-indent": {
                    "$ref": "#/definitions/HtmlCommentIndentRuleConfig",
                    "description": "Enforce consistent indentation in HTML comments."
                },
                "vue/html-end-tags": {
                    "$ref": "#/definitions/HtmlEndTagsRuleConfig",
                    "description": "Enforce end tag style."
                },
                "vue/html-indent": {
                    "$ref": "#/definitions/HtmlIndentRuleConfig",
                    "description": "Enforce consistent indentation in `<template>`."
                },
                "vue/html-quotes": {
                    "$ref": "#/definitions/HtmlQuotesRuleConfig",
                    "description": "Enforce quotes style of HTML attributes."
                },
                "vue/html-self-closing": {
                    "$ref": "#/definitions/HtmlSelfClosingRuleConfig",
                    "description": "Enforce self-closing style."
                },
                "vue/jsx-uses-vars": {
                    "$ref": "#/definitions/JsxUsesVarsRuleConfig",
                    "description": "Prevent variables used in JSX to be marked as unused."
                },
                "vue/key-spacing": {
                    "$ref": "#/definitions/KeySpacingRuleConfig$1",
                    "description": "Enforce consistent spacing between keys and values in object literal properties in `<template>`."
                },
                "vue/keyword-spacing": {
                    "$ref": "#/definitions/KeywordSpacingRuleConfig",
                    "description": "Enforce consistent spacing before and after keywords in `<template>`."
                },
                "vue/match-component-file-name": {
                    "$ref": "#/definitions/MatchComponentFileNameRuleConfig",
                    "description": "Require component name property to match its file name."
                },
                "vue/match-component-import-name": {
                    "$ref": "#/definitions/MatchComponentImportNameRuleConfig",
                    "description": "Require the registered component name to match the imported component name."
                },
                "vue/max-attributes-per-line": {
                    "$ref": "#/definitions/MaxAttributesPerLineRuleConfig",
                    "description": "Enforce the maximum number of attributes per line."
                },
                "vue/max-len": {
                    "$ref": "#/definitions/MaxLenRuleConfig",
                    "description": "Enforce a maximum line length in `.vue` files."
                },
                "vue/max-lines-per-block": {
                    "$ref": "#/definitions/MaxLinesPerBlockRuleConfig",
                    "description": "Enforce maximum number of lines in Vue SFC blocks."
                },
                "vue/multi-word-component-names": {
                    "$ref": "#/definitions/MultiWordComponentNamesRuleConfig",
                    "description": "Require component names to be always multi-word."
                },
                "vue/multiline-html-element-content-newline": {
                    "$ref": "#/definitions/MultilineHtmlElementContentNewlineRuleConfig",
                    "description": "Require a line break before and after the contents of a multiline element."
                },
                "vue/multiline-ternary": {
                    "$ref": "#/definitions/MultilineTernaryRuleConfig",
                    "description": "Enforce newlines between operands of ternary expressions in `<template>`."
                },
                "vue/mustache-interpolation-spacing": {
                    "$ref": "#/definitions/MustacheInterpolationSpacingRuleConfig",
                    "description": "Enforce unified spacing in mustache interpolations."
                },
                "vue/new-line-between-multi-line-property": {
                    "$ref": "#/definitions/NewLineBetweenMultiLinePropertyRuleConfig",
                    "description": "Enforce new lines between multi-line properties in Vue components."
                },
                "vue/next-tick-style": {
                    "$ref": "#/definitions/NextTickStyleRuleConfig",
                    "description": "Enforce Promise or callback style in `nextTick`."
                },
                "vue/no-arrow-functions-in-watch": {
                    "$ref": "#/definitions/NoArrowFunctionsInWatchRuleConfig",
                    "description": "Disallow using arrow functions to define watcher."
                },
                "vue/no-async-in-computed-properties": {
                    "$ref": "#/definitions/NoAsyncInComputedPropertiesRuleConfig",
                    "description": "Disallow asynchronous actions in computed properties."
                },
                "vue/no-bare-strings-in-template": {
                    "$ref": "#/definitions/NoBareStringsInTemplateRuleConfig",
                    "description": "Disallow the use of bare strings in `<template>`."
                },
                "vue/no-boolean-default": {
                    "$ref": "#/definitions/NoBooleanDefaultRuleConfig",
                    "description": "Disallow boolean defaults."
                },
                "vue/no-child-content": {
                    "$ref": "#/definitions/NoChildContentRuleConfig",
                    "description": "Disallow element's child contents which would be overwritten by a directive like `v-html` or `v-text`."
                },
                "vue/no-computed-properties-in-data": {
                    "$ref": "#/definitions/NoComputedPropertiesInDataRuleConfig",
                    "description": "Disallow accessing computed properties in `data`."
                },
                "vue/no-console": {
                    "$ref": "#/definitions/NoConsoleRuleConfig",
                    "description": "Disallow the use of `console` in `<template>`."
                },
                "vue/no-constant-condition": {
                    "$ref": "#/definitions/NoConstantConditionRuleConfig",
                    "description": "Disallow constant expressions in conditions in `<template>`."
                },
                "vue/no-custom-modifiers-on-v-model": {
                    "$ref": "#/definitions/NoCustomModifiersOnVModelRuleConfig",
                    "description": "Disallow custom modifiers on v-model used on the component."
                },
                "vue/no-deprecated-data-object-declaration": {
                    "$ref": "#/definitions/NoDeprecatedDataObjectDeclarationRuleConfig",
                    "description": "Disallow using deprecated object declaration on data (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-destroyed-lifecycle": {
                    "$ref": "#/definitions/NoDeprecatedDestroyedLifecycleRuleConfig",
                    "description": "Disallow using deprecated `destroyed` and `beforeDestroy` lifecycle hooks (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-dollar-listeners-api": {
                    "$ref": "#/definitions/NoDeprecatedDollarListenersApiRuleConfig",
                    "description": "Disallow using deprecated `$listeners` (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-dollar-scopedslots-api": {
                    "$ref": "#/definitions/NoDeprecatedDollarScopedslotsApiRuleConfig",
                    "description": "Disallow using deprecated `$scopedSlots` (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-events-api": {
                    "$ref": "#/definitions/NoDeprecatedEventsApiRuleConfig",
                    "description": "Disallow using deprecated events api (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-filter": {
                    "$ref": "#/definitions/NoDeprecatedFilterRuleConfig",
                    "description": "Disallow using deprecated filters syntax (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-functional-template": {
                    "$ref": "#/definitions/NoDeprecatedFunctionalTemplateRuleConfig",
                    "description": "Disallow using deprecated the `functional` template (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-html-element-is": {
                    "$ref": "#/definitions/NoDeprecatedHtmlElementIsRuleConfig",
                    "description": "Disallow using deprecated the `is` attribute on HTML elements (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-inline-template": {
                    "$ref": "#/definitions/NoDeprecatedInlineTemplateRuleConfig",
                    "description": "Disallow using deprecated `inline-template` attribute (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-model-definition": {
                    "$ref": "#/definitions/NoDeprecatedModelDefinitionRuleConfig",
                    "description": "Disallow deprecated `model` definition (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-props-default-this": {
                    "$ref": "#/definitions/NoDeprecatedPropsDefaultThisRuleConfig",
                    "description": "Disallow deprecated `this` access in props default function (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-router-link-tag-prop": {
                    "$ref": "#/definitions/NoDeprecatedRouterLinkTagPropRuleConfig",
                    "description": "Disallow using deprecated `tag` property on `RouterLink` (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-scope-attribute": {
                    "$ref": "#/definitions/NoDeprecatedScopeAttributeRuleConfig",
                    "description": "Disallow deprecated `scope` attribute (in Vue.js 2.5.0+)."
                },
                "vue/no-deprecated-slot-attribute": {
                    "$ref": "#/definitions/NoDeprecatedSlotAttributeRuleConfig",
                    "description": "Disallow deprecated `slot` attribute (in Vue.js 2.6.0+)."
                },
                "vue/no-deprecated-slot-scope-attribute": {
                    "$ref": "#/definitions/NoDeprecatedSlotScopeAttributeRuleConfig",
                    "description": "Disallow deprecated `slot-scope` attribute (in Vue.js 2.6.0+)."
                },
                "vue/no-deprecated-v-bind-sync": {
                    "$ref": "#/definitions/NoDeprecatedVBindSyncRuleConfig",
                    "description": "Disallow use of deprecated `.sync` modifier on `v-bind` directive (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-v-is": {
                    "$ref": "#/definitions/NoDeprecatedVIsRuleConfig",
                    "description": "Disallow deprecated `v-is` directive (in Vue.js 3.1.0+)."
                },
                "vue/no-deprecated-v-on-native-modifier": {
                    "$ref": "#/definitions/NoDeprecatedVOnNativeModifierRuleConfig",
                    "description": "Disallow using deprecated `.native` modifiers (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-v-on-number-modifiers": {
                    "$ref": "#/definitions/NoDeprecatedVOnNumberModifiersRuleConfig",
                    "description": "Disallow using deprecated number (keycode) modifiers (in Vue.js 3.0.0+)."
                },
                "vue/no-deprecated-vue-config-keycodes": {
                    "$ref": "#/definitions/NoDeprecatedVueConfigKeycodesRuleConfig",
                    "description": "Disallow using deprecated `Vue.config.keyCodes` (in Vue.js 3.0.0+)."
                },
                "vue/no-dupe-keys": {
                    "$ref": "#/definitions/NoDupeKeysRuleConfig",
                    "description": "Disallow duplication of field names."
                },
                "vue/no-dupe-v-else-if": {
                    "$ref": "#/definitions/NoDupeVElseIfRuleConfig",
                    "description": "Disallow duplicate conditions in `v-if` / `v-else-if` chains."
                },
                "vue/no-duplicate-attr-inheritance": {
                    "$ref": "#/definitions/NoDuplicateAttrInheritanceRuleConfig",
                    "description": "Enforce `inheritAttrs` to be set to `false` when using `v-bind=\"$attrs\"`."
                },
                "vue/no-duplicate-attributes": {
                    "$ref": "#/definitions/NoDuplicateAttributesRuleConfig",
                    "description": "Disallow duplication of attributes."
                },
                "vue/no-empty-component-block": {
                    "$ref": "#/definitions/NoEmptyComponentBlockRuleConfig",
                    "description": "Disallow the `<template>` `<script>` `<style>` block to be empty."
                },
                "vue/no-empty-pattern": {
                    "$ref": "#/definitions/NoEmptyPatternRuleConfig",
                    "description": "Disallow empty destructuring patterns in `<template>`."
                },
                "vue/no-export-in-script-setup": {
                    "$ref": "#/definitions/NoExportInScriptSetupRuleConfig",
                    "description": "Disallow `export` in `<script setup>`."
                },
                "vue/no-expose-after-await": {
                    "$ref": "#/definitions/NoExposeAfterAwaitRuleConfig",
                    "description": "Disallow asynchronously registered `expose`."
                },
                "vue/no-extra-parens": {
                    "$ref": "#/definitions/NoExtraParensRuleConfig",
                    "description": "Disallow unnecessary parentheses in `<template>`."
                },
                "vue/no-invalid-model-keys": {
                    "$ref": "#/definitions/NoInvalidModelKeysRuleConfig",
                    "description": "Require valid keys in model option."
                },
                "vue/no-irregular-whitespace": {
                    "$ref": "#/definitions/NoIrregularWhitespaceRuleConfig$1",
                    "description": "Disallow irregular whitespace in `.vue` files."
                },
                "vue/no-lifecycle-after-await": {
                    "$ref": "#/definitions/NoLifecycleAfterAwaitRuleConfig",
                    "description": "Disallow asynchronously registered lifecycle hooks."
                },
                "vue/no-lone-template": {
                    "$ref": "#/definitions/NoLoneTemplateRuleConfig",
                    "description": "Disallow unnecessary `<template>`."
                },
                "vue/no-loss-of-precision": {
                    "$ref": "#/definitions/NoLossOfPrecisionRuleConfig",
                    "description": "Disallow literal numbers that lose precision in `<template>`."
                },
                "vue/no-multi-spaces": {
                    "$ref": "#/definitions/NoMultiSpacesRuleConfig",
                    "description": "Disallow multiple spaces."
                },
                "vue/no-multiple-objects-in-class": {
                    "$ref": "#/definitions/NoMultipleObjectsInClassRuleConfig",
                    "description": "Disallow to pass multiple objects into array to class."
                },
                "vue/no-multiple-slot-args": {
                    "$ref": "#/definitions/NoMultipleSlotArgsRuleConfig",
                    "description": "Disallow to pass multiple arguments to scoped slots."
                },
                "vue/no-multiple-template-root": {
                    "$ref": "#/definitions/NoMultipleTemplateRootRuleConfig",
                    "description": "Disallow adding multiple root nodes to the template."
                },
                "vue/no-mutating-props": {
                    "$ref": "#/definitions/NoMutatingPropsRuleConfig",
                    "description": "Disallow mutation of component props."
                },
                "vue/no-parsing-error": {
                    "$ref": "#/definitions/NoParsingErrorRuleConfig$1",
                    "description": "Disallow parsing errors in `<template>`."
                },
                "vue/no-potential-component-option-typo": {
                    "$ref": "#/definitions/NoPotentialComponentOptionTypoRuleConfig",
                    "description": "Disallow a potential typo in your component property."
                },
                "vue/no-ref-as-operand": {
                    "$ref": "#/definitions/NoRefAsOperandRuleConfig",
                    "description": "Disallow use of value wrapped by `ref()` (Composition API) as an operand."
                },
                "vue/no-ref-object-destructure": {
                    "$ref": "#/definitions/NoRefObjectDestructureRuleConfig",
                    "description": "Disallow usages of ref objects that can lead to loss of reactivity."
                },
                "vue/no-ref-object-reactivity-loss": {
                    "$ref": "#/definitions/NoRefObjectReactivityLossRuleConfig",
                    "description": "Disallow usages of ref objects that can lead to loss of reactivity."
                },
                "vue/no-required-prop-with-default": {
                    "$ref": "#/definitions/NoRequiredPropWithDefaultRuleConfig",
                    "description": "Enforce props with default values to be optional."
                },
                "vue/no-reserved-component-names": {
                    "$ref": "#/definitions/NoReservedComponentNamesRuleConfig",
                    "description": "Disallow the use of reserved names in component definitions."
                },
                "vue/no-reserved-keys": {
                    "$ref": "#/definitions/NoReservedKeysRuleConfig",
                    "description": "Disallow overwriting reserved keys."
                },
                "vue/no-reserved-props": {
                    "$ref": "#/definitions/NoReservedPropsRuleConfig",
                    "description": "Disallow reserved names in props."
                },
                "vue/no-restricted-block": {
                    "$ref": "#/definitions/NoRestrictedBlockRuleConfig",
                    "description": "Disallow specific block."
                },
                "vue/no-restricted-call-after-await": {
                    "$ref": "#/definitions/NoRestrictedCallAfterAwaitRuleConfig",
                    "description": "Disallow asynchronously called restricted methods."
                },
                "vue/no-restricted-class": {
                    "$ref": "#/definitions/NoRestrictedClassRuleConfig",
                    "description": "Disallow specific classes in Vue components."
                },
                "vue/no-restricted-component-names": {
                    "$ref": "#/definitions/NoRestrictedComponentNamesRuleConfig",
                    "description": "Disallow specific component names."
                },
                "vue/no-restricted-component-options": {
                    "$ref": "#/definitions/NoRestrictedComponentOptionsRuleConfig",
                    "description": "Disallow specific component option."
                },
                "vue/no-restricted-custom-event": {
                    "$ref": "#/definitions/NoRestrictedCustomEventRuleConfig",
                    "description": "Disallow specific custom event."
                },
                "vue/no-restricted-html-elements": {
                    "$ref": "#/definitions/NoRestrictedHtmlElementsRuleConfig",
                    "description": "Disallow specific HTML elements."
                },
                "vue/no-restricted-props": {
                    "$ref": "#/definitions/NoRestrictedPropsRuleConfig",
                    "description": "Disallow specific props."
                },
                "vue/no-restricted-static-attribute": {
                    "$ref": "#/definitions/NoRestrictedStaticAttributeRuleConfig",
                    "description": "Disallow specific attribute."
                },
                "vue/no-restricted-syntax": {
                    "$ref": "#/definitions/NoRestrictedSyntaxRuleConfig",
                    "description": "Disallow specified syntax in `<template>`."
                },
                "vue/no-restricted-v-bind": {
                    "$ref": "#/definitions/NoRestrictedVBindRuleConfig",
                    "description": "Disallow specific argument in `v-bind`."
                },
                "vue/no-root-v-if": {
                    "$ref": "#/definitions/NoRootVIfRuleConfig",
                    "description": "Disallow `v-if` directives on root element."
                },
                "vue/no-setup-props-destructure": {
                    "$ref": "#/definitions/NoSetupPropsDestructureRuleConfig",
                    "description": "Disallow usages that lose the reactivity of `props` passed to `setup`."
                },
                "vue/no-setup-props-reactivity-loss": {
                    "$ref": "#/definitions/NoSetupPropsReactivityLossRuleConfig",
                    "description": "Disallow usages that lose the reactivity of `props` passed to `setup`."
                },
                "vue/no-shared-component-data": {
                    "$ref": "#/definitions/NoSharedComponentDataRuleConfig",
                    "description": "Enforce component's data property to be a function."
                },
                "vue/no-side-effects-in-computed-properties": {
                    "$ref": "#/definitions/NoSideEffectsInComputedPropertiesRuleConfig",
                    "description": "Disallow side effects in computed properties."
                },
                "vue/no-spaces-around-equal-signs-in-attribute": {
                    "$ref": "#/definitions/NoSpacesAroundEqualSignsInAttributeRuleConfig",
                    "description": "Disallow spaces around equal signs in attribute."
                },
                "vue/no-sparse-arrays": {
                    "$ref": "#/definitions/NoSparseArraysRuleConfig",
                    "description": "Disallow sparse arrays in `<template>`."
                },
                "vue/no-static-inline-styles": {
                    "$ref": "#/definitions/NoStaticInlineStylesRuleConfig",
                    "description": "Disallow static inline `style` attributes."
                },
                "vue/no-template-key": {
                    "$ref": "#/definitions/NoTemplateKeyRuleConfig",
                    "description": "Disallow `key` attribute on `<template>`."
                },
                "vue/no-template-shadow": {
                    "$ref": "#/definitions/NoTemplateShadowRuleConfig",
                    "description": "Disallow variable declarations from shadowing variables declared in the outer scope."
                },
                "vue/no-template-target-blank": {
                    "$ref": "#/definitions/NoTemplateTargetBlankRuleConfig",
                    "description": "Disallow target=\"_blank\" attribute without rel=\"noopener noreferrer\"."
                },
                "vue/no-textarea-mustache": {
                    "$ref": "#/definitions/NoTextareaMustacheRuleConfig",
                    "description": "Disallow mustaches in `<textarea>`."
                },
                "vue/no-this-in-before-route-enter": {
                    "$ref": "#/definitions/NoThisInBeforeRouteEnterRuleConfig",
                    "description": "Disallow `this` usage in a `beforeRouteEnter` method."
                },
                "vue/no-undef-components": {
                    "$ref": "#/definitions/NoUndefComponentsRuleConfig",
                    "description": "Disallow use of undefined components in `<template>`."
                },
                "vue/no-undef-properties": {
                    "$ref": "#/definitions/NoUndefPropertiesRuleConfig",
                    "description": "Disallow undefined properties."
                },
                "vue/no-unsupported-features": {
                    "$ref": "#/definitions/NoUnsupportedFeaturesRuleConfig",
                    "description": "Disallow unsupported Vue.js syntax on the specified version."
                },
                "vue/no-unused-components": {
                    "$ref": "#/definitions/NoUnusedComponentsRuleConfig",
                    "description": "Disallow registering components that are not used inside templates."
                },
                "vue/no-unused-properties": {
                    "$ref": "#/definitions/NoUnusedPropertiesRuleConfig",
                    "description": "Disallow unused properties."
                },
                "vue/no-unused-refs": {
                    "$ref": "#/definitions/NoUnusedRefsRuleConfig",
                    "description": "Disallow unused refs."
                },
                "vue/no-unused-vars": {
                    "$ref": "#/definitions/NoUnusedVarsRuleConfig",
                    "description": "Disallow unused variable definitions of v-for directives or scope attributes."
                },
                "vue/no-use-computed-property-like-method": {
                    "$ref": "#/definitions/NoUseComputedPropertyLikeMethodRuleConfig",
                    "description": "Disallow use computed property like method."
                },
                "vue/no-use-v-else-with-v-for": {
                    "$ref": "#/definitions/NoUseVElseWithVForRuleConfig",
                    "description": "Disallow using `v-else-if`/`v-else` on the same element as `v-for`."
                },
                "vue/no-use-v-if-with-v-for": {
                    "$ref": "#/definitions/NoUseVIfWithVForRuleConfig",
                    "description": "Disallow using `v-if` on the same element as `v-for`."
                },
                "vue/no-useless-concat": {
                    "$ref": "#/definitions/NoUselessConcatRuleConfig",
                    "description": "Disallow unnecessary concatenation of literals or template literals in `<template>`."
                },
                "vue/no-useless-mustaches": {
                    "$ref": "#/definitions/NoUselessMustachesRuleConfig",
                    "description": "Disallow unnecessary mustache interpolations."
                },
                "vue/no-useless-template-attributes": {
                    "$ref": "#/definitions/NoUselessTemplateAttributesRuleConfig",
                    "description": "Disallow useless attribute on `<template>`."
                },
                "vue/no-useless-v-bind": {
                    "$ref": "#/definitions/NoUselessVBindRuleConfig",
                    "description": "Disallow unnecessary `v-bind` directives."
                },
                "vue/no-v-for-template-key": {
                    "$ref": "#/definitions/NoVForTemplateKeyRuleConfig",
                    "description": "Disallow `key` attribute on `<template v-for>`."
                },
                "vue/no-v-for-template-key-on-child": {
                    "$ref": "#/definitions/NoVForTemplateKeyOnChildRuleConfig",
                    "description": "Disallow key of `<template v-for>` placed on child elements."
                },
                "vue/no-v-html": {
                    "$ref": "#/definitions/NoVHtmlRuleConfig$1",
                    "description": "Disallow use of v-html to prevent XSS attack."
                },
                "vue/no-v-model-argument": {
                    "$ref": "#/definitions/NoVModelArgumentRuleConfig",
                    "description": "Disallow adding an argument to `v-model` used in custom component."
                },
                "vue/no-v-text": {
                    "$ref": "#/definitions/NoVTextRuleConfig",
                    "description": "Disallow use of v-text."
                },
                "vue/no-v-text-v-html-on-component": {
                    "$ref": "#/definitions/NoVTextVHtmlOnComponentRuleConfig",
                    "description": "Disallow v-text / v-html on component."
                },
                "vue/no-watch-after-await": {
                    "$ref": "#/definitions/NoWatchAfterAwaitRuleConfig",
                    "description": "Disallow asynchronously registered `watch`."
                },
                "vue/object-curly-newline": {
                    "$ref": "#/definitions/ObjectCurlyNewlineRuleConfig",
                    "description": "Enforce consistent line breaks after opening and before closing braces in `<template>`."
                },
                "vue/object-curly-spacing": {
                    "$ref": "#/definitions/ObjectCurlySpacingRuleConfig",
                    "description": "Enforce consistent spacing inside braces in `<template>`."
                },
                "vue/object-property-newline": {
                    "$ref": "#/definitions/ObjectPropertyNewlineRuleConfig",
                    "description": "Enforce placing object properties on separate lines in `<template>`."
                },
                "vue/object-shorthand": {
                    "$ref": "#/definitions/ObjectShorthandRuleConfig",
                    "description": "Require or disallow method and property shorthand syntax for object literals in `<template>`."
                },
                "vue/one-component-per-file": {
                    "$ref": "#/definitions/OneComponentPerFileRuleConfig",
                    "description": "Enforce that each component should be in its own file."
                },
                "vue/operator-linebreak": {
                    "$ref": "#/definitions/OperatorLinebreakRuleConfig",
                    "description": "Enforce consistent linebreak style for operators in `<template>`."
                },
                "vue/order-in-components": {
                    "$ref": "#/definitions/OrderInComponentsRuleConfig",
                    "description": "Enforce order of properties in components."
                },
                "vue/padding-line-between-blocks": {
                    "$ref": "#/definitions/PaddingLineBetweenBlocksRuleConfig",
                    "description": "Require or disallow padding lines between blocks."
                },
                "vue/padding-line-between-tags": {
                    "$ref": "#/definitions/PaddingLineBetweenTagsRuleConfig",
                    "description": "Require or disallow newlines between sibling tags in template."
                },
                "vue/padding-lines-in-component-definition": {
                    "$ref": "#/definitions/PaddingLinesInComponentDefinitionRuleConfig",
                    "description": "Require or disallow padding lines in component definition."
                },
                "vue/prefer-define-options": {
                    "$ref": "#/definitions/PreferDefineOptionsRuleConfig",
                    "description": "Enforce use of `defineOptions` instead of default export."
                },
                "vue/prefer-import-from-vue": {
                    "$ref": "#/definitions/PreferImportFromVueRuleConfig",
                    "description": "Enforce import from 'vue' instead of import from '@vue/*'."
                },
                "vue/prefer-prop-type-boolean-first": {
                    "$ref": "#/definitions/PreferPropTypeBooleanFirstRuleConfig",
                    "description": "Enforce `Boolean` comes first in component prop types."
                },
                "vue/prefer-separate-static-class": {
                    "$ref": "#/definitions/PreferSeparateStaticClassRuleConfig",
                    "description": "Require static class names in template to be in a separate `class` attribute."
                },
                "vue/prefer-template": {
                    "$ref": "#/definitions/PreferTemplateRuleConfig",
                    "description": "Require template literals instead of string concatenation in `<template>`."
                },
                "vue/prefer-true-attribute-shorthand": {
                    "$ref": "#/definitions/PreferTrueAttributeShorthandRuleConfig",
                    "description": "Require shorthand form attribute when `v-bind` value is `true`."
                },
                "vue/prop-name-casing": {
                    "$ref": "#/definitions/PropNameCasingRuleConfig",
                    "description": "Enforce specific casing for the Prop name in Vue components."
                },
                "vue/quote-props": {
                    "$ref": "#/definitions/QuotePropsRuleConfig",
                    "description": "Require quotes around object literal property names in `<template>`."
                },
                "vue/require-component-is": {
                    "$ref": "#/definitions/RequireComponentIsRuleConfig",
                    "description": "Require `v-bind:is` of `<component>` elements."
                },
                "vue/require-default-prop": {
                    "$ref": "#/definitions/RequireDefaultPropRuleConfig",
                    "description": "Require default value for props."
                },
                "vue/require-direct-export": {
                    "$ref": "#/definitions/RequireDirectExportRuleConfig",
                    "description": "Require the component to be directly exported."
                },
                "vue/require-emit-validator": {
                    "$ref": "#/definitions/RequireEmitValidatorRuleConfig",
                    "description": "Require type definitions in emits."
                },
                "vue/require-explicit-emits": {
                    "$ref": "#/definitions/RequireExplicitEmitsRuleConfig",
                    "description": "Require `emits` option with name triggered by `$emit()`."
                },
                "vue/require-expose": {
                    "$ref": "#/definitions/RequireExposeRuleConfig",
                    "description": "Require declare public properties using `expose`."
                },
                "vue/require-macro-variable-name": {
                    "$ref": "#/definitions/RequireMacroVariableNameRuleConfig",
                    "description": "Require a certain macro variable name."
                },
                "vue/require-name-property": {
                    "$ref": "#/definitions/RequireNamePropertyRuleConfig",
                    "description": "Require a name property in Vue components."
                },
                "vue/require-prop-comment": {
                    "$ref": "#/definitions/RequirePropCommentRuleConfig",
                    "description": "Require props to have a comment."
                },
                "vue/require-prop-type-constructor": {
                    "$ref": "#/definitions/RequirePropTypeConstructorRuleConfig",
                    "description": "Require prop type to be a constructor."
                },
                "vue/require-prop-types": {
                    "$ref": "#/definitions/RequirePropTypesRuleConfig",
                    "description": "Require type definitions in props."
                },
                "vue/require-render-return": {
                    "$ref": "#/definitions/RequireRenderReturnRuleConfig",
                    "description": "Enforce render function to always return value."
                },
                "vue/require-slots-as-functions": {
                    "$ref": "#/definitions/RequireSlotsAsFunctionsRuleConfig",
                    "description": "Enforce properties of `$slots` to be used as a function."
                },
                "vue/require-toggle-inside-transition": {
                    "$ref": "#/definitions/RequireToggleInsideTransitionRuleConfig",
                    "description": "Require control the display of the content inside `<transition>`."
                },
                "vue/require-typed-object-prop": {
                    "$ref": "#/definitions/RequireTypedObjectPropRuleConfig",
                    "description": "Enforce adding type declarations to object props."
                },
                "vue/require-typed-ref": {
                    "$ref": "#/definitions/RequireTypedRefRuleConfig",
                    "description": "Require `ref` and `shallowRef` functions to be strongly typed."
                },
                "vue/require-v-for-key": {
                    "$ref": "#/definitions/RequireVForKeyRuleConfig",
                    "description": "Require `v-bind:key` with `v-for` directives."
                },
                "vue/require-valid-default-prop": {
                    "$ref": "#/definitions/RequireValidDefaultPropRuleConfig",
                    "description": "Enforce props default values to be valid."
                },
                "vue/return-in-computed-property": {
                    "$ref": "#/definitions/ReturnInComputedPropertyRuleConfig",
                    "description": "Enforce that a return statement is present in computed property."
                },
                "vue/return-in-emits-validator": {
                    "$ref": "#/definitions/ReturnInEmitsValidatorRuleConfig",
                    "description": "Enforce that a return statement is present in emits validator."
                },
                "vue/script-indent": {
                    "$ref": "#/definitions/ScriptIndentRuleConfig",
                    "description": "Enforce consistent indentation in `<script>`."
                },
                "vue/script-setup-uses-vars": {
                    "$ref": "#/definitions/ScriptSetupUsesVarsRuleConfig",
                    "description": "Prevent `<script setup>` variables used in `<template>` to be marked as unused."
                },
                "vue/singleline-html-element-content-newline": {
                    "$ref": "#/definitions/SinglelineHtmlElementContentNewlineRuleConfig",
                    "description": "Require a line break before and after the contents of a singleline element."
                },
                "vue/sort-keys": {
                    "$ref": "#/definitions/SortKeysRuleConfig$1",
                    "description": "Enforce sort-keys in a manner that is compatible with order-in-components."
                },
                "vue/space-in-parens": {
                    "$ref": "#/definitions/SpaceInParensRuleConfig",
                    "description": "Enforce consistent spacing inside parentheses in `<template>`."
                },
                "vue/space-infix-ops": {
                    "$ref": "#/definitions/SpaceInfixOpsRuleConfig",
                    "description": "Require spacing around infix operators in `<template>`."
                },
                "vue/space-unary-ops": {
                    "$ref": "#/definitions/SpaceUnaryOpsRuleConfig",
                    "description": "Enforce consistent spacing before or after unary operators in `<template>`."
                },
                "vue/static-class-names-order": {
                    "$ref": "#/definitions/StaticClassNamesOrderRuleConfig",
                    "description": "Enforce static class names order."
                },
                "vue/template-curly-spacing": {
                    "$ref": "#/definitions/TemplateCurlySpacingRuleConfig",
                    "description": "Require or disallow spacing around embedded expressions of template strings in `<template>`."
                },
                "vue/this-in-template": {
                    "$ref": "#/definitions/ThisInTemplateRuleConfig",
                    "description": "Disallow usage of `this` in template."
                },
                "vue/use-v-on-exact": {
                    "$ref": "#/definitions/UseVOnExactRuleConfig",
                    "description": "Enforce usage of `exact` modifier on `v-on`."
                },
                "vue/v-bind-style": {
                    "$ref": "#/definitions/VBindStyleRuleConfig",
                    "description": "Enforce `v-bind` directive style."
                },
                "vue/v-for-delimiter-style": {
                    "$ref": "#/definitions/VForDelimiterStyleRuleConfig",
                    "description": "Enforce `v-for` directive's delimiter style."
                },
                "vue/v-on-event-hyphenation": {
                    "$ref": "#/definitions/VOnEventHyphenationRuleConfig",
                    "description": "Enforce v-on event naming style on custom components in template."
                },
                "vue/v-on-function-call": {
                    "$ref": "#/definitions/VOnFunctionCallRuleConfig",
                    "description": "Enforce or forbid parentheses after method calls without arguments in `v-on` directives."
                },
                "vue/v-on-handler-style": {
                    "$ref": "#/definitions/VOnHandlerStyleRuleConfig",
                    "description": "Enforce writing style for handlers in `v-on` directives."
                },
                "vue/v-on-style": {
                    "$ref": "#/definitions/VOnStyleRuleConfig",
                    "description": "Enforce `v-on` directive style."
                },
                "vue/v-slot-style": {
                    "$ref": "#/definitions/VSlotStyleRuleConfig",
                    "description": "Enforce `v-slot` directive style."
                },
                "vue/valid-attribute-name": {
                    "$ref": "#/definitions/ValidAttributeNameRuleConfig",
                    "description": "Require valid attribute names."
                },
                "vue/valid-define-emits": {
                    "$ref": "#/definitions/ValidDefineEmitsRuleConfig",
                    "description": "Enforce valid `defineEmits` compiler macro."
                },
                "vue/valid-define-options": {
                    "$ref": "#/definitions/ValidDefineOptionsRuleConfig",
                    "description": "Enforce valid `defineOptions` compiler macro."
                },
                "vue/valid-define-props": {
                    "$ref": "#/definitions/ValidDefinePropsRuleConfig",
                    "description": "Enforce valid `defineProps` compiler macro."
                },
                "vue/valid-model-definition": {
                    "$ref": "#/definitions/ValidModelDefinitionRuleConfig",
                    "description": "Require valid keys in model option."
                },
                "vue/valid-next-tick": {
                    "$ref": "#/definitions/ValidNextTickRuleConfig",
                    "description": "Enforce valid `nextTick` function calls."
                },
                "vue/valid-template-root": {
                    "$ref": "#/definitions/ValidTemplateRootRuleConfig",
                    "description": "Enforce valid template root."
                },
                "vue/valid-v-bind": {
                    "$ref": "#/definitions/ValidVBindRuleConfig",
                    "description": "Enforce valid `v-bind` directives."
                },
                "vue/valid-v-bind-sync": {
                    "$ref": "#/definitions/ValidVBindSyncRuleConfig",
                    "description": "Enforce valid `.sync` modifier on `v-bind` directives."
                },
                "vue/valid-v-cloak": {
                    "$ref": "#/definitions/ValidVCloakRuleConfig",
                    "description": "Enforce valid `v-cloak` directives."
                },
                "vue/valid-v-else": {
                    "$ref": "#/definitions/ValidVElseRuleConfig",
                    "description": "Enforce valid `v-else` directives."
                },
                "vue/valid-v-else-if": {
                    "$ref": "#/definitions/ValidVElseIfRuleConfig",
                    "description": "Enforce valid `v-else-if` directives."
                },
                "vue/valid-v-for": {
                    "$ref": "#/definitions/ValidVForRuleConfig",
                    "description": "Enforce valid `v-for` directives."
                },
                "vue/valid-v-html": {
                    "$ref": "#/definitions/ValidVHtmlRuleConfig",
                    "description": "Enforce valid `v-html` directives."
                },
                "vue/valid-v-if": {
                    "$ref": "#/definitions/ValidVIfRuleConfig",
                    "description": "Enforce valid `v-if` directives."
                },
                "vue/valid-v-is": {
                    "$ref": "#/definitions/ValidVIsRuleConfig",
                    "description": "Enforce valid `v-is` directives."
                },
                "vue/valid-v-memo": {
                    "$ref": "#/definitions/ValidVMemoRuleConfig",
                    "description": "Enforce valid `v-memo` directives."
                },
                "vue/valid-v-model": {
                    "$ref": "#/definitions/ValidVModelRuleConfig",
                    "description": "Enforce valid `v-model` directives."
                },
                "vue/valid-v-on": {
                    "$ref": "#/definitions/ValidVOnRuleConfig",
                    "description": "Enforce valid `v-on` directives."
                },
                "vue/valid-v-once": {
                    "$ref": "#/definitions/ValidVOnceRuleConfig",
                    "description": "Enforce valid `v-once` directives."
                },
                "vue/valid-v-pre": {
                    "$ref": "#/definitions/ValidVPreRuleConfig",
                    "description": "Enforce valid `v-pre` directives."
                },
                "vue/valid-v-show": {
                    "$ref": "#/definitions/ValidVShowRuleConfig",
                    "description": "Enforce valid `v-show` directives."
                },
                "vue/valid-v-slot": {
                    "$ref": "#/definitions/ValidVSlotRuleConfig",
                    "description": "Enforce valid `v-slot` directives."
                },
                "vue/valid-v-text": {
                    "$ref": "#/definitions/ValidVTextRuleConfig",
                    "description": "Enforce valid `v-text` directives."
                },
                "wrap-iife": {
                    "$ref": "#/definitions/WrapIifeRuleConfig",
                    "description": "Require parentheses around immediate `function` invocations."
                },
                "wrap-regex": {
                    "$ref": "#/definitions/WrapRegexRuleConfig",
                    "description": "Require parenthesis around regex literals."
                },
                "yaml/block-mapping": {
                    "$ref": "#/definitions/BlockMappingRuleConfig"
                },
                "yaml/block-mapping-colon-indicator-newline": {
                    "$ref": "#/definitions/BlockMappingColonIndicatorNewlineRuleConfig"
                },
                "yaml/block-mapping-question-indicator-newline": {
                    "$ref": "#/definitions/BlockMappingQuestionIndicatorNewlineRuleConfig"
                },
                "yaml/block-sequence": {
                    "$ref": "#/definitions/BlockSequenceRuleConfig"
                },
                "yaml/block-sequence-hyphen-indicator-newline": {
                    "$ref": "#/definitions/BlockSequenceHyphenIndicatorNewlineRuleConfig"
                },
                "yaml/file-extension": {
                    "$ref": "#/definitions/FileExtensionRuleConfig"
                },
                "yaml/flow-mapping-curly-newline": {
                    "$ref": "#/definitions/FlowMappingCurlyNewlineRuleConfig"
                },
                "yaml/flow-mapping-curly-spacing": {
                    "$ref": "#/definitions/FlowMappingCurlySpacingRuleConfig"
                },
                "yaml/flow-sequence-bracket-newline": {
                    "$ref": "#/definitions/FlowSequenceBracketNewlineRuleConfig"
                },
                "yaml/flow-sequence-bracket-spacing": {
                    "$ref": "#/definitions/FlowSequenceBracketSpacingRuleConfig"
                },
                "yaml/indent": {
                    "$ref": "#/definitions/IndentRuleConfig"
                },
                "yaml/key-name-casing": {
                    "$ref": "#/definitions/KeyNameCasingRuleConfig"
                },
                "yaml/key-spacing": {
                    "$ref": "#/definitions/KeySpacingRuleConfig"
                },
                "yaml/no-empty-document": {
                    "$ref": "#/definitions/NoEmptyDocumentRuleConfig"
                },
                "yaml/no-empty-key": {
                    "$ref": "#/definitions/NoEmptyKeyRuleConfig"
                },
                "yaml/no-empty-mapping-value": {
                    "$ref": "#/definitions/NoEmptyMappingValueRuleConfig"
                },
                "yaml/no-empty-sequence-entry": {
                    "$ref": "#/definitions/NoEmptySequenceEntryRuleConfig"
                },
                "yaml/no-irregular-whitespace": {
                    "$ref": "#/definitions/NoIrregularWhitespaceRuleConfig"
                },
                "yaml/no-multiple-empty-lines": {
                    "$ref": "#/definitions/NoMultipleEmptyLinesRuleConfig"
                },
                "yaml/no-tab-indent": {
                    "$ref": "#/definitions/NoTabIndentRuleConfig"
                },
                "yaml/no-trailing-zeros": {
                    "$ref": "#/definitions/NoTrailingZerosRuleConfig"
                },
                "yaml/plain-scalar": {
                    "$ref": "#/definitions/PlainScalarRuleConfig"
                },
                "yaml/quotes": {
                    "$ref": "#/definitions/QuotesRuleConfig"
                },
                "yaml/require-string-key": {
                    "$ref": "#/definitions/RequireStringKeyRuleConfig"
                },
                "yaml/sort-keys": {
                    "$ref": "#/definitions/SortKeysRuleConfig"
                },
                "yaml/sort-sequence-values": {
                    "$ref": "#/definitions/SortSequenceValuesRuleConfig"
                },
                "yaml/spaced-comment": {
                    "$ref": "#/definitions/SpacedCommentRuleConfig"
                },
                "yaml/vue-custom-block/no-parsing-error": {
                    "$ref": "#/definitions/VueCustomBlockNoParsingErrorRuleConfig"
                },
                "yield-star-spacing": {
                    "$ref": "#/definitions/YieldStarSpacingRuleConfig",
                    "description": "Require or disallow spacing around the `*` in `yield*` expressions."
                },
                "yoda": {
                    "$ref": "#/definitions/YodaRuleConfig",
                    "description": "Require or disallow \"Yoda\" conditions."
                }
            },
            "type": "object"
        },
        "PlainScalarConfig": {
            "description": "Config.",
            "properties": {
                "ignorePatterns": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PlainScalarOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PlainScalarRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PlainScalarOption"
                        },
                        {
                            "$ref": "#/definitions/PlainScalarConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow plain style scalar."
        },
        "PredefinedFormats": {
            "enum": [
                "PascalCase",
                "StrictPascalCase",
                "UPPER_CASE",
                "camelCase",
                "snake_case",
                "strictCamelCase"
            ],
            "type": "string"
        },
        "PreferAddEventListenerOption": {
            "description": "Option.",
            "properties": {
                "excludedPackages": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PreferAddEventListenerRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferAddEventListenerOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions."
        },
        "PreferArrayFindOption": {
            "description": "Option.",
            "properties": {
                "checkFromLast": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferArrayFindRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferArrayFindOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`."
        },
        "PreferArrayFlatMapRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.flatMap(…)` over `.map(…).flat()`."
        },
        "PreferArrayFlatOption": {
            "description": "Option.",
            "properties": {
                "functions": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PreferArrayFlatRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferArrayFlatOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays."
        },
        "PreferArrayIndexOfRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item."
        },
        "PreferArraySomeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast}(…)`."
        },
        "PreferArrowCallbackOption": {
            "description": "Option.",
            "properties": {
                "allowNamedFunctions": {
                    "type": "boolean"
                },
                "allowUnboundThis": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferArrowCallbackRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferArrowCallbackOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require using arrow functions for callbacks."
        },
        "PreferAsConstRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of `as const` over literal type."
        },
        "PreferAtOption": {
            "description": "Option.",
            "properties": {
                "checkAllIndexAccess": {
                    "type": "boolean"
                },
                "getLastElementFunctions": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PreferAtRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferAtOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.at()` method for index access and `String#charAt()`."
        },
        "PreferBlobReadingMethodsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`."
        },
        "PreferCalledWithRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using `toBeCalledWith()` or `toHaveBeenCalledWith()`."
        },
        "PreferCodePointRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`."
        },
        "PreferComparisonMatcherRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using the built-in comparison matchers."
        },
        "PreferConstOption": {
            "description": "Option.",
            "properties": {
                "destructuring": {
                    "enum": [
                        "all",
                        "any"
                    ],
                    "type": "string"
                },
                "ignoreReadBeforeAssign": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferConstRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferConstOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `const` declarations for variables that are never reassigned after declared."
        },
        "PreferDatasetRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferDateNowRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch."
        },
        "PreferDefaultExportOption": {
            "description": "Option.",
            "properties": {
                "target": {
                    "enum": [
                        "any",
                        "single"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PreferDefaultExportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferDefaultExportOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer a default export if module exports a single name or multiple names."
        },
        "PreferDefaultParametersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer default parameters over reassignment."
        },
        "PreferDefineOptionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce use of `defineOptions` instead of default export."
        },
        "PreferDestructuringConfig": {
            "description": "Config.",
            "properties": {
                "enforceForRenamedProperties": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferDestructuringOption": {
            "anyOf": [
                {
                    "properties": {
                        "AssignmentExpression": {
                            "properties": {
                                "array": {
                                    "type": "boolean"
                                },
                                "object": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "VariableDeclarator": {
                            "properties": {
                                "array": {
                                    "type": "boolean"
                                },
                                "object": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "array": {
                            "type": "boolean"
                        },
                        "object": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Option."
        },
        "PreferDestructuringRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferDestructuringOption"
                        },
                        {
                            "$ref": "#/definitions/PreferDestructuringConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require destructuring from arrays and/or objects."
        },
        "PreferDomNodeAppendRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `Node#append()` over `Node#appendChild()`."
        },
        "PreferDomNodeDatasetRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer using `.dataset` on DOM elements over calling attribute methods."
        },
        "PreferDomNodeRemoveRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`."
        },
        "PreferDomNodeTextContentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.textContent` over `.innerText`."
        },
        "PreferEachRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `each` rather than manual loops."
        },
        "PreferEnumInitializersRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require each enum member value to be explicitly initialized."
        },
        "PreferEqualityMatcherRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using the built-in quality matchers."
        },
        "PreferEventKeyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferEventTargetRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `EventTarget` over `EventEmitter`."
        },
        "PreferExpectResolvesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using `expect().resolves` over `expect(await ...)` syntax."
        },
        "PreferExponentiationOperatorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferExponentiationOperatorRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow the use of `Math.pow` in favor of the `**` operator."
        },
        "PreferExportFromOption": {
            "description": "Option.",
            "properties": {
                "ignoreUsedVariables": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferExportFromRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferExportFromOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `export…from` when re-exporting."
        },
        "PreferFlatMapRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferForOfRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible."
        },
        "PreferFunctionTypeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using function types instead of interfaces with call signatures."
        },
        "PreferGlobalBufferOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PreferGlobalBufferRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferGlobalBufferOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce either `Buffer` or `require(\"buffer\").Buffer`."
        },
        "PreferGlobalConsoleOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PreferGlobalConsoleRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferGlobalConsoleOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce either `console` or `require(\"console\")`."
        },
        "PreferGlobalProcessOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PreferGlobalProcessRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferGlobalProcessOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce either `process` or `require(\"process\")`."
        },
        "PreferGlobalTextDecoderOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PreferGlobalTextDecoderRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferGlobalTextDecoderOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce either `TextDecoder` or `require(\"util\").TextDecoder`."
        },
        "PreferGlobalTextEncoderOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PreferGlobalTextEncoderRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferGlobalTextEncoderOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce either `TextEncoder` or `require(\"util\").TextEncoder`."
        },
        "PreferGlobalUrlOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PreferGlobalUrlRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferGlobalUrlOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce either `URL` or `require(\"url\").URL`."
        },
        "PreferGlobalUrlSearchParamsOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PreferGlobalUrlSearchParamsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferGlobalUrlSearchParamsOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce either `URLSearchParams` or `require(\"url\").URLSearchParams`."
        },
        "PreferHooksInOrderRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer having hooks in consistent order."
        },
        "PreferHooksOnTopRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest having hooks before any test cases."
        },
        "PreferImportFromVueRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce import from 'vue' instead of import from '@vue/*'."
        },
        "PreferIncludesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.includes()` over `.indexOf()` and `Array#some()` when checking for existence or non-existence."
        },
        "PreferIncludesRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `includes` method over `indexOf` method."
        },
        "PreferJsonParseBufferRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer reading a JSON file as a buffer."
        },
        "PreferKeyboardEventKeyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`."
        },
        "PreferLiteralEnumMemberOption": {
            "description": "Option.",
            "properties": {
                "allowBitwiseExpressions": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferLiteralEnumMemberRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferLiteralEnumMemberOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require all enum members to be literal values."
        },
        "PreferLogicalOperatorOverTernaryRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer using a logical operator over a ternary."
        },
        "PreferLowercaseTitleOption": {
            "description": "Option.",
            "properties": {
                "allowedPrefixes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignore": {
                    "items": {
                        "enum": [
                            "describe",
                            "it",
                            "test"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignoreTopLevelDescribe": {
                    "type": "boolean"
                },
                "lowercaseFirstCharacterOnly": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferLowercaseTitleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferLowercaseTitleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce lowercase titles."
        },
        "PreferMathTruncRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of `Math.trunc` instead of bitwise operators."
        },
        "PreferMockPromiseShorthandRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer mock resolved/rejected shorthands for promises."
        },
        "PreferModernDomApisRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`."
        },
        "PreferModernMathApisRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer modern `Math` APIs over legacy patterns."
        },
        "PreferModuleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer JavaScript modules (ESM) over CommonJS."
        },
        "PreferNamedCaptureGroupRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using named capture group in regular expression."
        },
        "PreferNamespaceKeywordRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules."
        },
        "PreferNativeCoercionFunctionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly."
        },
        "PreferNegativeIndexRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer negative index over `.length - index` when possible."
        },
        "PreferNodeAppendRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferNodeProtocolRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer using the `node:` protocol when importing Node.js builtin modules."
        },
        "PreferNodeRemoveRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferNullishCoalescingOption": {
            "description": "Option.",
            "properties": {
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                    "type": "boolean"
                },
                "ignoreConditionalTests": {
                    "type": "boolean"
                },
                "ignoreMixedLogicalExpressions": {
                    "type": "boolean"
                },
                "ignorePrimitives": {
                    "anyOf": [
                        {
                            "additionalProperties": {},
                            "properties": {
                                "bigint": {
                                    "type": "boolean"
                                },
                                "boolean": {
                                    "type": "boolean"
                                },
                                "number": {
                                    "type": "boolean"
                                },
                                "string": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "const": true,
                            "type": "boolean"
                        }
                    ]
                },
                "ignoreTernaryTests": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferNullishCoalescingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferNullishCoalescingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining."
        },
        "PreferNumberPropertiesOption": {
            "description": "Option.",
            "properties": {
                "checkInfinity": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferNumberPropertiesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferNumberPropertiesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `Number` static properties over global ones."
        },
        "PreferNumericLiteralsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals."
        },
        "PreferObjectFromEntriesOption": {
            "description": "Option.",
            "properties": {
                "functions": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PreferObjectFromEntriesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferObjectFromEntriesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object."
        },
        "PreferObjectHasOwnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferObjectHasOwnRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`."
        },
        "PreferObjectSpreadRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead."
        },
        "PreferOptionalCatchBindingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer omitting the `catch` binding parameter."
        },
        "PreferOptionalChainOption": {
            "description": "Option.",
            "properties": {
                "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                    "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.",
                    "type": "boolean"
                },
                "checkAny": {
                    "description": "Check operands that are typed as `any` when inspecting \"loose boolean\" operands.",
                    "type": "boolean"
                },
                "checkBigInt": {
                    "description": "Check operands that are typed as `bigint` when inspecting \"loose boolean\" operands.",
                    "type": "boolean"
                },
                "checkBoolean": {
                    "description": "Check operands that are typed as `boolean` when inspecting \"loose boolean\" operands.",
                    "type": "boolean"
                },
                "checkNumber": {
                    "description": "Check operands that are typed as `number` when inspecting \"loose boolean\" operands.",
                    "type": "boolean"
                },
                "checkString": {
                    "description": "Check operands that are typed as `string` when inspecting \"loose boolean\" operands.",
                    "type": "boolean"
                },
                "checkUnknown": {
                    "description": "Check operands that are typed as `unknown` when inspecting \"loose boolean\" operands.",
                    "type": "boolean"
                },
                "requireNullish": {
                    "description": "Skip operands that are not typed with `null` and/or `undefined` when inspecting \"loose boolean\" operands.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferOptionalChainRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferOptionalChainOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects."
        },
        "PreferPromiseRejectErrorsOption": {
            "description": "Option.",
            "properties": {
                "allowEmptyReject": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferPromiseRejectErrorsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferPromiseRejectErrorsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require using Error objects as Promise rejection reasons."
        },
        "PreferPromisesDnsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `require(\"dns\").promises`."
        },
        "PreferPromisesFsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `require(\"fs\").promises`."
        },
        "PreferPropTypeBooleanFirstRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `Boolean` comes first in component prop types."
        },
        "PreferPrototypeMethodsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer borrowing methods from the prototype instead of the instance."
        },
        "PreferQuerySelectorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`."
        },
        "PreferReadonlyOption": {
            "description": "Option.",
            "properties": {
                "onlyInlineLambdas": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferReadonlyParameterTypesOption": {
            "description": "Option.",
            "properties": {
                "allow": {
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "from": {
                                        "const": "file",
                                        "type": "string"
                                    },
                                    "name": {
                                        "anyOf": [
                                            {
                                                "additionalItems": {
                                                    "type": "string"
                                                },
                                                "items": [
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "minItems": 1,
                                                "type": "array"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "path": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "from": {
                                        "const": "lib",
                                        "type": "string"
                                    },
                                    "name": {
                                        "anyOf": [
                                            {
                                                "additionalItems": {
                                                    "type": "string"
                                                },
                                                "items": [
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "minItems": 1,
                                                "type": "array"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "from": {
                                        "const": "package",
                                        "type": "string"
                                    },
                                    "name": {
                                        "anyOf": [
                                            {
                                                "additionalItems": {
                                                    "type": "string"
                                                },
                                                "items": [
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "minItems": 1,
                                                "type": "array"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "package": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "checkParameterProperties": {
                    "type": "boolean"
                },
                "ignoreInferredTypes": {
                    "type": "boolean"
                },
                "treatMethodsAsReadonly": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferReadonlyParameterTypesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferReadonlyParameterTypesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs."
        },
        "PreferReadonlyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferReadonlyOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor."
        },
        "PreferReduceTypeParameterRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using type parameter when calling `Array#reduce` instead of casting."
        },
        "PreferReflectApplyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `Reflect.apply()` over `Function#apply()`."
        },
        "PreferReflectOption": {
            "description": "Option.",
            "properties": {
                "exceptions": {
                    "items": {
                        "enum": [
                            "apply",
                            "call",
                            "defineProperty",
                            "delete",
                            "getOwnPropertyDescriptor",
                            "getOwnPropertyNames",
                            "getPrototypeOf",
                            "isExtensible",
                            "preventExtensions",
                            "setPrototypeOf"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PreferReflectRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferReflectOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `Reflect` methods where applicable."
        },
        "PreferRegexLiteralsOption": {
            "description": "Option.",
            "properties": {
                "disallowRedundantWrapping": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PreferRegexLiteralsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferRegexLiteralsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals."
        },
        "PreferRegexpExecRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided."
        },
        "PreferRegexpTestRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`."
        },
        "PreferReplaceAllRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferRestParamsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require rest parameters instead of `arguments`."
        },
        "PreferReturnThisTypeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce that `this` is used when only `this` type is returned."
        },
        "PreferSeparateStaticClassRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require static class names in template to be in a separate `class` attribute."
        },
        "PreferSetHasRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence."
        },
        "PreferSetSizeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer using `Set#size` instead of `Array#length`."
        },
        "PreferSnapshotHintOption": {
            "description": "Option.",
            "enum": [
                "always",
                "multi"
            ],
            "type": "string"
        },
        "PreferSnapshotHintRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferSnapshotHintOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer including a hint with external snapshots."
        },
        "PreferSpreadRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`."
        },
        "PreferSpreadRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require spread operators instead of `.apply()`."
        },
        "PreferSpyOnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using `vi.spyOn`."
        },
        "PreferStartsEndsWithRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferStrictEqualRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer strict equal over equal."
        },
        "PreferStringReplaceAllRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `String#replaceAll()` over regex searches with the global flag."
        },
        "PreferStringSliceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`."
        },
        "PreferStringStartsEndsWithRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`."
        },
        "PreferStringStartsEndsWithRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings."
        },
        "PreferStringTrimStartEndRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`."
        },
        "PreferSwitchOption": {
            "description": "Option.",
            "properties": {
                "emptyDefaultCase": {
                    "enum": [
                        "do-nothing-comment",
                        "no-default-case",
                        "no-default-comment"
                    ],
                    "type": "string"
                },
                "minimumCases": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "PreferSwitchRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferSwitchOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer `switch` over multiple `else-if`."
        },
        "PreferTemplateRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require template literals instead of string concatenation in `<template>`."
        },
        "PreferTemplateRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require template literals instead of string concatenation."
        },
        "PreferTernaryOption": {
            "description": "Option.",
            "enum": [
                "always",
                "only-single-line"
            ],
            "type": "string"
        },
        "PreferTernaryRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferTernaryOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer ternary expressions over simple `if-else` statements."
        },
        "PreferTextContentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferToBeFalsyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using toBeFalsy()."
        },
        "PreferToBeObjectRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer toBeObject()."
        },
        "PreferToBeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using toBe()."
        },
        "PreferToBeTruthyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using `toBeTruthy`."
        },
        "PreferToContainRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer using toContain()."
        },
        "PreferToHaveLengthRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using toHaveLength()."
        },
        "PreferTodoRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Suggest using `test.todo`."
        },
        "PreferTopLevelAwaitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prefer top-level await over top-level promises and async function calls."
        },
        "PreferTrimStartEndRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "PreferTrueAttributeShorthandOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "PreferTrueAttributeShorthandRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PreferTrueAttributeShorthandOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require shorthand form attribute when `v-bind` value is `true`."
        },
        "PreferTsExpectErrorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using `@ts-expect-error` over `@ts-ignore`."
        },
        "PreferTypeErrorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce throwing `TypeError` in type checking conditions."
        },
        "PreventAbbreviationsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "allowList": {
                                    "$ref": "#/definitions/BooleanObject"
                                },
                                "checkDefaultAndNamespaceImports": {
                                    "type": [
                                        "string",
                                        "boolean"
                                    ]
                                },
                                "checkFilenames": {
                                    "type": "boolean"
                                },
                                "checkProperties": {
                                    "type": "boolean"
                                },
                                "checkShorthandImports": {
                                    "type": [
                                        "string",
                                        "boolean"
                                    ]
                                },
                                "checkShorthandProperties": {
                                    "type": "boolean"
                                },
                                "checkVariables": {
                                    "type": "boolean"
                                },
                                "extendDefaultAllowList": {
                                    "type": "boolean"
                                },
                                "extendDefaultReplacements": {
                                    "type": "boolean"
                                },
                                "ignore": {
                                    "items": {},
                                    "type": "array"
                                },
                                "replacements": {
                                    "$ref": "#/definitions/Abbreviations"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prevent abbreviations."
        },
        "ProcessExitAsThrowRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require that `process.exit()` expressions use the same code path as `throw`."
        },
        "PromiseFunctionAsyncOption": {
            "description": "Option.",
            "properties": {
                "allowAny": {
                    "description": "Whether to consider `any` and `unknown` to be Promises.",
                    "type": "boolean"
                },
                "allowedPromiseNames": {
                    "description": "Any extra names of classes or interfaces to be considered Promises.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "checkArrowFunctions": {
                    "type": "boolean"
                },
                "checkFunctionDeclarations": {
                    "type": "boolean"
                },
                "checkFunctionExpressions": {
                    "type": "boolean"
                },
                "checkMethodDeclarations": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PromiseFunctionAsyncRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PromiseFunctionAsyncOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require any function or method that returns a Promise to be marked async."
        },
        "PropNameCasingOption": {
            "description": "Option.",
            "enum": [
                "camelCase",
                "snake_case"
            ],
            "type": "string"
        },
        "PropNameCasingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/PropNameCasingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce specific casing for the Prop name in Vue components."
        },
        "QuotePropsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "as-needed",
                                "consistent",
                                "consistent-as-needed"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "as-needed",
                                "consistent",
                                "consistent-as-needed"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "keywords": {
                                    "type": "boolean"
                                },
                                "numbers": {
                                    "type": "boolean"
                                },
                                "unnecessary": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require quotes around object literal property names in `<template>`."
        },
        "QuotePropsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "as-needed",
                                "consistent",
                                "consistent-as-needed"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "as-needed",
                                "consistent",
                                "consistent-as-needed"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "keywords": {
                                    "type": "boolean"
                                },
                                "numbers": {
                                    "type": "boolean"
                                },
                                "unnecessary": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require quotes around object literal property names."
        },
        "QuotePropsRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "as-needed",
                                "consistent",
                                "consistent-as-needed"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "always",
                                "as-needed",
                                "consistent",
                                "consistent-as-needed"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "keywords": {
                                    "type": "boolean"
                                },
                                "numbers": {
                                    "type": "boolean"
                                },
                                "unnecessary": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require quotes around object literal property names."
        },
        "QuotesConfig": {
            "anyOf": [
                {
                    "properties": {
                        "allowTemplateLiterals": {
                            "type": "boolean"
                        },
                        "avoidEscape": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "const": "avoid-escape",
                    "type": "string"
                }
            ],
            "description": "Config."
        },
        "QuotesConfig$1": {
            "anyOf": [
                {
                    "properties": {
                        "allowTemplateLiterals": {
                            "type": "boolean"
                        },
                        "avoidEscape": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "const": "avoid-escape",
                    "type": "string"
                }
            ],
            "description": "Config."
        },
        "QuotesConfig$2": {
            "anyOf": [
                {
                    "properties": {
                        "allowTemplateLiterals": {
                            "type": "boolean"
                        },
                        "avoidEscape": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "const": "avoid-escape",
                    "type": "string"
                }
            ],
            "description": "Config."
        },
        "QuotesOption": {
            "description": "Option.",
            "properties": {
                "avoidEscape": {
                    "type": "boolean"
                },
                "prefer": {
                    "enum": [
                        "double",
                        "single"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "QuotesOption$1": {
            "description": "Option.",
            "enum": [
                "backtick",
                "double",
                "single"
            ],
            "type": "string"
        },
        "QuotesOption$2": {
            "description": "Option.",
            "enum": [
                "backtick",
                "double",
                "single"
            ],
            "type": "string"
        },
        "QuotesOption$3": {
            "description": "Option.",
            "enum": [
                "backtick",
                "double",
                "single"
            ],
            "type": "string"
        },
        "QuotesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/QuotesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the consistent use of either double, or single quotes."
        },
        "QuotesRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/QuotesOption$1"
                        },
                        {
                            "$ref": "#/definitions/QuotesConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the consistent use of either backticks, double, or single quotes."
        },
        "QuotesRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/QuotesOption$2"
                        },
                        {
                            "$ref": "#/definitions/QuotesConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce use of double or single quotes."
        },
        "QuotesRuleConfig$3": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/QuotesOption$3"
                        },
                        {
                            "$ref": "#/definitions/QuotesConfig$2"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the consistent use of either backticks, double, or single quotes."
        },
        "RadixOption": {
            "description": "Option.",
            "enum": [
                "always",
                "as-needed"
            ],
            "type": "string"
        },
        "RadixRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RadixOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the consistent use of the radix argument when using `parseInt()`."
        },
        "Record<string,any>": {
            "type": "object"
        },
        "Record<string,boolean|\"off\"|\"readonly\"|\"writable\"|\"readable\"|\"writeable\">": {
            "type": "object"
        },
        "Record<string,string|(string&{zz_IGNORE_ME?:never;})>": {
            "type": "object"
        },
        "RegExp": {
            "properties": {
                "dotAll": {
                    "type": "boolean"
                },
                "flags": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean"
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "lastIndex": {
                    "type": "number"
                },
                "multiline": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "sticky": {
                    "type": "boolean"
                },
                "unicode": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RegexShorthandRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ]
        },
        "RelativeUrlStyleOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "RelativeUrlStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RelativeUrlStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent relative URL style."
        },
        "Replacements": {
            "anyOf": [
                {
                    "$ref": "#/definitions/BooleanObject"
                },
                {
                    "const": false,
                    "type": "boolean"
                }
            ]
        },
        "RequireArrayJoinSeparatorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using the separator argument with `Array#join()`."
        },
        "RequireArraySortCompareOption": {
            "description": "Option.",
            "properties": {
                "ignoreStringArrays": {
                    "description": "Whether to ignore arrays in which all elements are strings.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RequireArraySortCompareRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireArraySortCompareOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `Array#sort` calls to always provide a `compareFunction`."
        },
        "RequireAtomicUpdatesOption": {
            "description": "Option.",
            "properties": {
                "allowProperties": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RequireAtomicUpdatesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireAtomicUpdatesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`."
        },
        "RequireAwaitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow async functions which have no `await` expression."
        },
        "RequireAwaitRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow async functions which have no `await` expression."
        },
        "RequireComponentIsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `v-bind:is` of `<component>` elements."
        },
        "RequireDefaultPropRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require default value for props."
        },
        "RequireDescriptionOption$2": {
            "description": "Option.",
            "properties": {
                "ignore": {
                    "items": {
                        "enum": [
                            "eslint",
                            "eslint-disable",
                            "eslint-disable-line",
                            "eslint-disable-next-line",
                            "eslint-enable",
                            "eslint-env",
                            "exported",
                            "global",
                            "globals"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RequireDescriptionRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireDescriptionOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require include descriptions in ESLint directive-comments."
        },
        "RequireDirectExportOption": {
            "description": "Option.",
            "properties": {
                "disallowFunctionalComponentFunction": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RequireDirectExportRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireDirectExportOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require the component to be directly exported."
        },
        "RequireEmitValidatorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require type definitions in emits."
        },
        "RequireExplicitEmitsOption": {
            "description": "Option.",
            "properties": {
                "allowProps": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RequireExplicitEmitsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireExplicitEmitsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `emits` option with name triggered by `$emit()`."
        },
        "RequireExposeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require declare public properties using `expose`."
        },
        "RequireHookOption": {
            "description": "Option.",
            "properties": {
                "allowedFunctionCalls": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RequireHookRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireHookOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require setup and teardown to be within a hook."
        },
        "RequireJsdocOption$1": {
            "description": "Option.",
            "properties": {
                "require": {
                    "properties": {
                        "ArrowFunctionExpression": {
                            "type": "boolean"
                        },
                        "ClassDeclaration": {
                            "type": "boolean"
                        },
                        "FunctionDeclaration": {
                            "type": "boolean"
                        },
                        "FunctionExpression": {
                            "type": "boolean"
                        },
                        "MethodDefinition": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "RequireJsdocRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireJsdocOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require JSDoc comments."
        },
        "RequireMacroVariableNameOption": {
            "description": "Option.",
            "properties": {
                "defineEmits": {
                    "type": "string"
                },
                "defineProps": {
                    "type": "string"
                },
                "defineSlots": {
                    "type": "string"
                },
                "useAttrs": {
                    "type": "string"
                },
                "useSlots": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RequireMacroVariableNameRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireMacroVariableNameOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require a certain macro variable name."
        },
        "RequireNamePropertyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require a name property in Vue components."
        },
        "RequireNumberToFixedDigitsArgumentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using the digits argument with `Number#toFixed()`."
        },
        "RequirePostMessageTargetOriginRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`."
        },
        "RequirePropCommentOption": {
            "description": "Option.",
            "properties": {
                "type": {
                    "enum": [
                        "JSDoc",
                        "any",
                        "block",
                        "line"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RequirePropCommentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequirePropCommentOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require props to have a comment."
        },
        "RequirePropTypeConstructorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require prop type to be a constructor."
        },
        "RequirePropTypesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require type definitions in props."
        },
        "RequireRenderReturnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce render function to always return value."
        },
        "RequireSlotsAsFunctionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce properties of `$slots` to be used as a function."
        },
        "RequireStringKeyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow mapping keys other than strings."
        },
        "RequireToThrowMessageRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require toThrow() to be called with an error message."
        },
        "RequireToggleInsideTransitionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require control the display of the content inside `<transition>`."
        },
        "RequireTopLevelDescribeOption": {
            "description": "Option.",
            "properties": {
                "maxNumberOfTopLevelDescribes": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "RequireTopLevelDescribeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RequireTopLevelDescribeOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce that all tests are in a top-level describe."
        },
        "RequireTypedObjectPropRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce adding type declarations to object props."
        },
        "RequireTypedRefRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `ref` and `shallowRef` functions to be strongly typed."
        },
        "RequireUnicodeRegexpRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce the use of `u` or `v` flag on RegExp."
        },
        "RequireVForKeyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `v-bind:key` with `v-for` directives."
        },
        "RequireValidDefaultPropRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce props default values to be valid."
        },
        "RequireYieldRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require generator functions to contain `yield`."
        },
        "RestSpreadSpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "RestSpreadSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RestSpreadSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce spacing between rest and spread operators and their expressions."
        },
        "RestrictPlusOperandsOption": {
            "description": "Option.",
            "properties": {
                "allowAny": {
                    "description": "Whether to allow `any` typed values.",
                    "type": "boolean"
                },
                "allowBoolean": {
                    "description": "Whether to allow `boolean` typed values.",
                    "type": "boolean"
                },
                "allowNullish": {
                    "description": "Whether to allow potentially `null` or `undefined` typed values.",
                    "type": "boolean"
                },
                "allowNumberAndString": {
                    "description": "Whether to allow `bigint`/`number` typed values and `string` typed values to be added together.",
                    "type": "boolean"
                },
                "allowRegExp": {
                    "description": "Whether to allow `regexp` typed values.",
                    "type": "boolean"
                },
                "skipCompoundAssignments": {
                    "description": "Whether to skip compound assignments such as `+=`.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RestrictPlusOperandsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RestrictPlusOperandsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`."
        },
        "RestrictTemplateExpressionsOption": {
            "description": "Option.",
            "properties": {
                "allowAny": {
                    "description": "Whether to allow `any` typed values in template expressions.",
                    "type": "boolean"
                },
                "allowBoolean": {
                    "description": "Whether to allow `boolean` typed values in template expressions.",
                    "type": "boolean"
                },
                "allowNever": {
                    "description": "Whether to allow `never` typed values in template expressions.",
                    "type": "boolean"
                },
                "allowNullish": {
                    "description": "Whether to allow `nullish` typed values in template expressions.",
                    "type": "boolean"
                },
                "allowNumber": {
                    "description": "Whether to allow `number` typed values in template expressions.",
                    "type": "boolean"
                },
                "allowRegExp": {
                    "description": "Whether to allow `regexp` typed values in template expressions.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RestrictTemplateExpressionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/RestrictTemplateExpressionsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce template literal expressions to be of `string` type."
        },
        "ReturnAwaitOption": {
            "description": "Option.",
            "enum": [
                "always",
                "in-try-catch",
                "never"
            ],
            "type": "string"
        },
        "ReturnAwaitRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ReturnAwaitOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent returning of awaited values."
        },
        "ReturnInComputedPropertyOption": {
            "description": "Option.",
            "properties": {
                "treatUndefinedAsUnspecified": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ReturnInComputedPropertyRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ReturnInComputedPropertyOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce that a return statement is present in computed property."
        },
        "ReturnInEmitsValidatorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce that a return statement is present in emits validator."
        },
        "RuleConfig<[]>": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Rule configuration."
        },
        "RuleLevel": {
            "description": "Rule severity.",
            "enum": [
                0,
                1,
                2,
                "error",
                "off",
                "warn"
            ]
        },
        "ScriptIndentConfig": {
            "description": "Config.",
            "properties": {
                "baseIndent": {
                    "type": "number"
                },
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "switchCase": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ScriptIndentOption": {
            "anyOf": [
                {
                    "const": "tab",
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ],
            "description": "Option."
        },
        "ScriptIndentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ScriptIndentOption"
                        },
                        {
                            "$ref": "#/definitions/ScriptIndentConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent indentation in `<script>`."
        },
        "ScriptSetupUsesVarsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Prevent `<script setup>` variables used in `<template>` to be marked as unused."
        },
        "SemiRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "beforeStatementContinuationChars": {
                                    "enum": [
                                        "always",
                                        "any",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "omitLastInOneLineBlock": {
                                    "type": "boolean"
                                },
                                "omitLastInOneLineClassBody": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow semicolons instead of ASI."
        },
        "SemiRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "never",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "beforeStatementContinuationChars": {
                                    "enum": [
                                        "always",
                                        "any",
                                        "never"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "const": "always",
                            "type": "string"
                        },
                        {
                            "properties": {
                                "omitLastInOneLineBlock": {
                                    "type": "boolean"
                                },
                                "omitLastInOneLineClassBody": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow semicolons instead of ASI."
        },
        "SemiSpacingOption": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SemiSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SemiSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before and after semicolons."
        },
        "SemiStyleOption": {
            "description": "Option.",
            "enum": [
                "first",
                "last"
            ],
            "type": "string"
        },
        "SemiStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SemiStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce location of semicolons."
        },
        "ShebangOption$1": {
            "description": "Option.",
            "properties": {
                "convertPath": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "items": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ],
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array"
                            },
                            "type": "object"
                        },
                        {
                            "additionalItems": {
                                "properties": {
                                    "exclude": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "include": {
                                        "additionalItems": {
                                            "type": "string"
                                        },
                                        "items": [
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "replace": {
                                        "items": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "maxItems": 2,
                                        "minItems": 2,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "items": [
                                {
                                    "properties": {
                                        "exclude": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "include": {
                                            "additionalItems": {
                                                "type": "string"
                                            },
                                            "items": [
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "minItems": 1,
                                            "type": "array"
                                        },
                                        "replace": {
                                            "items": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "maxItems": 2,
                                            "minItems": 2,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            ],
                            "minItems": 1,
                            "type": "array"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "ShebangRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ShebangOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require correct usage of shebang."
        },
        "SingleLineOption": {
            "enum": [
                "comma",
                "semi"
            ],
            "type": "string"
        },
        "SinglelineHtmlElementContentNewlineOption": {
            "description": "Option.",
            "properties": {
                "ignoreWhenEmpty": {
                    "type": "boolean"
                },
                "ignoreWhenNoAttributes": {
                    "type": "boolean"
                },
                "ignores": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SinglelineHtmlElementContentNewlineRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SinglelineHtmlElementContentNewlineOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require a line break before and after the contents of a singleline element."
        },
        "SortArrayValuesRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "properties": {
                            "minValues": {
                                "type": "number"
                            },
                            "order": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "properties": {
                                                        "order": {
                                                            "properties": {
                                                                "caseSensitive": {
                                                                    "type": "boolean"
                                                                },
                                                                "natural": {
                                                                    "type": "boolean"
                                                                },
                                                                "type": {
                                                                    "enum": [
                                                                        "asc",
                                                                        "desc"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "valuePattern": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "properties": {
                                            "caseSensitive": {
                                                "type": "boolean"
                                            },
                                            "natural": {
                                                "type": "boolean"
                                            },
                                            "type": {
                                                "enum": [
                                                    "asc",
                                                    "desc"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "pathPattern": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "minValues": {
                                    "type": "number"
                                },
                                "order": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "properties": {
                                                            "order": {
                                                                "properties": {
                                                                    "caseSensitive": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "natural": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "type": {
                                                                        "enum": [
                                                                            "asc",
                                                                            "desc"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "valuePattern": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "properties": {
                                                "caseSensitive": {
                                                    "type": "boolean"
                                                },
                                                "natural": {
                                                    "type": "boolean"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "asc",
                                                        "desc"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "pathPattern": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require array values to be sorted."
        },
        "SortImportsOption": {
            "description": "Option.",
            "properties": {
                "allowSeparatedGroups": {
                    "type": "boolean"
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "ignoreDeclarationSort": {
                    "type": "boolean"
                },
                "ignoreMemberSort": {
                    "type": "boolean"
                },
                "memberSyntaxSortOrder": {
                    "items": [
                        {
                            "enum": [
                                "all",
                                "multiple",
                                "none",
                                "single"
                            ],
                            "type": "string"
                        },
                        {
                            "enum": [
                                "all",
                                "multiple",
                                "none",
                                "single"
                            ],
                            "type": "string"
                        },
                        {
                            "enum": [
                                "all",
                                "multiple",
                                "none",
                                "single"
                            ],
                            "type": "string"
                        },
                        {
                            "enum": [
                                "all",
                                "multiple",
                                "none",
                                "single"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 4,
                    "minItems": 4,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SortImportsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SortImportsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce sorted import declarations within modules."
        },
        "SortKeysConfig": {
            "description": "Config.",
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "ignoreChildrenOf": {
                    "items": {},
                    "type": "array"
                },
                "ignoreGrandchildrenOf": {
                    "items": {},
                    "type": "array"
                },
                "minKeys": {
                    "type": "number"
                },
                "natural": {
                    "type": "boolean"
                },
                "runOutsideVue": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SortKeysConfig$1": {
            "description": "Config.",
            "properties": {
                "allowLineSeparatedGroups": {
                    "type": "boolean"
                },
                "caseSensitive": {
                    "type": "boolean"
                },
                "minKeys": {
                    "type": "number"
                },
                "natural": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SortKeysOption$1": {
            "description": "Option.",
            "enum": [
                "asc",
                "desc"
            ],
            "type": "string"
        },
        "SortKeysOption$3": {
            "description": "Option.",
            "enum": [
                "asc",
                "desc"
            ],
            "type": "string"
        },
        "SortKeysRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "additionalItems": {
                        "properties": {
                            "allowLineSeparatedGroups": {
                                "type": "boolean"
                            },
                            "hasProperties": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "minKeys": {
                                "type": "number"
                            },
                            "order": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "properties": {
                                                        "keyPattern": {
                                                            "type": "string"
                                                        },
                                                        "order": {
                                                            "properties": {
                                                                "caseSensitive": {
                                                                    "type": "boolean"
                                                                },
                                                                "natural": {
                                                                    "type": "boolean"
                                                                },
                                                                "type": {
                                                                    "enum": [
                                                                        "asc",
                                                                        "desc"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "properties": {
                                            "caseSensitive": {
                                                "type": "boolean"
                                            },
                                            "natural": {
                                                "type": "boolean"
                                            },
                                            "type": {
                                                "enum": [
                                                    "asc",
                                                    "desc"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "pathPattern": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "allowLineSeparatedGroups": {
                                    "type": "boolean"
                                },
                                "hasProperties": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "minKeys": {
                                    "type": "number"
                                },
                                "order": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "properties": {
                                                            "keyPattern": {
                                                                "type": "string"
                                                            },
                                                            "order": {
                                                                "properties": {
                                                                    "caseSensitive": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "natural": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "type": {
                                                                        "enum": [
                                                                            "asc",
                                                                            "desc"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "properties": {
                                                "caseSensitive": {
                                                    "type": "boolean"
                                                },
                                                "natural": {
                                                    "type": "boolean"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "asc",
                                                        "desc"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "pathPattern": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "allowLineSeparatedGroups": {
                                    "type": "boolean"
                                },
                                "caseSensitive": {
                                    "type": "boolean"
                                },
                                "minKeys": {
                                    "type": "number"
                                },
                                "natural": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require mapping keys to be sorted."
        },
        "SortKeysRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SortKeysOption$1"
                        },
                        {
                            "$ref": "#/definitions/SortKeysConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce sort-keys in a manner that is compatible with order-in-components."
        },
        "SortKeysRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "additionalItems": {
                        "properties": {
                            "allowLineSeparatedGroups": {
                                "type": "boolean"
                            },
                            "hasProperties": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "minKeys": {
                                "type": "number"
                            },
                            "order": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "properties": {
                                                        "keyPattern": {
                                                            "type": "string"
                                                        },
                                                        "order": {
                                                            "properties": {
                                                                "caseSensitive": {
                                                                    "type": "boolean"
                                                                },
                                                                "natural": {
                                                                    "type": "boolean"
                                                                },
                                                                "type": {
                                                                    "enum": [
                                                                        "asc",
                                                                        "desc"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "properties": {
                                            "caseSensitive": {
                                                "type": "boolean"
                                            },
                                            "natural": {
                                                "type": "boolean"
                                            },
                                            "type": {
                                                "enum": [
                                                    "asc",
                                                    "desc"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "pathPattern": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "allowLineSeparatedGroups": {
                                    "type": "boolean"
                                },
                                "hasProperties": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "minKeys": {
                                    "type": "number"
                                },
                                "order": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "properties": {
                                                            "keyPattern": {
                                                                "type": "string"
                                                            },
                                                            "order": {
                                                                "properties": {
                                                                    "caseSensitive": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "natural": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "type": {
                                                                        "enum": [
                                                                            "asc",
                                                                            "desc"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "properties": {
                                                "caseSensitive": {
                                                    "type": "boolean"
                                                },
                                                "natural": {
                                                    "type": "boolean"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "asc",
                                                        "desc"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "pathPattern": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        },
                        {
                            "properties": {
                                "allowLineSeparatedGroups": {
                                    "type": "boolean"
                                },
                                "caseSensitive": {
                                    "type": "boolean"
                                },
                                "minKeys": {
                                    "type": "number"
                                },
                                "natural": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require object keys to be sorted."
        },
        "SortKeysRuleConfig$3": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SortKeysOption$3"
                        },
                        {
                            "$ref": "#/definitions/SortKeysConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require object keys to be sorted."
        },
        "SortSequenceValuesRuleConfig": {
            "anyOf": [
                {
                    "additionalItems": {
                        "properties": {
                            "minValues": {
                                "type": "number"
                            },
                            "order": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "properties": {
                                                        "order": {
                                                            "properties": {
                                                                "caseSensitive": {
                                                                    "type": "boolean"
                                                                },
                                                                "natural": {
                                                                    "type": "boolean"
                                                                },
                                                                "type": {
                                                                    "enum": [
                                                                        "asc",
                                                                        "desc"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "valuePattern": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "properties": {
                                            "caseSensitive": {
                                                "type": "boolean"
                                            },
                                            "natural": {
                                                "type": "boolean"
                                            },
                                            "type": {
                                                "enum": [
                                                    "asc",
                                                    "desc"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "pathPattern": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "properties": {
                                "minValues": {
                                    "type": "number"
                                },
                                "order": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "properties": {
                                                            "order": {
                                                                "properties": {
                                                                    "caseSensitive": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "natural": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "type": {
                                                                        "enum": [
                                                                            "asc",
                                                                            "desc"
                                                                        ],
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "valuePattern": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ]
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "properties": {
                                                "caseSensitive": {
                                                    "type": "boolean"
                                                },
                                                "natural": {
                                                    "type": "boolean"
                                                },
                                                "type": {
                                                    "enum": [
                                                        "asc",
                                                        "desc"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "pathPattern": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require sequence values to be sorted."
        },
        "SortTypeConstituentsOption": {
            "description": "Option.",
            "properties": {
                "checkIntersections": {
                    "description": "Whether to check intersection types.",
                    "type": "boolean"
                },
                "checkUnions": {
                    "description": "Whether to check union types.",
                    "type": "boolean"
                },
                "groupOrder": {
                    "description": "Ordering of the groups.",
                    "items": {
                        "enum": [
                            "conditional",
                            "function",
                            "import",
                            "intersection",
                            "keyword",
                            "literal",
                            "named",
                            "nullish",
                            "object",
                            "operator",
                            "tuple",
                            "union"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SortTypeConstituentsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SortTypeConstituentsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce constituents of a type union/intersection to be sorted alphabetically."
        },
        "SortVarsOption": {
            "description": "Option.",
            "properties": {
                "ignoreCase": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SortVarsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SortVarsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require variables within the same declaration block to be sorted."
        },
        "SourceType": {
            "description": "Set to \"script\" (default) or \"module\" if your code is in ECMAScript modules.",
            "enum": [
                "module",
                "script"
            ],
            "type": "string"
        },
        "SpaceBeforeBlocksOption": {
            "anyOf": [
                {
                    "properties": {
                        "classes": {
                            "enum": [
                                "always",
                                "never",
                                "off"
                            ],
                            "type": "string"
                        },
                        "functions": {
                            "enum": [
                                "always",
                                "never",
                                "off"
                            ],
                            "type": "string"
                        },
                        "keywords": {
                            "enum": [
                                "always",
                                "never",
                                "off"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "SpaceBeforeBlocksOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "classes": {
                            "enum": [
                                "always",
                                "never",
                                "off"
                            ],
                            "type": "string"
                        },
                        "functions": {
                            "enum": [
                                "always",
                                "never",
                                "off"
                            ],
                            "type": "string"
                        },
                        "keywords": {
                            "enum": [
                                "always",
                                "never",
                                "off"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "SpaceBeforeBlocksRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceBeforeBlocksOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before blocks."
        },
        "SpaceBeforeBlocksRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceBeforeBlocksOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before blocks."
        },
        "SpaceBeforeFunctionParenOption": {
            "anyOf": [
                {
                    "properties": {
                        "anonymous": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        },
                        "asyncArrow": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        },
                        "named": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "SpaceBeforeFunctionParenOption$1": {
            "anyOf": [
                {
                    "properties": {
                        "anonymous": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        },
                        "asyncArrow": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        },
                        "named": {
                            "enum": [
                                "always",
                                "ignore",
                                "never"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "SpaceBeforeFunctionParenRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceBeforeFunctionParenOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before function parenthesis."
        },
        "SpaceBeforeFunctionParenRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceBeforeFunctionParenOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before `function` definition opening parenthesis."
        },
        "SpaceInParensConfig": {
            "description": "Config.",
            "properties": {
                "exceptions": {
                    "items": {
                        "enum": [
                            "()",
                            "[]",
                            "empty",
                            "{}"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpaceInParensConfig$1": {
            "description": "Config.",
            "properties": {
                "exceptions": {
                    "items": {
                        "enum": [
                            "()",
                            "[]",
                            "empty",
                            "{}"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpaceInParensOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "SpaceInParensOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "SpaceInParensRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceInParensOption"
                        },
                        {
                            "$ref": "#/definitions/SpaceInParensConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside parentheses in `<template>`."
        },
        "SpaceInParensRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceInParensOption$1"
                        },
                        {
                            "$ref": "#/definitions/SpaceInParensConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing inside parentheses."
        },
        "SpaceInfixOpsOption": {
            "description": "Option.",
            "properties": {
                "int32Hint": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpaceInfixOpsOption$1": {
            "description": "Option.",
            "properties": {
                "int32Hint": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpaceInfixOpsOption$2": {
            "description": "Option.",
            "properties": {
                "int32Hint": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpaceInfixOpsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceInfixOpsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require spacing around infix operators in `<template>`."
        },
        "SpaceInfixOpsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceInfixOpsOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require spacing around infix operators."
        },
        "SpaceInfixOpsRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceInfixOpsOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require spacing around infix operators."
        },
        "SpaceUnaryOpsOption": {
            "description": "Option.",
            "properties": {
                "nonwords": {
                    "type": "boolean"
                },
                "overrides": {
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "type": "object"
                },
                "words": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpaceUnaryOpsOption$1": {
            "description": "Option.",
            "properties": {
                "nonwords": {
                    "type": "boolean"
                },
                "overrides": {
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "type": "object"
                },
                "words": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpaceUnaryOpsOption$2": {
            "description": "Option.",
            "properties": {
                "nonwords": {
                    "type": "boolean"
                },
                "overrides": {
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "type": "object"
                },
                "words": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpaceUnaryOpsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceUnaryOpsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before or after unary operators in `<template>`."
        },
        "SpaceUnaryOpsRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceUnaryOpsOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow spaces after unary operators."
        },
        "SpaceUnaryOpsRuleConfig$2": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpaceUnaryOpsOption$2"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing before or after unary operators."
        },
        "SpacedCommentConfig": {
            "description": "Config.",
            "properties": {
                "exceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "markers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpacedCommentConfig$1": {
            "description": "Config.",
            "properties": {
                "block": {
                    "properties": {
                        "balanced": {
                            "type": "boolean"
                        },
                        "exceptions": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "markers": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "exceptions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "line": {
                    "properties": {
                        "exceptions": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "markers": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "markers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpacedCommentOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "SpacedCommentOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "SpacedCommentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpacedCommentOption"
                        },
                        {
                            "$ref": "#/definitions/SpacedCommentConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing after the `#` in a comment."
        },
        "SpacedCommentRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SpacedCommentOption$1"
                        },
                        {
                            "$ref": "#/definitions/SpacedCommentConfig$1"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent spacing after the `//` or `/*` in a comment."
        },
        "SpacingConfig": {
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "StatementType": {
            "anyOf": [
                {
                    "additionalItems": {
                        "enum": [
                            "*",
                            "block",
                            "block-like",
                            "break",
                            "case",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "directive",
                            "do",
                            "empty",
                            "export",
                            "exports",
                            "expression",
                            "for",
                            "function",
                            "if",
                            "iife",
                            "import",
                            "interface",
                            "let",
                            "multiline-block-like",
                            "multiline-const",
                            "multiline-expression",
                            "multiline-let",
                            "multiline-var",
                            "require",
                            "return",
                            "singleline-const",
                            "singleline-let",
                            "singleline-var",
                            "switch",
                            "throw",
                            "try",
                            "type",
                            "var",
                            "while",
                            "with"
                        ],
                        "type": "string"
                    },
                    "items": [
                        {
                            "enum": [
                                "*",
                                "block",
                                "block-like",
                                "break",
                                "case",
                                "class",
                                "const",
                                "continue",
                                "debugger",
                                "default",
                                "directive",
                                "do",
                                "empty",
                                "export",
                                "exports",
                                "expression",
                                "for",
                                "function",
                                "if",
                                "iife",
                                "import",
                                "interface",
                                "let",
                                "multiline-block-like",
                                "multiline-const",
                                "multiline-expression",
                                "multiline-let",
                                "multiline-var",
                                "require",
                                "return",
                                "singleline-const",
                                "singleline-let",
                                "singleline-var",
                                "switch",
                                "throw",
                                "try",
                                "type",
                                "var",
                                "while",
                                "with"
                            ],
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        "*",
                        "block",
                        "block-like",
                        "break",
                        "case",
                        "class",
                        "const",
                        "continue",
                        "debugger",
                        "default",
                        "directive",
                        "do",
                        "empty",
                        "export",
                        "exports",
                        "expression",
                        "for",
                        "function",
                        "if",
                        "iife",
                        "import",
                        "interface",
                        "let",
                        "multiline-block-like",
                        "multiline-const",
                        "multiline-expression",
                        "multiline-let",
                        "multiline-var",
                        "require",
                        "return",
                        "singleline-const",
                        "singleline-let",
                        "singleline-var",
                        "switch",
                        "throw",
                        "try",
                        "type",
                        "var",
                        "while",
                        "with"
                    ],
                    "type": "string"
                }
            ]
        },
        "StatementType$1": {
            "anyOf": [
                {
                    "additionalItems": {
                        "enum": [
                            "*",
                            "block",
                            "block-like",
                            "break",
                            "case",
                            "cjs-export",
                            "cjs-import",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "directive",
                            "do",
                            "empty",
                            "export",
                            "expression",
                            "for",
                            "function",
                            "if",
                            "iife",
                            "import",
                            "let",
                            "multiline-block-like",
                            "multiline-const",
                            "multiline-expression",
                            "multiline-let",
                            "multiline-var",
                            "return",
                            "singleline-const",
                            "singleline-let",
                            "singleline-var",
                            "switch",
                            "throw",
                            "try",
                            "var",
                            "while",
                            "with"
                        ],
                        "type": "string"
                    },
                    "items": [
                        {
                            "enum": [
                                "*",
                                "block",
                                "block-like",
                                "break",
                                "case",
                                "cjs-export",
                                "cjs-import",
                                "class",
                                "const",
                                "continue",
                                "debugger",
                                "default",
                                "directive",
                                "do",
                                "empty",
                                "export",
                                "expression",
                                "for",
                                "function",
                                "if",
                                "iife",
                                "import",
                                "let",
                                "multiline-block-like",
                                "multiline-const",
                                "multiline-expression",
                                "multiline-let",
                                "multiline-var",
                                "return",
                                "singleline-const",
                                "singleline-let",
                                "singleline-var",
                                "switch",
                                "throw",
                                "try",
                                "var",
                                "while",
                                "with"
                            ],
                            "type": "string"
                        }
                    ],
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        "*",
                        "block",
                        "block-like",
                        "break",
                        "case",
                        "cjs-export",
                        "cjs-import",
                        "class",
                        "const",
                        "continue",
                        "debugger",
                        "default",
                        "directive",
                        "do",
                        "empty",
                        "export",
                        "expression",
                        "for",
                        "function",
                        "if",
                        "iife",
                        "import",
                        "let",
                        "multiline-block-like",
                        "multiline-const",
                        "multiline-expression",
                        "multiline-let",
                        "multiline-var",
                        "return",
                        "singleline-const",
                        "singleline-let",
                        "singleline-var",
                        "switch",
                        "throw",
                        "try",
                        "var",
                        "while",
                        "with"
                    ],
                    "type": "string"
                }
            ]
        },
        "StaticClassNamesOrderRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce static class names order."
        },
        "StrictBooleanExpressionsOption": {
            "description": "Option.",
            "properties": {
                "allowAny": {
                    "type": "boolean"
                },
                "allowNullableBoolean": {
                    "type": "boolean"
                },
                "allowNullableEnum": {
                    "type": "boolean"
                },
                "allowNullableNumber": {
                    "type": "boolean"
                },
                "allowNullableObject": {
                    "type": "boolean"
                },
                "allowNullableString": {
                    "type": "boolean"
                },
                "allowNumber": {
                    "type": "boolean"
                },
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                    "type": "boolean"
                },
                "allowString": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "StrictBooleanExpressionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/StrictBooleanExpressionsOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow certain types in boolean expressions."
        },
        "StrictOption": {
            "description": "Option.",
            "enum": [
                "function",
                "global",
                "never",
                "safe"
            ],
            "type": "string"
        },
        "StrictRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/StrictOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow strict mode directives."
        },
        "StringContentOption": {
            "description": "Option.",
            "properties": {
                "patterns": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "properties": {
                                    "fix": {
                                        "type": "boolean"
                                    },
                                    "message": {
                                        "type": "string"
                                    },
                                    "suggest": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "StringContentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/StringContentOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce better string content."
        },
        "Styles": {
            "anyOf": [
                {
                    "$ref": "#/definitions/BooleanObject$1"
                },
                {
                    "const": false,
                    "type": "boolean"
                }
            ]
        },
        "SwitchCaseBracesOption": {
            "description": "Option.",
            "enum": [
                "always",
                "avoid"
            ],
            "type": "string"
        },
        "SwitchCaseBracesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SwitchCaseBracesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent brace style for `case` clauses."
        },
        "SwitchColonSpacingOption": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SwitchColonSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/SwitchColonSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce spacing around colons of switch statements."
        },
        "SwitchExhaustivenessCheckRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require switch-case statements to be exhaustive with union type."
        },
        "SymbolDescriptionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require symbol descriptions."
        },
        "TemplateCurlySpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "TemplateCurlySpacingOption$1": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "TemplateCurlySpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/TemplateCurlySpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow spacing around embedded expressions of template strings in `<template>`."
        },
        "TemplateCurlySpacingRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/TemplateCurlySpacingOption$1"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow spacing around embedded expressions of template strings."
        },
        "TemplateIndentOption": {
            "description": "Option.",
            "properties": {
                "comments": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "functions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "indent": {
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "selectors": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tags": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TemplateIndentRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/TemplateIndentOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Fix whitespace-insensitive template indentation."
        },
        "TemplateTagSpacingOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "TemplateTagSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/TemplateTagSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow spacing between template tags and their literals."
        },
        "TextEncodingIdentifierCaseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce consistent case for text encoding identifiers."
        },
        "ThisInTemplateOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "ThisInTemplateRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ThisInTemplateOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow usage of `this` in template."
        },
        "ThrowNewErrorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `new` when throwing an error."
        },
        "TripleSlashReferenceOption": {
            "description": "Option.",
            "properties": {
                "lib": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "path": {
                    "enum": [
                        "always",
                        "never"
                    ],
                    "type": "string"
                },
                "types": {
                    "enum": [
                        "always",
                        "never",
                        "prefer-import"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TripleSlashReferenceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/TripleSlashReferenceOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow certain triple slash directives in favor of ES6-style import declarations."
        },
        "TypeAnnotationSpacingOption": {
            "description": "Option.",
            "properties": {
                "after": {
                    "type": "boolean"
                },
                "before": {
                    "type": "boolean"
                },
                "overrides": {
                    "properties": {
                        "arrow": {
                            "$ref": "#/definitions/SpacingConfig"
                        },
                        "colon": {
                            "$ref": "#/definitions/SpacingConfig"
                        },
                        "parameter": {
                            "$ref": "#/definitions/SpacingConfig"
                        },
                        "property": {
                            "$ref": "#/definitions/SpacingConfig"
                        },
                        "returnType": {
                            "$ref": "#/definitions/SpacingConfig"
                        },
                        "variable": {
                            "$ref": "#/definitions/SpacingConfig"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "TypeAnnotationSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/TypeAnnotationSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require consistent spacing around type annotations."
        },
        "TypeItems": {
            "enum": [
                "constructor",
                "field",
                "method",
                "readonly-field",
                "readonly-signature",
                "signature"
            ],
            "type": "string"
        },
        "TypeModifiers": {
            "enum": [
                "array",
                "boolean",
                "function",
                "number",
                "string"
            ],
            "type": "string"
        },
        "TypedefOption": {
            "description": "Option.",
            "properties": {
                "arrayDestructuring": {
                    "type": "boolean"
                },
                "arrowParameter": {
                    "type": "boolean"
                },
                "memberVariableDeclaration": {
                    "type": "boolean"
                },
                "objectDestructuring": {
                    "type": "boolean"
                },
                "parameter": {
                    "type": "boolean"
                },
                "propertyDeclaration": {
                    "type": "boolean"
                },
                "variableDeclaration": {
                    "type": "boolean"
                },
                "variableDeclarationIgnoreFunction": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TypedefRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/TypedefOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require type annotations in certain places."
        },
        "TypesConfig": {
            "anyOf": [
                {
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/definitions/TypeItems"
                                },
                                "type": "array"
                            },
                            {
                                "enum": [
                                    "constructor",
                                    "field",
                                    "method",
                                    "readonly-field",
                                    "readonly-signature",
                                    "signature"
                                ],
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                {
                    "properties": {
                        "memberTypes": {
                            "anyOf": [
                                {
                                    "items": {
                                        "anyOf": [
                                            {
                                                "items": {
                                                    "$ref": "#/definitions/TypeItems"
                                                },
                                                "type": "array"
                                            },
                                            {
                                                "enum": [
                                                    "constructor",
                                                    "field",
                                                    "method",
                                                    "readonly-field",
                                                    "readonly-signature",
                                                    "signature"
                                                ],
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                },
                                {
                                    "const": "never",
                                    "type": "string"
                                }
                            ]
                        },
                        "optionalityOrder": {
                            "$ref": "#/definitions/OptionalityOrderOptions"
                        },
                        "order": {
                            "$ref": "#/definitions/OrderOptions"
                        }
                    },
                    "type": "object"
                },
                {
                    "const": "never",
                    "type": "string"
                }
            ]
        },
        "UnambiguousRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Forbid potentially ambiguous parse goal (`script` vs. `module`)."
        },
        "UnboundMethodOption": {
            "description": "Option.",
            "properties": {
                "ignoreStatic": {
                    "description": "Whether to skip checking whether `static` methods are correctly bound.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "UnboundMethodRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/UnboundMethodOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce unbound methods are called with their expected scope."
        },
        "UnderscoreOptions": {
            "enum": [
                "allow",
                "allowDouble",
                "allowSingleOrDouble",
                "forbid",
                "require",
                "requireDouble"
            ],
            "type": "string"
        },
        "UnicodeBomOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "UnicodeBomRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/UnicodeBomOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow Unicode byte order mark (BOM)."
        },
        "UnifiedSignaturesOption": {
            "description": "Option.",
            "properties": {
                "ignoreDifferentlyNamedParameters": {
                    "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "UnifiedSignaturesRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/UnifiedSignaturesOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter."
        },
        "UseIsnanOption": {
            "description": "Option.",
            "properties": {
                "enforceForIndexOf": {
                    "type": "boolean"
                },
                "enforceForSwitchCase": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "UseIsnanRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/UseIsnanOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require calls to `isNaN()` when checking for `NaN`."
        },
        "UseVOnExactRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce usage of `exact` modifier on `v-on`."
        },
        "VBindStyleOption": {
            "description": "Option.",
            "enum": [
                "longform",
                "shorthand"
            ],
            "type": "string"
        },
        "VBindStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/VBindStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `v-bind` directive style."
        },
        "VForDelimiterStyleOption": {
            "description": "Option.",
            "enum": [
                "in",
                "of"
            ],
            "type": "string"
        },
        "VForDelimiterStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/VForDelimiterStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `v-for` directive's delimiter style."
        },
        "VOnEventHyphenationConfig": {
            "description": "Config.",
            "properties": {
                "autofix": {
                    "type": "boolean"
                },
                "ignore": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "VOnEventHyphenationOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "VOnEventHyphenationRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/VOnEventHyphenationOption"
                        },
                        {
                            "$ref": "#/definitions/VOnEventHyphenationConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce v-on event naming style on custom components in template."
        },
        "VOnFunctionCallConfig": {
            "description": "Config.",
            "properties": {
                "ignoreIncludesComment": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "VOnFunctionCallOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "VOnFunctionCallRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/VOnFunctionCallOption"
                        },
                        {
                            "$ref": "#/definitions/VOnFunctionCallConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce or forbid parentheses after method calls without arguments in `v-on` directives."
        },
        "VOnHandlerStyleConfig": {
            "description": "Config.",
            "properties": {
                "ignoreIncludesComment": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "VOnHandlerStyleOption": {
            "anyOf": [
                {
                    "items": [
                        {
                            "const": "method",
                            "type": "string"
                        },
                        {
                            "enum": [
                                "inline",
                                "inline-function"
                            ],
                            "type": "string"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                },
                {
                    "enum": [
                        "inline",
                        "inline-function"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "VOnHandlerStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/VOnHandlerStyleOption"
                        },
                        {
                            "$ref": "#/definitions/VOnHandlerStyleConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce writing style for handlers in `v-on` directives."
        },
        "VOnStyleOption": {
            "description": "Option.",
            "enum": [
                "longform",
                "shorthand"
            ],
            "type": "string"
        },
        "VOnStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/VOnStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `v-on` directive style."
        },
        "VSlotStyleOption": {
            "anyOf": [
                {
                    "properties": {
                        "atComponent": {
                            "enum": [
                                "longform",
                                "shorthand",
                                "v-slot"
                            ],
                            "type": "string"
                        },
                        "default": {
                            "enum": [
                                "longform",
                                "shorthand",
                                "v-slot"
                            ],
                            "type": "string"
                        },
                        "named": {
                            "enum": [
                                "longform",
                                "shorthand"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "longform",
                        "shorthand"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "VSlotStyleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/VSlotStyleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce `v-slot` directive style."
        },
        "ValidAttributeNameRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require valid attribute names."
        },
        "ValidDefineEmitsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `defineEmits` compiler macro."
        },
        "ValidDefineOptionsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `defineOptions` compiler macro."
        },
        "ValidDefinePropsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `defineProps` compiler macro."
        },
        "ValidDescribeCallbackRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid describe callback."
        },
        "ValidExpectOption": {
            "description": "Option.",
            "properties": {
                "alwaysAwait": {
                    "type": "boolean"
                },
                "asyncMatchers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "maxArgs": {
                    "type": "number"
                },
                "minArgs": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ValidExpectRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ValidExpectOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `expect()` usage."
        },
        "ValidJsdocOption": {
            "description": "Option.",
            "properties": {
                "matchDescription": {
                    "type": "string"
                },
                "prefer": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "preferType": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "requireParamDescription": {
                    "type": "boolean"
                },
                "requireParamType": {
                    "type": "boolean"
                },
                "requireReturn": {
                    "type": "boolean"
                },
                "requireReturnDescription": {
                    "type": "boolean"
                },
                "requireReturnType": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ValidJsdocRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ValidJsdocOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid JSDoc comments."
        },
        "ValidJsonNumberRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow invalid number for JSON."
        },
        "ValidModelDefinitionRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require valid keys in model option."
        },
        "ValidNextTickRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `nextTick` function calls."
        },
        "ValidTemplateRootRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid template root."
        },
        "ValidTitleOption": {
            "additionalProperties": {},
            "description": "Option.",
            "properties": {
                "allowArguments": {
                    "type": "boolean"
                },
                "disallowedWords": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignoreTypeOfDescribeName": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ValidTitleRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ValidTitleOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid titles."
        },
        "ValidTypeofOption": {
            "description": "Option.",
            "properties": {
                "requireStringLiterals": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ValidTypeofRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ValidTypeofOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce comparing `typeof` expressions against valid strings."
        },
        "ValidVBindRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-bind` directives."
        },
        "ValidVBindSyncRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `.sync` modifier on `v-bind` directives."
        },
        "ValidVCloakRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-cloak` directives."
        },
        "ValidVElseIfRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-else-if` directives."
        },
        "ValidVElseRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-else` directives."
        },
        "ValidVForRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-for` directives."
        },
        "ValidVHtmlRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-html` directives."
        },
        "ValidVIfRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-if` directives."
        },
        "ValidVIsRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-is` directives."
        },
        "ValidVMemoRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-memo` directives."
        },
        "ValidVModelRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-model` directives."
        },
        "ValidVOnOption": {
            "description": "Option.",
            "properties": {
                "modifiers": {
                    "items": {},
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ValidVOnRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ValidVOnOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-on` directives."
        },
        "ValidVOnceRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-once` directives."
        },
        "ValidVPreRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-pre` directives."
        },
        "ValidVShowRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-show` directives."
        },
        "ValidVSlotOption": {
            "description": "Option.",
            "properties": {
                "allowModifiers": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ValidVSlotRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/ValidVSlotOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-slot` directives."
        },
        "ValidVTextRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Enforce valid `v-text` directives."
        },
        "Value$3": {
            "enum": [
                "always",
                "as-needed",
                "never"
            ],
            "type": "string"
        },
        "ValueWithIgnore": {
            "enum": [
                "always",
                "always-multiline",
                "ignore",
                "never",
                "only-multiline"
            ],
            "type": "string"
        },
        "ValueWithIgnore$1": {
            "enum": [
                "always",
                "always-multiline",
                "ignore",
                "never",
                "only-multiline"
            ],
            "type": "string"
        },
        "ValueWithIgnore$2": {
            "enum": [
                "always",
                "always-multiline",
                "ignore",
                "never",
                "only-multiline"
            ],
            "type": "string"
        },
        "ValueWithIgnore$3": {
            "enum": [
                "always",
                "always-multiline",
                "ignore",
                "never",
                "only-multiline"
            ],
            "type": "string"
        },
        "VarsOnTopRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require `var` declarations be placed at the top of their containing scope."
        },
        "VueCustomBlockNoParsingErrorRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow parsing errors in Vue custom blocks."
        },
        "VueCustomBlockNoParsingErrorRuleConfig$1": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Disallow parsing errors in Vue custom blocks."
        },
        "WrapIifeConfig": {
            "description": "Config.",
            "properties": {
                "functionPrototypeMethods": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "WrapIifeOption": {
            "description": "Option.",
            "enum": [
                "any",
                "inside",
                "outside"
            ],
            "type": "string"
        },
        "WrapIifeRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/WrapIifeOption"
                        },
                        {
                            "$ref": "#/definitions/WrapIifeConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require parentheses around immediate `function` invocations."
        },
        "WrapRegexRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        }
                    ],
                    "maxItems": 1,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require parenthesis around regex literals."
        },
        "YieldStarSpacingOption": {
            "anyOf": [
                {
                    "properties": {
                        "after": {
                            "type": "boolean"
                        },
                        "before": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "after",
                        "before",
                        "both",
                        "neither"
                    ],
                    "type": "string"
                }
            ],
            "description": "Option."
        },
        "YieldStarSpacingRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/YieldStarSpacingOption"
                        }
                    ],
                    "maxItems": 2,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow spacing around the `*` in `yield*` expressions."
        },
        "YodaConfig": {
            "description": "Config.",
            "properties": {
                "exceptRange": {
                    "type": "boolean"
                },
                "onlyEquality": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "YodaOption": {
            "description": "Option.",
            "enum": [
                "always",
                "never"
            ],
            "type": "string"
        },
        "YodaRuleConfig": {
            "anyOf": [
                {
                    "items": [
                        {
                            "$ref": "#/definitions/RuleLevel"
                        },
                        {
                            "$ref": "#/definitions/YodaOption"
                        },
                        {
                            "$ref": "#/definitions/YodaConfig"
                        }
                    ],
                    "maxItems": 3,
                    "minItems": 1,
                    "type": "array"
                },
                {
                    "enum": [
                        0,
                        1,
                        2,
                        "error",
                        "off",
                        "warn"
                    ]
                }
            ],
            "description": "Require or disallow \"Yoda\" conditions."
        }
    }
}

